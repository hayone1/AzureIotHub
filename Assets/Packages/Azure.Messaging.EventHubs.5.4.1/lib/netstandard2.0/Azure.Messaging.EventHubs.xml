<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Azure.Messaging.EventHubs</name>
    </assembly>
    <members>
        <member name="T:Azure.Messaging.EventHubs.Amqp.AmqpClient">
             <summary>
               A transport client abstraction responsible for brokering operations for AMQP-based connections.
               It is intended that the public <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" /> make use of an instance via containment
               and delegate operations to it.
             </summary>
            
             <seealso cref="T:Azure.Messaging.EventHubs.Core.TransportClient" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Amqp.AmqpClient.IsClosed">
             <summary>
               Indicates whether or not this client has been closed.
             </summary>
            
             <value>
               <c>true</c> if the client is closed; otherwise, <c>false</c>.
             </value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Amqp.AmqpClient.ServiceEndpoint">
             <summary>
               The endpoint for the Event Hubs service to which the client is associated.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Amqp.AmqpClient.ConnectionEndpoint">
             <summary>
               The endpoint to used establishing a connection to the Event Hubs service to which the scope is associated.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpClient.#ctor(System.String,System.String,Azure.Messaging.EventHubs.Authorization.EventHubTokenCredential,Azure.Messaging.EventHubs.EventHubConnectionOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Amqp.AmqpClient" /> class.
             </summary>
            
             <param name="host">The fully qualified host name for the Event Hubs namespace.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to connect the client to.</param>
             <param name="credential">The Azure managed identity credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
             <param name="clientOptions">A set of options to apply when configuring the client.</param>
            
             <remarks>
               As an internal type, this class performs only basic sanity checks against its arguments.  It
               is assumed that callers are trusted and have performed deep validation.
            
               Any parameters passed are assumed to be owned by this instance and safe to mutate or dispose;
               creation of clones or otherwise protecting the parameters is assumed to be the purview of the
               caller.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpClient.#ctor(System.String,System.String,Azure.Messaging.EventHubs.Authorization.EventHubTokenCredential,Azure.Messaging.EventHubs.EventHubConnectionOptions,Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope,Azure.Messaging.EventHubs.Amqp.AmqpMessageConverter)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Amqp.AmqpClient" /> class.
             </summary>
            
             <param name="host">The fully qualified host name for the Event Hubs namespace.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to connect the client to.</param>
             <param name="credential">The Azure managed identity credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
             <param name="clientOptions">A set of options to apply when configuring the client.</param>
             <param name="connectionScope">The optional scope to use for AMQP connection management.  If <c>null</c>, a new scope will be created.</param>
             <param name="messageConverter">The optional converter to use for transforming AMQP message-related types.  If <c>null</c>, a new converter will be created.</param>
            
             <remarks>
               As an internal type, this class performs only basic sanity checks against its arguments.  It
               is assumed that callers are trusted and have performed deep validation.
            
               Any parameters passed are assumed to be owned by this instance and safe to mutate or dispose;
               creation of clones or otherwise protecting the parameters is assumed to be the purview of the
               caller.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpClient.GetPropertiesAsync(Azure.Messaging.EventHubs.EventHubsRetryPolicy,System.Threading.CancellationToken)">
             <summary>
               Retrieves information about an Event Hub, including the number of partitions present
               and their identifiers.
             </summary>
            
             <param name="retryPolicy">The retry policy to use as the basis for retrieving the information.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The set of information for the Event Hub that this client is associated with.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpClient.GetPartitionPropertiesAsync(System.String,Azure.Messaging.EventHubs.EventHubsRetryPolicy,System.Threading.CancellationToken)">
             <summary>
               Retrieves information about a specific partition for an Event Hub, including elements that describe the available
               events in the partition event stream.
             </summary>
            
             <param name="partitionId">The unique identifier of a partition associated with the Event Hub.</param>
             <param name="retryPolicy">The retry policy to use as the basis for retrieving the information.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The set of information for the requested partition under the Event Hub this client is associated with.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpClient.CreateProducer(System.String,Azure.Messaging.EventHubs.Core.TransportProducerFeatures,Azure.Messaging.EventHubs.Producer.PartitionPublishingOptions,Azure.Messaging.EventHubs.EventHubsRetryPolicy)">
             <summary>
               Creates a producer strongly aligned with the active protocol and transport,
               responsible for publishing <see cref="T:Azure.Messaging.EventHubs.EventData" /> to the Event Hub.
             </summary>
            
             <param name="partitionId">The identifier of the partition to which the transport producer should be bound; if <c>null</c>, the producer is unbound.</param>
             <param name="requestedFeatures">The flags specifying the set of special transport features that should be opted-into.</param>
             <param name="partitionOptions">The set of options, if any, that should be considered when initializing the producer.</param>
             <param name="retryPolicy">The policy which governs retry behavior and try timeouts.</param>
            
             <returns>A <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducer" /> configured in the requested manner.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpClient.CreateConsumer(System.String,System.String,Azure.Messaging.EventHubs.Consumer.EventPosition,Azure.Messaging.EventHubs.EventHubsRetryPolicy,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.UInt32},System.Nullable{System.Int64})">
             <summary>
               Creates a consumer strongly aligned with the active protocol and transport, responsible
               for reading <see cref="T:Azure.Messaging.EventHubs.EventData" /> from a specific Event Hub partition, in the context
               of a specific consumer group.
            
               A consumer may be exclusive, which asserts ownership over the partition for the consumer
               group to ensure that only one consumer from that group is reading the from the partition.
               These exclusive consumers are sometimes referred to as "Epoch Consumers."
            
               A consumer may also be non-exclusive, allowing multiple consumers from the same consumer
               group to be actively reading events from the partition.  These non-exclusive consumers are
               sometimes referred to as "Non-epoch Consumers."
            
               Designating a consumer as exclusive may be specified by setting the <paramref name="ownerLevel" />.
               When <c>null</c>, consumers are created as non-exclusive.
             </summary>
            
             <param name="consumerGroup">The name of the consumer group this consumer is associated with.  Events are read in the context of this group.</param>
             <param name="partitionId">The identifier of the Event Hub partition from which events will be received.</param>
             <param name="eventPosition">The position within the partition where the consumer should begin reading events.</param>
             <param name="retryPolicy">The policy which governs retry behavior and try timeouts.</param>
             <param name="trackLastEnqueuedEventProperties">Indicates whether information on the last enqueued event on the partition is sent as events are received.</param>
             <param name="ownerLevel">The relative priority to associate with the link; for a non-exclusive link, this value should be <c>null</c>.</param>
             <param name="prefetchCount">Controls the number of events received and queued locally without regard to whether an operation was requested.  If <c>null</c> a default will be used.</param>
             <param name="prefetchSizeInBytes">The cache size of the prefetch queue. When set, the link makes a best effort to ensure prefetched messages fit into the specified size.</param>
            
             <returns>A <see cref="T:Azure.Messaging.EventHubs.Core.TransportConsumer" /> configured in the requested manner.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpClient.CloseAsync(System.Threading.CancellationToken)">
             <summary>
               Closes the connection to the transport client instance.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope">
             <summary>
               Defines a context for AMQP operations which can be shared amongst the different
               client types within a given scope.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope.SessionTimeout">
             <summary>
               The recommended timeout to associate with an AMQP session.  It is recommended that this
               interval be used when creating or opening AMQP links and related constructs.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope.IsDisposed">
             <summary>
               Indicates whether this <see cref="T:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope" /> has been disposed.
             </summary>
            
             <value><c>true</c> if disposed; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope.#ctor(System.Uri,System.Uri,System.String,Azure.Messaging.EventHubs.Authorization.EventHubTokenCredential,Azure.Messaging.EventHubs.EventHubsTransportType,System.Net.IWebProxy,System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope" /> class.
             </summary>
            
             <param name="serviceEndpoint">The endpoint for the Event Hubs service to which the scope is associated.</param>
             <param name="connectionEndpoint">The endpoint to used establishing a connection to the Event Hubs service to which the scope is associated.</param>
             <param name="eventHubName"> The name of the Event Hub to which the scope is associated.</param>
             <param name="credential">The credential to use for authorization with the Event Hubs service.</param>
             <param name="transport">The transport to use for communication.</param>
             <param name="proxy">The proxy, if any, to use for communication.</param>
             <param name="identifier">The identifier to assign this scope; if not provided, one will be generated.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope.#ctor">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope" /> class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope.OpenManagementLinkAsync(System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
               Opens an AMQP link for use with management operations.
             </summary>
            
             <param name="timeout">The timeout to apply when creating the link.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A link for use with management operations.</returns>
            
             <remarks>
               The authorization for this link does not require periodic
               refreshing.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope.OpenConsumerLinkAsync(System.String,System.String,Azure.Messaging.EventHubs.Consumer.EventPosition,System.TimeSpan,System.UInt32,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Boolean,System.Threading.CancellationToken)">
             <summary>
               Opens an AMQP link for use with consumer operations.
             </summary>
            
             <param name="consumerGroup">The name of the consumer group in the context of which events should be received.</param>
             <param name="partitionId">The identifier of the Event Hub partition from which events should be received.</param>
             <param name="eventPosition">The position of the event in the partition where the link should be filtered to.</param>
             <param name="timeout">The timeout to apply when creating the link.</param>
             <param name="prefetchCount">Controls the number of events received and queued locally without regard to whether an operation was requested.</param>
             <param name="prefetchSizeInBytes">The cache size of the prefetch queue. When set, the link makes a best effort to ensure prefetched messages fit into the specified size.</param>
             <param name="ownerLevel">The relative priority to associate with the link; for a non-exclusive link, this value should be <c>null</c>.</param>
             <param name="trackLastEnqueuedEventProperties">Indicates whether information on the last enqueued event on the partition is sent as events are received.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A link for use with consumer operations.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope.OpenProducerLinkAsync(System.String,Azure.Messaging.EventHubs.Core.TransportProducerFeatures,Azure.Messaging.EventHubs.Producer.PartitionPublishingOptions,System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
               Opens an AMQP link for use with producer operations.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition to which the link should be bound; if unbound, <c>null</c>.</param>
             <param name="features">The set of features which are active for the producer requesting the link.</param>
             <param name="options">The set of options to consider when creating the link.</param>
             <param name="timeout">The timeout to apply when creating the link.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A link for use with producer operations.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope.Dispose">
             <summary>
               Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope" />,
               including ensuring that the client itself has been closed.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope.CreateAndOpenConnectionAsync(System.Version,System.Uri,System.Uri,Azure.Messaging.EventHubs.EventHubsTransportType,System.Net.IWebProxy,System.String,System.TimeSpan)">
             <summary>
               Creates an AMQP connection for a given scope.
             </summary>
            
             <param name="amqpVersion">The version of AMQP to use for the connection.</param>
             <param name="serviceEndpoint">The endpoint for the Event Hubs service to which the scope is associated.</param>
             <param name="connectionEndpoint">The endpoint to used establishing a connection to the Event Hubs service to which the scope is associated.</param>
             <param name="transportType">The type of transport to use for communication.</param>
             <param name="proxy">The proxy, if any, to use for communication.</param>
             <param name="scopeIdentifier">The unique identifier for the associated scope.</param>
             <param name="timeout">The timeout to consider when creating the connection.</param>
            
             <returns>An AMQP connection that may be used for communicating with the Event Hubs service.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope.CreateManagementLinkAsync(Microsoft.Azure.Amqp.AmqpConnection,System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
               Creates an AMQP link for use with management operations.
             </summary>
            
             <param name="connection">The active and opened AMQP connection to use for this link.</param>
             <param name="timeout">The timeout to apply when creating the link.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A link for use with management operations.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope.CreateReceivingLinkAsync(Microsoft.Azure.Amqp.AmqpConnection,System.Uri,Azure.Messaging.EventHubs.Consumer.EventPosition,System.TimeSpan,System.UInt32,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Boolean,System.Threading.CancellationToken)">
             <summary>
               Creates an AMQP link for use with receiving operations.
             </summary>
            
             <param name="connection">The active and opened AMQP connection to use for this link.</param>
             <param name="endpoint">The fully qualified endpoint to open the link for.</param>
             <param name="eventPosition">The position of the event in the partition where the link should be filtered to.</param>
             <param name="prefetchCount">Controls the number of events received and queued locally without regard to whether an operation was requested.</param>
             <param name="prefetchSizeInBytes">The cache size of the prefetch queue. When set, the link makes a best effort to ensure prefetched messages fit into the specified size.</param>
             <param name="ownerLevel">The relative priority to associate with the link; for a non-exclusive link, this value should be <c>null</c>.</param>
             <param name="trackLastEnqueuedEventProperties">Indicates whether information on the last enqueued event on the partition is sent as events are received.</param>
             <param name="timeout">The timeout to apply when creating the link.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A link for use for operations related to receiving events.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope.CreateSendingLinkAsync(Microsoft.Azure.Amqp.AmqpConnection,System.Uri,Azure.Messaging.EventHubs.Core.TransportProducerFeatures,Azure.Messaging.EventHubs.Producer.PartitionPublishingOptions,System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
               Creates an AMQP link for use with publishing operations.
             </summary>
            
             <param name="connection">The active and opened AMQP connection to use for this link.</param>
             <param name="endpoint">The fully qualified endpoint to open the link for.</param>
             <param name="features">The set of features which are active for the producer for which the link is being created.</param>
             <param name="options">The set of options to consider when creating the link.</param>
             <param name="timeout">The timeout to apply when creating the link.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A link for use for operations related to receiving events.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope.BeginTrackingLinkAsActive(Microsoft.Azure.Amqp.AmqpObject,System.Threading.Timer)">
             <summary>
               Performs the actions needed to configure and begin tracking the specified AMQP
               link as an active link bound to this scope.
             </summary>
            
             <param name="link">The link to begin tracking.</param>
             <param name="authorizationRefreshTimer">The timer used to manage refreshing authorization, if the link requires it.</param>
            
             <remarks>
               This method does operate on the specified <paramref name="link" /> in order to configure it
               for active tracking; no assumptions are made about the open/connected state of the link nor are
               its communication properties modified.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope.CloseConnection(Microsoft.Azure.Amqp.AmqpConnection)">
             <summary>
               Performs the tasks needed to close a connection.
             </summary>
            
             <param name="connection">The connection to close.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope.CalculateLinkAuthorizationRefreshInterval(System.DateTime,System.Nullable{System.DateTime})">
             <summary>
               Calculates the interval after which authorization for an AMQP link should be
               refreshed.
             </summary>
            
             <param name="expirationTimeUtc">The date/time, in UTC, that the current authorization is expected to expire.</param>
             <param name="currentTimeUtc">The current date/time, in UTC.  If not specified, the system time will be used.</param>
            
             <returns>The interval after which authorization should be refreshed.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope.CreateAuthorizationRefreshHandler(Microsoft.Azure.Amqp.AmqpConnection,Microsoft.Azure.Amqp.AmqpObject,Azure.Messaging.EventHubs.Amqp.CbsTokenProvider,System.Uri,System.String,System.String,System.String[],System.TimeSpan,System.Func{System.Threading.Timer})">
             <summary>
               Creates the timer event handler to support refreshing AMQP link authorization
               on a recurring basis.
             </summary>
            
             <param name="connection">The AMQP connection to which the link being refreshed is bound to.</param>
             <param name="amqpLink">The AMQO link to refresh authorization for.</param>
             <param name="tokenProvider">The <see cref="T:Azure.Messaging.EventHubs.Amqp.CbsTokenProvider" /> to use for obtaining access tokens.</param>
             <param name="endpoint">The Event Hubs service endpoint that the AMQP link is communicating with.</param>
             <param name="audience">The audience associated with the authorization.  This is likely the <paramref name="endpoint" /> absolute URI.</param>
             <param name="resource">The resource associated with the authorization.  This is likely the <paramref name="endpoint" /> absolute URI.</param>
             <param name="requiredClaims">The set of claims required to support the operations of the AMQP link.</param>
             <param name="refreshTimeout">The timeout to apply when requesting authorization refresh.</param>
             <param name="refreshTimerFactory">A function to allow retrieving the <see cref="T:System.Threading.Timer" /> associated with the link authorization.</param>
            
             <returns>A <see cref="T:System.Threading.TimerCallback" /> delegate to perform the refresh when a timer is due.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope.OpenAmqpObjectAsync(Microsoft.Azure.Amqp.AmqpObject,System.TimeSpan)">
             <summary>
               Performs the actions needed to open an AMQP object, such
               as a session or link for use.
             </summary>
            
             <param name="target">The target AMQP object to open.</param>
             <param name="timeout">The timeout to apply when opening the link.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope.RequestAuthorizationUsingCbsAsync(Microsoft.Azure.Amqp.AmqpConnection,Azure.Messaging.EventHubs.Amqp.CbsTokenProvider,System.Uri,System.String,System.String,System.String[],System.TimeSpan)">
             <summary>
               Requests authorization for a connection or link using a connection via the CBS mechanism.
             </summary>
            
             <param name="connection">The AMQP connection for which the authorization is associated.</param>
             <param name="tokenProvider">The <see cref="T:Azure.Messaging.EventHubs.Amqp.CbsTokenProvider" /> to use for obtaining access tokens.</param>
             <param name="endpoint">The Event Hubs service endpoint that the authorization is requested for.</param>
             <param name="audience">The audience associated with the authorization.  This is likely the <paramref name="endpoint" /> absolute URI.</param>
             <param name="resource">The resource associated with the authorization.  This is likely the <paramref name="endpoint" /> absolute URI.</param>
             <param name="requiredClaims">The set of claims required to support the operations of the AMQP link.</param>
             <param name="timeout">The timeout to apply when requesting authorization.</param>
            
             <returns>The date/time, in UTC, when the authorization expires.</returns>
            
             <remarks>
               It is assumed that there is a valid <see cref="T:Microsoft.Azure.Amqp.AmqpCbsLink" /> already associated
               with the connection; this will be used as the transport for the authorization
               credentials.
             </remarks>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Amqp.AmqpConsumer">
             <summary>
               A transport client abstraction responsible for brokering operations for AMQP-based connections.
               It is intended that the public <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" /> make use of an instance
               via containment and delegate operations to it.
             </summary>
            
             <seealso cref="T:Azure.Messaging.EventHubs.Core.TransportConsumer" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Amqp.AmqpConsumer.IsClosed">
             <summary>
               Indicates whether or not this consumer has been closed.
             </summary>
            
             <value>
               <c>true</c> if the consumer is closed; otherwise, <c>false</c>.
             </value>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpConsumer.#ctor(System.String,System.String,System.String,Azure.Messaging.EventHubs.Consumer.EventPosition,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.UInt32},System.Nullable{System.Int64},Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope,Azure.Messaging.EventHubs.Amqp.AmqpMessageConverter,Azure.Messaging.EventHubs.EventHubsRetryPolicy)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Amqp.AmqpConsumer" /> class.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub from which events will be consumed.</param>
             <param name="consumerGroup">The name of the consumer group this consumer is associated with.  Events are read in the context of this group.</param>
             <param name="partitionId">The identifier of the Event Hub partition from which events will be received.</param>
             <param name="eventPosition">The position of the event in the partition where the consumer should begin reading.</param>
             <param name="prefetchCount">Controls the number of events received and queued locally without regard to whether an operation was requested.  If <c>null</c> a default will be used.</param>
             <param name="prefetchSizeInBytes">The cache size of the prefetch queue. When set, the link makes a best effort to ensure prefetched messages fit into the specified size.</param>
             <param name="ownerLevel">The relative priority to associate with the link; for a non-exclusive link, this value should be <c>null</c>.</param>
             <param name="trackLastEnqueuedEventProperties">Indicates whether information on the last enqueued event on the partition is sent as events are received.</param>
             <param name="connectionScope">The AMQP connection context for operations .</param>
             <param name="messageConverter">The converter to use for translating between AMQP messages and client types.</param>
             <param name="retryPolicy">The retry policy to consider when an operation fails.</param>
            
             <remarks>
               As an internal type, this class performs only basic sanity checks against its arguments.  It
               is assumed that callers are trusted and have performed deep validation.
            
               Any parameters passed are assumed to be owned by this instance and safe to mutate or dispose;
               creation of clones or otherwise protecting the parameters is assumed to be the purview of the
               caller.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpConsumer.ReceiveAsync(System.Int32,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
             <summary>
               Receives a batch of <see cref="T:Azure.Messaging.EventHubs.EventData" /> from the Event Hub partition.
             </summary>
            
             <param name="maximumEventCount">The maximum number of messages to receive in this batch.</param>
             <param name="maximumWaitTime">The maximum amount of time to wait for events to become available, if no events can be read from the prefetch queue.  If not specified, the per-try timeout specified by the retry policy will be used.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The batch of <see cref="T:Azure.Messaging.EventHubs.EventData" /> from the Event Hub partition this consumer is associated with.  If no events are present, an empty set is returned.</returns>
            
             <remarks>
               When events are available in the prefetch queue, they will be used to form the batch as quickly as possible without waiting for additional events from the
               Event Hubs service to try and meet the requested <paramref name="maximumEventCount" />.  When no events are available in prefetch, the receiver will wait up
               to the <paramref name="maximumWaitTime" /> for events to be read from the service.  Once any events are available, they will be used to form the batch immediately.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpConsumer.CloseAsync(System.Threading.CancellationToken)">
             <summary>
               Closes the connection to the transport consumer instance.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Amqp.AmqpEventBatch">
             <summary>
               A set of events with known size constraints, based on messages to be sent
               using an AMQP-based transport.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Amqp.AmqpEventBatch.MaximumSizeInBytes">
             <summary>
               The maximum size allowed for the batch, in bytes.  This includes the events in the batch as
               well as any overhead for the batch itself when sent to the Event Hubs service.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Amqp.AmqpEventBatch.SizeInBytes">
             <summary>
               The size of the batch, in bytes, as it will be sent to the Event Hubs
               service.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Amqp.AmqpEventBatch.ActiveFeatures">
             <summary>
               The flags specifying the set of special transport features that have been opted-into.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Amqp.AmqpEventBatch.Count">
             <summary>
               The count of events contained in the batch.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpEventBatch.#ctor(Azure.Messaging.EventHubs.Amqp.AmqpMessageConverter,Azure.Messaging.EventHubs.Producer.CreateBatchOptions,Azure.Messaging.EventHubs.Core.TransportProducerFeatures)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Amqp.AmqpEventBatch" /> class.
             </summary>
            
             <param name="messageConverter">The converter to use for translating <see cref="T:Azure.Messaging.EventHubs.EventData" /> into the corresponding AMQP message.</param>
             <param name="options">The set of options to apply to the batch.</param>
             <param name="activeFeatures">The flags specifying the set of special transport features have been opted-into.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpEventBatch.TryAdd(Azure.Messaging.EventHubs.EventData)">
             <summary>
               Attempts to add an event to the batch, ensuring that the size
               of the batch does not exceed its maximum.
             </summary>
            
             <param name="eventData">The event to attempt to add to the batch.</param>
            
             <returns><c>true</c> if the event was added; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpEventBatch.Clear">
             <summary>
               Clears the batch, removing all events and resetting the
               available size.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpEventBatch.AsEnumerable``1">
             <summary>
               Represents the batch as an enumerable set of transport-specific
               representations of an event.
             </summary>
            
             <typeparam name="T">The transport-specific event representation being requested.</typeparam>
            
             <returns>The set of events as an enumerable of the requested type.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpEventBatch.Dispose">
             <summary>
               Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.EventHubs.Amqp.AmqpEventBatch" />.
             </summary>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Amqp.AmqpMessageConverter">
             <summary>
               Serves as a translator between client types and AMQP messages for
               communication with the Event Hubs service.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpMessageConverter.CreateMessageFromEvent(Azure.Messaging.EventHubs.EventData,System.String)">
             <summary>
               Converts a given <see cref="T:Azure.Messaging.EventHubs.EventData" /> source into its corresponding
               AMQP representation.
             </summary>
            
             <param name="source">The source event to convert.</param>
             <param name="partitionKey">The partition key to associate with the batch, if any.</param>
            
             <returns>The AMQP message that represents the converted event data.</returns>
            
             <remarks>
               The caller is assumed to hold ownership over the message once it has been created, including
               ensuring proper disposal.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpMessageConverter.CreateBatchFromEvents(System.Collections.Generic.IEnumerable{Azure.Messaging.EventHubs.EventData},System.String)">
             <summary>
               Converts a given set of <see cref="T:Azure.Messaging.EventHubs.EventData" /> instances into a batch AMQP representation.
             </summary>
            
             <param name="source">The set of source events to convert.</param>
             <param name="partitionKey">The partition key to associate with the batch, if any.</param>
            
             <returns>The AMQP message that represents a batch containing the converted set of event data.</returns>
            
             <remarks>
               The caller is assumed to hold ownership over the message once it has been created, including
               ensuring proper disposal.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpMessageConverter.CreateBatchFromMessages(System.Collections.Generic.IEnumerable{Microsoft.Azure.Amqp.AmqpMessage},System.String)">
             <summary>
               Converts a given set of <see cref="T:Microsoft.Azure.Amqp.AmqpMessage" /> instances into a batch AMQP representation.
             </summary>
            
             <param name="source">The set of source messages to convert.</param>
             <param name="partitionKey">The partition key to annotate the AMQP message with; if no partition key is specified, the annotation will not be made.</param>
            
             <returns>The AMQP message that represents a batch containing the converted set of event data.</returns>
            
             <remarks>
               The caller is assumed to hold ownership over the message once it has been created, including
               ensuring proper disposal.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpMessageConverter.CreateEventFromMessage(Microsoft.Azure.Amqp.AmqpMessage)">
             <summary>
               Converts a given <see cref="T:Microsoft.Azure.Amqp.AmqpMessage" /> source into its corresponding
               <see cref="T:Azure.Messaging.EventHubs.EventData" /> representation.
             </summary>
            
             <param name="source">The source message to convert.</param>
            
             <returns>The event that represents the converted AMQP message.</returns>
            
             <remarks>
               The caller is assumed to hold ownership over the specified message, including
               ensuring proper disposal.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpMessageConverter.CreateEventHubPropertiesRequest(System.String,System.String)">
             <summary>
               Creates an <see cref="T:Microsoft.Azure.Amqp.AmqpMessage" /> for use in requesting the properties of an Event Hub.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub to query the properties of.</param>
             <param name="managementAuthorizationToken">The bearer token to use for authorization of management operations.</param>
            
             <returns>The AMQP message for issuing the request.</returns>
            
             <remarks>
               The caller is assumed to hold ownership over the message once it has been created, including
               ensuring proper disposal.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpMessageConverter.CreateEventHubPropertiesFromResponse(Microsoft.Azure.Amqp.AmqpMessage)">
             <summary>
               Converts a given <see cref="T:Microsoft.Azure.Amqp.AmqpMessage" /> response to a query for Event Hub properties into the
               corresponding <see cref="T:Azure.Messaging.EventHubs.EventHubProperties" /> representation.
             </summary>
            
             <param name="response">The response message to convert.</param>
            
             <returns>The set of properties represented by the response.</returns>
            
             <remarks>
               The caller is assumed to hold ownership over the specified message, including
               ensuring proper disposal.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpMessageConverter.CreatePartitionPropertiesRequest(System.String,System.String,System.String)">
             <summary>
               Creates an <see cref="T:Microsoft.Azure.Amqp.AmqpMessage" /> for use in requesting the properties of an Event Hub partition.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub to query the properties of.</param>
             <param name="partitionIdentifier">The identifier of the partition to query the properties of.</param>
             <param name="managementAuthorizationToken">The bearer token to use for authorization of management operations.</param>
            
             <returns>The AMQP message for issuing the request.</returns>
            
             <remarks>
               The caller is assumed to hold ownership over the message once it has been created, including
               ensuring proper disposal.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpMessageConverter.CreatePartitionPropertiesFromResponse(Microsoft.Azure.Amqp.AmqpMessage)">
             <summary>
               Converts a given <see cref="T:Microsoft.Azure.Amqp.AmqpMessage" /> response to a query for Event Hub partition properties into
               the corresponding <see cref="T:Azure.Messaging.EventHubs.PartitionProperties" /> representation.
             </summary>
            
             <param name="response">The response message to convert.</param>
            
             <returns>The set of properties represented by the response.</returns>
            
             <remarks>
               The caller is assumed to hold ownership over the specified message, including
               ensuring proper disposal.
             </remarks>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Amqp.AmqpProducer">
             <summary>
               A transport producer abstraction responsible for brokering operations for AMQP-based connections.
               It is intended that the public <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> make use of an instance
               via containment and delegate operations to it.
             </summary>
            
             <seealso cref="T:Azure.Messaging.EventHubs.Core.TransportProducer" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Amqp.AmqpProducer.IsClosed">
             <summary>
               Indicates whether or not this producer has been closed.
             </summary>
            
             <value>
               <c>true</c> if the producer is closed; otherwise, <c>false</c>.
             </value>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpProducer.#ctor(System.String,System.String,Azure.Messaging.EventHubs.Amqp.AmqpConnectionScope,Azure.Messaging.EventHubs.Amqp.AmqpMessageConverter,Azure.Messaging.EventHubs.EventHubsRetryPolicy,Azure.Messaging.EventHubs.Core.TransportProducerFeatures,Azure.Messaging.EventHubs.Producer.PartitionPublishingOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Amqp.AmqpProducer" /> class.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub to which events will be published.</param>
             <param name="partitionId">The identifier of the Event Hub partition to which it is bound; if unbound, <c>null</c>.</param>
             <param name="connectionScope">The AMQP connection context for operations.</param>
             <param name="messageConverter">The converter to use for translating between AMQP messages and client types.</param>
             <param name="retryPolicy">The retry policy to consider when an operation fails.</param>
             <param name="requestedFeatures">The flags specifying the set of special transport features that should be opted-into.</param>
             <param name="partitionOptions">The set of options, if any, that should be considered when initializing the producer.</param>
            
             <remarks>
               As an internal type, this class performs only basic sanity checks against its arguments.  It
               is assumed that callers are trusted and have performed deep validation.
            
               Any parameters passed are assumed to be owned by this instance and safe to mutate or dispose;
               creation of clones or otherwise protecting the parameters is assumed to be the purview of the
               caller.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpProducer.SendAsync(System.Collections.Generic.IEnumerable{Azure.Messaging.EventHubs.EventData},Azure.Messaging.EventHubs.Producer.SendEventOptions,System.Threading.CancellationToken)">
             <summary>
               Sends a set of events to the associated Event Hub using a batched approach.  If the size of events exceed the
               maximum size of a single batch, an exception will be triggered and the send will fail.
             </summary>
            
             <param name="events">The set of event data to send.</param>
             <param name="sendOptions">The set of options to consider when sending this batch.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpProducer.SendAsync(Azure.Messaging.EventHubs.Producer.EventDataBatch,System.Threading.CancellationToken)">
             <summary>
               Sends a set of events to the associated Event Hub using a batched approach.
             </summary>
            
             <param name="eventBatch">The event batch to send.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
            
             <remarks>
               The caller is assumed to retain ownership of the <paramref name="eventBatch" /> and
               is responsible for managing its lifespan, including disposal.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpProducer.CreateBatchAsync(Azure.Messaging.EventHubs.Producer.CreateBatchOptions,System.Threading.CancellationToken)">
             <summary>
               Creates a size-constraint batch to which <see cref="T:Azure.Messaging.EventHubs.EventData" /> may be added using a try-based pattern.  If an event would
               exceed the maximum allowable size of the batch, the batch will not allow adding the event and signal that scenario using its
               return value.
            
               Because events that would violate the size constraint cannot be added, publishing a batch will not trigger an exception when
               attempting to send the events to the Event Hubs service.
             </summary>
            
             <param name="options">The set of options to consider when creating this batch.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An <see cref="T:Azure.Messaging.EventHubs.Producer.EventDataBatch" /> with the requested <paramref name="options" />.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpProducer.ReadInitializationPublishingPropertiesAsync(System.Threading.CancellationToken)">
             <summary>
               Reads the set of partition publishing properties active for this producer at the time it was initialized.
             </summary>
            
             <param name="cancellationToken">The cancellation token to consider when creating the link.</param>
            
             <returns>The set of <see cref="T:Azure.Messaging.EventHubs.Producer.PartitionPublishingProperties" /> observed when the producer was initialized.</returns>
            
             <remarks>
               It is important to note that these properties are a snapshot of the service state at the time when the
               producer was initialized; they do not necessarily represent the current state of the service.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpProducer.CloseAsync(System.Threading.CancellationToken)">
             <summary>
               Closes the connection to the transport producer instance.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpProducer.SendAsync(System.Func{Microsoft.Azure.Amqp.AmqpMessage},System.String,System.Threading.CancellationToken)">
             <summary>
               Sends an AMQP message that contains a batch of events to the associated Event Hub. If the size of events exceed the
               maximum size of a single batch, an exception will be triggered and the send will fail.
             </summary>
            
             <param name="messageFactory">A factory which can be used to produce an AMQP message containing the batch of events to be sent.</param>
             <param name="partitionKey">The hashing key to use for influencing the partition to which events should be routed.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.AmqpProducer.CreateLinkAndEnsureProducerStateAsync(System.String,Azure.Messaging.EventHubs.Producer.PartitionPublishingOptions,System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
               Creates the AMQP link to be used for producer-related operations and ensures
               that the corresponding state for the producer has been updated based on the link
               configuration.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition to which it is bound; if unbound, <c>null</c>.</param>
             <param name="partitionOptions">The set of options, if any, that should be considered when initializing the producer.</param>
             <param name="timeout">The timeout to apply when creating the link.</param>
             <param name="cancellationToken">The cancellation token to consider when creating the link.</param>
            
             <returns>The AMQP link to use for producer-related operations.</returns>
            
             <remarks>
               This method will modify class-level state, setting those attributes that depend on the AMQP
               link configuration.  There exists a benign race condition in doing so, as there may be multiple
               concurrent callers.  In this case, the attributes may be set multiple times but the resulting
               value will be the same.
             </remarks>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Amqp.CbsTokenProvider">
             <summary>
               Performs the actions needed to generate <see cref="T:Microsoft.Azure.Amqp.CbsToken" /> instances for
               authorization within an AMQP scope.
             </summary>
            
             <seealso cref="T:Microsoft.Azure.Amqp.ICbsTokenProvider" />
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.CbsTokenProvider.#ctor(Azure.Messaging.EventHubs.Authorization.EventHubTokenCredential,System.Threading.CancellationToken)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Amqp.CbsTokenProvider" /> class.
             </summary>
            
             <param name="credential">The credential to use for access token generation.</param>
             <param name="cancellationToken">The cancellation token to consider when making requests.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.CbsTokenProvider.GetTokenAsync(System.Uri,System.String,System.String[])">
             <summary>
               Asynchronously requests a CBS token to be used for authorization within an AMQP
               scope.
             </summary>
            
             <param name="namespaceAddress">The address of the namespace to be authorized.</param>
             <param name="appliesTo">The resource to which the token should apply.</param>
             <param name="requiredClaims">The set of claims that are required for authorization.</param>
             <returns>The token to use for authorization.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Amqp.ExceptionExtensions">
             <summary>
               The set of extension methods for the <see cref="T:System.Exception" /> class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.ExceptionExtensions.TranslateServiceException(System.Exception,System.String)">
             <summary>
               Considers an exception surfaced during an AMQP-based service operation, unwrapping
               and translating it into the form that should be considered for error handling
               decisions.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
             <param name="eventHubName">The name of the Event Hub that the service operation was targeting.</param>
            
             <returns>The <see cref="T:System.Exception" /> that corresponds to the <paramref name="instance" /> and which represents the service error.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.ExceptionExtensions.TranslateConnectionCloseDuringLinkCreationException(System.Exception,System.String)">
             <summary>
               Considers an exception surfaced during the creation of an AMQP link, determining if the cause was a race condition
               with the connection closing and translating it into the form that should be considered for error handling decisions.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
             <param name="eventHubName">The name of the Event Hub that the service operation was targeting.</param>
            
             <returns>The <see cref="T:System.Exception" /> that corresponds to the <paramref name="instance" /> and which represents the service error.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Amqp.TypeExtensions">
             <summary>
               The set of extension methods for the <see cref="T:System.Type" /> class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Amqp.TypeExtensions.ToAmqpPropertyType(System.Type)">
             <summary>
               Translates the given <see cref="T:System.Type" /> to the corresponding
               <see cref="T:Azure.Messaging.EventHubs.AmqpProperty.Type" />.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
            
             <returns>The AMQP property type that best matches the specified <paramref name="instance" />.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.AmqpError">
             <summary>
               The set of well-known error codes associated with an AMQP messages and
               entities.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpError.TimeoutError">
             <summary>
               Indicates that a timeout occurred on the link.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpError.ServerBusyError">
             <summary>
               Indicates that the server was busy and could not allow the requested operation.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpError.ArgumentError">
             <summary>
               Indicates that an argument provided to the Event Hubs service was incorrect.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpError.ArgumentOutOfRangeError">
             <summary>
               Indicates that an argument provided to the Event Hubs service was incorrect.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpError.SequenceOutOfOrderError">
             <summary>
               Indicates that a sequence number was out of order.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpError.ProducerStolenError">
             <summary>
               Indicates that a partition was stolen by another producer with exclusive access.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.AmqpError.CreateExceptionForResponse(Microsoft.Azure.Amqp.AmqpMessage,System.String,System.Exception)">
             <summary>
               Creates the exception that corresponds to a given AMQP response message.
             </summary>
            
             <param name="response">The response to consider.</param>
             <param name="eventHubsResource">The Event Hubs resource associated with the request.</param>
             <param name="innerException">The exception to embed in the newly created exception.</param>
            
             <returns>The exception that most accurately represents the response failure.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.AmqpError.CreateExceptionForError(Microsoft.Azure.Amqp.Framing.Error,System.String,System.Exception)">
             <summary>
               Creates the exception that corresponds to a given AMQP error.
             </summary>
            
             <param name="error">The AMQP error to consider.</param>
             <param name="eventHubsResource">The Event Hubs resource associated with the operation.</param>
             <param name="innerException">The exception to embed in the newly created exception.</param>
            
             <returns>The exception that most accurately represents the error that was encountered.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.AmqpError.ThrowIfErrorResponse(Microsoft.Azure.Amqp.AmqpMessage,System.String)">
             <summary>
               Determines if a given AMQP message response is an error and, if so, throws the
               appropriate corresponding exception type.
             </summary>
            
             <param name="response">The AMQP response message to consider.</param>
             <param name="eventHubName">The name of the Event Hub associated with the request.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.AmqpFilter">
             <summary>
               The set of filters associated with an AMQP messages and
               entities.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.AmqpFilter.SequenceNumberName">
            <summary>Indicates filtering based on the sequence number of a message.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.AmqpFilter.OffsetName">
            <summary>Indicates filtering based on the offset of a message.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.AmqpFilter.EnqueuedTimeName">
            <summary>Indicates filtering based on time that a message was enqueued.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.AmqpFilter.ConsumerFilterName">
            <summary>Identifies the filter type name.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.AmqpFilter.ConsumerFilterCode">
            <summary>Identifies the filter type code.</summary>
        </member>
        <member name="M:Azure.Messaging.EventHubs.AmqpFilter.CreateConsumerFilter(System.String)">
             <summary>
               Creates an event consumer filter based on the specified expression.
             </summary>
            
             <param name="filterExpression">The SQL-like expression to use for filtering events in the partition.</param>
            
             <returns>An <see cref="T:Microsoft.Azure.Amqp.Framing.AmqpDescribed" /> type to use in the filter map for a consumer AMQP link.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.AmqpFilter.BuildFilterExpression(Azure.Messaging.EventHubs.Consumer.EventPosition)">
             <summary>
               Builds an AMQP filter expression for the specified event position.
             </summary>
            
             <param name="eventPosition">The event position to use as the source for filtering.</param>
            
             <returns>The AMQP filter expression that corresponds to the <paramref name="eventPosition" />.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.AmqpManagement">
             <summary>
               The set of annotations for management-related operations associated with an AMQP messages and
               entities.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.AmqpManagement.Address">
            <summary>The location to specify for management operations.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.AmqpManagement.LinkType">
            <summary>The type to specify for an AMQP link used for management operations.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.AmqpManagement.ResourceNameKey">
            <summary>The key to use for specifying an Event Hubs resource name.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.AmqpManagement.PartitionNameKey">
            <summary>The key to use for specifying a partition. </summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.AmqpManagement.OperationKey">
            <summary>The key to use for specifying an operation.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.AmqpManagement.ResourceTypeKey">
            <summary>The key to use for specifying the type of Event Hubs resource.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.AmqpManagement.SecurityTokenKey">
            <summary>The key to use for specifying a security token.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.AmqpManagement.ReadOperationValue">
            <summary>The value to specify when requesting a read-based operation.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.AmqpManagement.EventHubResourceTypeValue">
            <summary>The value to specify when identifying an Event Hub resource.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.AmqpManagement.PartitionResourceTypeValue">
            <summary>The value to specify when identifying a partition resource.</summary>
        </member>
        <member name="T:Azure.Messaging.EventHubs.AmqpManagement.ResponseMap">
             <summary>
               The set of property mappings to use for reading management-related
               responses from the Event Hubs service.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpManagement.ResponseMap.Name">
             <summary>
               The message property that identifies the name of a resource.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpManagement.ResponseMap.CreatedAt">
             <summary>
               The message property that identifies the date/time that a resource was created.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpManagement.ResponseMap.PartitionIdentifier">
             <summary>
               The message property that identifies the unique identifier associated with a partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpManagement.ResponseMap.PartitionIdentifiers">
             <summary>
               The message property that identifies the set of unique identifiers for each partition of an Event Hub.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpManagement.ResponseMap.PartitionBeginSequenceNumber">
             <summary>
               The message property that identifies the beginning sequence number in a partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpManagement.ResponseMap.PartitionLastEnqueuedSequenceNumber">
             <summary>
               The message property that identifies the last sequence number enqueued for a partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpManagement.ResponseMap.PartitionLastEnqueuedOffset">
             <summary>
               The message property that identifies the last offset enqueued for a partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpManagement.ResponseMap.PartitionLastEnqueuedTimeUtc">
             <summary>
               The message property that identifies the last time enqueued for a partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpManagement.ResponseMap.PartitionRuntimeInfoRetrievalTimeUtc">
             <summary>
               The message property that identifies the date and time, in UTC, that partition information was sent from the Event Hubs service.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpManagement.ResponseMap.PartitionRuntimeInfoPartitionIsEmpty">
             <summary>
               The message property that identifies whether or not a partition is considered empty.
             </summary>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.AmqpProperty">
             <summary>
               The set of well-known properties associated with an AMQP messages and
               entities.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpProperty.ConsumerOwnerLevel">
             <summary>
               The owner level (a.k.a. epoch) to associate with a receiver link.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpProperty.ProducerOwnerLevel">
             <summary>
               The owner level (a.k.a. epoch) to associate with a sending link.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpProperty.EntityType">
             <summary>
               The type of Event Hubs entity to associate with a link.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpProperty.TrackLastEnqueuedEventProperties">
             <summary>
               The capability for tracking the last event enqueued in a partition, to associate with a link.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpProperty.EnableIdempotentPublishing">
             <summary>
               The capability for opting-into idempotent publishing.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpProperty.ProducerGroupId">
             <summary>
               The identifier of the producer group to associate with a producer.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpProperty.ProducerSequenceNumber">
             <summary>
               The sequence number assigned by a producer to an event when it was published.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpProperty.Timeout">
             <summary>
               The timeout to associate with a link.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpProperty.EnqueuedTime">
             <summary>
               The date and time, in UTC, that a message was enqueued.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpProperty.SequenceNumber">
             <summary>
               The sequence number assigned to a message.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpProperty.Offset">
             <summary>
               The offset of a message within a given partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpProperty.PartitionKey">
             <summary>
               The partition hashing key used for grouping a batch of events together with the intent of routing to a single partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpProperty.PartitionLastEnqueuedSequenceNumber">
             <summary>
               The message property that identifies the last sequence number enqueued for a partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpProperty.PartitionLastEnqueuedOffset">
             <summary>
               The message property that identifies the last offset enqueued for a partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpProperty.PartitionLastEnqueuedTimeUtc">
             <summary>
               The message property that identifies the last time enqueued for a partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpProperty.LastPartitionPropertiesRetrievalTimeUtc">
             <summary>
               The message property that identifies the time that the last enqueued event information was
               received from the service.
             </summary>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.AmqpProperty.Descriptor">
             <summary>
               The set of descriptors for well-known <see cref="T:Microsoft.Azure.Amqp.Encoding.DescribedType" />
               property types.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpProperty.Descriptor.TimeSpan">
             <summary>
               A type annotation for representing a <see cref="T:System.TimeSpan" /> in a message.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpProperty.Descriptor.Uri">
             <summary>
               A type annotation for representing a <see cref="T:System.Uri" /> in a message.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.AmqpProperty.Descriptor.DateTimeOffset">
             <summary>
               A type annotation for representing a <see cref="T:System.DateTimeOffset" /> in a message.
             </summary>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.AmqpProperty.Entity">
             <summary>
               Represents the entity mapping for AMQP properties between the client library and
               the Event Hubs service.
             </summary>
            
             <remarks>
               WARNING:
                 These values are synchronized between the Event Hubs service and the client
                 library.  You must consult with the Event Hubs service team before making
                 changes, including adding a new member.
            
                 When adding a new member, remember to always do so before the Unknown
                 member.
             </remarks>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.AmqpProperty.Type">
             <summary>
               Represents the type mapping for AMQP properties between the client library and
               the Event Hubs service.
             </summary>
            
             <remarks>
               WARNING:
                 These values are synchronized between the Event Hubs service and the client
                 library.  You must consult with the Event Hubs service team before making
                 changes, including adding a new member.
            
                 When adding a new member, remember to always do so before the Unknown
                 member.
             </remarks>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.AmqpResponse">
             <summary>
               The set of annotations for service responses associated with an AMQP messages and
               entities.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.AmqpResponse.StatusCode">
            <summary>The annotation that identifies the code of a response status.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.AmqpResponse.StatusDescription">
            <summary>The annotation that identifies the description of a response status.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.AmqpResponse.ErrorCondition">
            <summary>The annotation that identifies an error response.</summary>
        </member>
        <member name="M:Azure.Messaging.EventHubs.AmqpResponse.IsSuccessStatus(Microsoft.Azure.Amqp.AmqpResponseStatusCode)">
             <summary>
               Determines whether the given AMQP status code value should be considered a successful
               request.
             </summary>
            
             <param name="statusCode">The status code value to consider.</param>
            
             <returns><c>true</c> if the request should be considered successful; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Authorization.EventHubsClaim">
             <summary>
               The set of claims for operations associated with the Event Hubs service.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.Authorization.EventHubsClaim.Manage">
            <summary>Needed for management operations, such as querying metadata, against the service.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Authorization.EventHubsClaim.Send">
            <summary>Needed for sending data, such as publishing events, to the service.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Authorization.EventHubsClaim.Listen">
            <summary>Needed for receiving data, such as events, from the service. </summary>
        </member>
        <member name="T:Azure.Messaging.EventHubs.Authorization.EventHubTokenCredential">
             <summary>
               Provides a generic token-based credential for a given Event Hub instance.
             </summary>
            
             <seealso cref="T:Azure.Core.TokenCredential" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Authorization.EventHubTokenCredential.IsSharedAccessCredential">
             <summary>
               Indicates whether the credential is based on an Event Hubs
               shared access policy.
             </summary>
            
             <value><c>true</c> if the credential should be considered a shared access credential; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.EventHubTokenCredential.#ctor(Azure.Core.TokenCredential)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Authorization.EventHubTokenCredential" /> class.
             </summary>
            
             <param name="tokenCredential">The <see cref="T:Azure.Core.TokenCredential" /> on which to base the token.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.EventHubTokenCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
             <summary>
               Retrieves the token that represents the shared access signature credential, for
               use in authorization against an Event Hub.
             </summary>
            
             <param name="requestContext">The details of the authentication request.</param>
             <param name="cancellationToken">The token used to request cancellation of the operation.</param>
            
             <returns>The token representing the shared access signature for this credential.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.EventHubTokenCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
             <summary>
               Retrieves the token that represents the shared access signature credential, for
               use in authorization against an Event Hub.
             </summary>
            
             <param name="requestContext">The details of the authentication request.</param>
             <param name="cancellationToken">The token used to request cancellation of the operation.</param>
            
             <returns>The token representing the shared access signature for this credential.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.EventHubTokenCredential.GetTokenUsingDefaultScopeAsync(System.Threading.CancellationToken)">
             <summary>
               Retrieves the token that represents the shared access signature credential, for
               use in authorization against an Event Hub. It provides a default value for the Token Request Context.
             </summary>
            
             <param name="cancellationToken">The token used to request cancellation of the operation.</param>
            
             <returns>The token representing the shared access signature for this credential.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Authorization.SharedAccessCredential">
             <summary>
               Provides a credential based on a shared access signature for a given
               Event Hub instance.
             </summary>
            
             <seealso cref="T:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature" />
             <seealso cref="T:Azure.Core.TokenCredential" />
             <seealso cref="T:Azure.AzureNamedKeyCredential" />
             <seealso cref="T:Azure.AzureSasCredential" />
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessCredential.#ctor(Azure.Messaging.EventHubs.Authorization.SharedAccessSignature)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Authorization.SharedAccessCredential" /> class.
             </summary>
            
             <param name="signature">The shared access signature on which to base the token.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessCredential.#ctor(Azure.AzureSasCredential)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Authorization.SharedAccessCredential" /> class.
             </summary>
            
             <param name="sourceCredential">The <see cref="T:Azure.AzureSasCredential" /> to base signatures on.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessCredential.#ctor(Azure.AzureNamedKeyCredential,System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Authorization.SharedAccessCredential" /> class.
             </summary>
            
             <param name="sourceCredential">The <see cref="T:Azure.AzureNamedKeyCredential" /> to base signatures on.</param>
             <param name="signatureResource">The fully-qualified identifier for the resource to which this credential is intended to serve as authorization for.  This is also known as the "token audience" in some contexts.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
             <summary>
               Retrieves the token that represents the shared access signature credential, for
               use in authorization against an Event Hub.
             </summary>
            
             <param name="requestContext">The details of the authentication request.</param>
             <param name="cancellationToken">The token used to request cancellation of the operation.</param>
            
             <returns>The token representing the shared access signature for this credential.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
             <summary>
               Retrieves the token that represents the shared access signature credential, for
               use in authorization against an Event Hub.
             </summary>
            
             <param name="requestContext">The details of the authentication request.</param>
             <param name="cancellationToken">The token used to request cancellation of the operation.</param>
            
             <returns>The token representing the shared access signature for this credential.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature">
             <summary>
               A shared access signature, which can be used for authorization to an Event Hubs namespace
               or a specific Event Hub.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.SharedAccessKeyName">
             <summary>
               The name of the shared access key, either for the Event Hubs namespace
               or the Event Hub.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.SharedAccessKey">
             <summary>
               The value of the shared access key, either for the Event Hubs namespace
               or the Event Hub.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.SignatureExpiration">
             <summary>
               The date and time that the shared access signature expires, in UTC.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.Resource">
             <summary>
               The resource to which the shared access signature is intended to serve as
               authorization.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.Value">
             <summary>
               The shared access signature to be used for authorization, either for the Event Hubs namespace
               or the Event Hub.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.#ctor(System.String,System.String,System.String,System.Nullable{System.TimeSpan})">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature" /> class.
             </summary>
            
             <param name="eventHubResource">The Event Hubs resource to which the token is intended to serve as authorization.</param>
             <param name="sharedAccessKeyName">The name of the shared access key that the signature should be based on.</param>
             <param name="sharedAccessKey">The value of the shared access key for the signature.</param>
             <param name="signatureValidityDuration">The duration that the signature should be considered valid; if not specified, a default will be assumed.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.#ctor(System.String,System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature" /> class.
             </summary>
            
             <param name="sharedAccessSignature">The shared access signature that will be parsed as the basis of this instance.</param>
             <param name="sharedAccessKey">The value of the shared access key for the signature.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.#ctor(System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature" /> class.
             </summary>
            
             <param name="sharedAccessSignature">The shared access signature that will be parsed as the basis of this instance.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.#ctor(System.String,System.String,System.String,System.String,System.DateTimeOffset)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature" /> class.
             </summary>
            
             <param name="eventHubResource">The Event Hubs resource to which the token is intended to serve as authorization.</param>
             <param name="sharedAccessKeyName">The name of the shared access key that the signature should be based on.</param>
             <param name="sharedAccessKey">The value of the shared access key for the signature.</param>
             <param name="value">The shared access signature to be used for authorization.</param>
             <param name="signatureExpiration">The date and time that the shared access signature expires, in UTC.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.CloneWithNewExpiration(System.TimeSpan)">
             <summary>
               Creates a new signature with the specified period for which the shared access signature is considered valid.
             </summary>
            
             <param name="signatureValidityDuration">The duration that the signature should be considered valid.</param>
            
             <returns>A new <see cref="T:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature" /> based on the same key, but with a new expiration time.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient">
             <summary>
               <para>A client responsible for reading <see cref="T:Azure.Messaging.EventHubs.EventData" /> from a specific Event Hub
               as a member of a specific consumer group.</para>
            
               <para>A consumer may be exclusive, which asserts ownership over associated partitions for the consumer
               group to ensure that only one consumer from that group is reading the from the partition.
               These exclusive consumers are sometimes referred to as "Epoch Consumers."</para>
            
               <para>A consumer may also be non-exclusive, allowing multiple consumers from the same consumer
               group to be actively reading events from a given partition.  These non-exclusive consumers are
               sometimes referred to as "Non-Epoch Consumers."</para>
             </summary>
            
             <remarks>
               The <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" /> is safe to cache and use for the lifetime of an application, and that is best practice when the application
               reads events regularly or semi-regularly.  The consumer holds responsibility for efficient resource management, working to keep resource usage low during
               periods of inactivity and manage health during periods of higher use.  Calling either the <see cref="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.CloseAsync(System.Threading.CancellationToken)" /> or <see cref="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.DisposeAsync" />
               method as the application is shutting down will ensure that network resources and other unmanaged objects are properly cleaned up.
             </remarks>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.DefaultConsumerGroupName">
            <summary>The name of the default consumer group in the Event Hubs service.</summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.FullyQualifiedNamespace">
             <summary>
               The fully qualified Event Hubs namespace that the consumer is associated with.  This is likely
               to be similar to <c>{yournamespace}.servicebus.windows.net</c>.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.EventHubName">
             <summary>
               The name of the Event Hub that the consumer is connected to, specific to the
               Event Hubs namespace that contains it.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ConsumerGroup">
             <summary>
               The name of the consumer group that this consumer is associated with.  Events will be read
               only in the context of this group.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.IsClosed">
             <summary>
               Indicates whether or not this <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" /> has been closed.
             </summary>
            
             <value>
               <c>true</c> if the client is closed; otherwise, <c>false</c>.
             </value>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.#ctor(System.String,System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" /> class.
             </summary>
            
             <param name="consumerGroup">The name of the consumer group this consumer is associated with.  Events are read in the context of this group.</param>
             <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the Event Hub name and the shared key properties are contained in this connection string.</param>
            
             <remarks>
               If the connection string is copied from the Event Hubs namespace, it will likely not contain the name of the desired Event Hub,
               which is needed.  In this case, the name can be added manually by adding ";EntityPath=[[ EVENT HUB NAME ]]" to the end of the
               connection string.  For example, ";EntityPath=telemetry-hub".
            
               If you have defined a shared access policy directly on the Event Hub itself, then copying the connection string from that
               Event Hub will result in a connection string that contains the name.
             </remarks>
            
             <seealso href="https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string">How to get an Event Hubs connection string</seealso>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.#ctor(System.String,System.String,Azure.Messaging.EventHubs.Consumer.EventHubConsumerClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" /> class.
             </summary>
            
             <param name="consumerGroup">The name of the consumer group this consumer is associated with.  Events are read in the context of this group.</param>
             <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the Event Hub name and the shared key properties are contained in this connection string.</param>
             <param name="clientOptions">The set of options to use for this consumer.</param>
            
             <remarks>
               If the connection string is copied from the Event Hubs namespace, it will likely not contain the name of the desired Event Hub,
               which is needed.  In this case, the name can be added manually by adding ";EntityPath=[[ EVENT HUB NAME ]]" to the end of the
               connection string.  For example, ";EntityPath=telemetry-hub".
            
               If you have defined a shared access policy directly on the Event Hub itself, then copying the connection string from that
               Event Hub will result in a connection string that contains the name.
             </remarks>
            
             <seealso href="https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string">How to get an Event Hubs connection string</seealso>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.#ctor(System.String,System.String,System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" /> class.
             </summary>
            
             <param name="consumerGroup">The name of the consumer group this consumer is associated with.  Events are read in the context of this group.</param>
             <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the shared key properties are contained in this connection string, but not the Event Hub name.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the consumer with.</param>
            
             <remarks>
               If the connection string is copied from the Event Hub itself, it will contain the name of the desired Event Hub,
               and can be used directly without passing the <paramref name="eventHubName" />.  The name of the Event Hub should be
               passed only once, either as part of the connection string or separately.
             </remarks>
            
             <seealso href="https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string">How to get an Event Hubs connection string</seealso>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.#ctor(System.String,System.String,System.String,Azure.Messaging.EventHubs.Consumer.EventHubConsumerClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" /> class.
             </summary>
            
             <param name="consumerGroup">The name of the consumer group this consumer is associated with.  Events are read in the context of this group.</param>
             <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the shared key properties are contained in this connection string, but not the Event Hub name.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the consumer with.</param>
             <param name="clientOptions">A set of options to apply when configuring the consumer.</param>
            
             <remarks>
               If the connection string is copied from the Event Hub itself, it will contain the name of the desired Event Hub,
               and can be used directly without passing the <paramref name="eventHubName" />.  The name of the Event Hub should be
               passed only once, either as part of the connection string or separately.
             </remarks>
            
             <seealso href="https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string">How to get an Event Hubs connection string</seealso>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.#ctor(System.String,System.String,System.String,Azure.AzureNamedKeyCredential,Azure.Messaging.EventHubs.Consumer.EventHubConsumerClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" /> class.
             </summary>
            
             <param name="consumerGroup">The name of the consumer group this consumer is associated with.  Events are read in the context of this group.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the consumer with.</param>
             <param name="credential">The shared access key credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
             <param name="clientOptions">A set of options to apply when configuring the consumer.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.#ctor(System.String,System.String,System.String,Azure.AzureSasCredential,Azure.Messaging.EventHubs.Consumer.EventHubConsumerClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" /> class.
             </summary>
            
             <param name="consumerGroup">The name of the consumer group this consumer is associated with.  Events are read in the context of this group.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the consumer with.</param>
             <param name="credential">The shared access signature credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
             <param name="clientOptions">A set of options to apply when configuring the consumer.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.#ctor(System.String,System.String,System.String,Azure.Core.TokenCredential,Azure.Messaging.EventHubs.Consumer.EventHubConsumerClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" /> class.
             </summary>
            
             <param name="consumerGroup">The name of the consumer group this consumer is associated with.  Events are read in the context of this group.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the consumer with.</param>
             <param name="credential">The Azure managed identity credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
             <param name="clientOptions">A set of options to apply when configuring the consumer.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.#ctor(System.String,Azure.Messaging.EventHubs.EventHubConnection,Azure.Messaging.EventHubs.Consumer.EventHubConsumerClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" /> class.
             </summary>
            
             <param name="consumerGroup">The name of the consumer group this consumer is associated with.  Events are read in the context of this group.</param>
             <param name="connection">The <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" /> connection to use for communication with the Event Hubs service.</param>
             <param name="clientOptions">A set of options to apply when configuring the consumer.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.#ctor">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" /> class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.GetEventHubPropertiesAsync(System.Threading.CancellationToken)">
             <summary>
               Retrieves information about the Event Hub that the connection is associated with, including
               the number of partitions present and their identifiers.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The set of information for the Event Hub that this client is associated with.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.GetPartitionIdsAsync(System.Threading.CancellationToken)">
             <summary>
               Retrieves the set of identifiers for the partitions of an Event Hub.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The set of identifiers for the partitions within the Event Hub that this client is associated with.</returns>
            
             <remarks>
               This method is synonymous with invoking <see cref="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.GetEventHubPropertiesAsync(System.Threading.CancellationToken)" /> and reading the <see cref="P:Azure.Messaging.EventHubs.EventHubProperties.PartitionIds" />
               property that is returned. It is offered as a convenience for quick access to the set of partition identifiers for the associated Event Hub.
               No new or extended information is presented.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.GetPartitionPropertiesAsync(System.String,System.Threading.CancellationToken)">
             <summary>
               Retrieves information about a specific partition for an Event Hub, including elements that describe the available
               events in the partition event stream.
             </summary>
            
             <param name="partitionId">The unique identifier of a partition associated with the Event Hub.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The set of information for the requested partition under the Event Hub this client is associated with.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsFromPartitionAsync(System.String,Azure.Messaging.EventHubs.Consumer.EventPosition,System.Threading.CancellationToken)">
             <summary>
               Reads events from the requested partition as an asynchronous enumerable, allowing events to be iterated as they
               become available on the partition, waiting as necessary should there be no events available.
            
               This enumerator may block for an indeterminate amount of time for an <c>await</c> if events are not available on the partition, requiring
               cancellation via the <paramref name="cancellationToken" /> to be requested in order to return control.  It is recommended to call the overload
               which accepts a set of options for configuring read behavior for scenarios where a more deterministic maximum waiting period is desired.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition from which events will be received.</param>
             <param name="startingPosition">The position within the partition where the consumer should begin reading events.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to be used for iterating over events in the partition.</returns>
            
             <remarks>
               Each reader of events is presented with an independent iterator; if there are multiple readers, each receive their own copy of an event to
               process, rather than competing for them.
             </remarks>
            
             <seealso cref="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsFromPartitionAsync(System.String,Azure.Messaging.EventHubs.Consumer.EventPosition,Azure.Messaging.EventHubs.Consumer.ReadEventOptions,System.Threading.CancellationToken)" />
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsFromPartitionAsync(System.String,Azure.Messaging.EventHubs.Consumer.EventPosition,Azure.Messaging.EventHubs.Consumer.ReadEventOptions,System.Threading.CancellationToken)">
             <summary>
               Reads events from the requested partition as an asynchronous enumerable, allowing events to be iterated as they
               become available on the partition, waiting as necessary should there be no events available.
            
               This enumerator may block for an indeterminate amount of time for an <c>await</c> if events are not available on the partition, requiring
               cancellation via the <paramref name="cancellationToken" /> to be requested in order to return control.  It is recommended to set the
               <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.MaximumWaitTime" /> for scenarios where a more deterministic maximum waiting period is desired.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition from which events will be received.</param>
             <param name="startingPosition">The position within the partition where the consumer should begin reading events.</param>
             <param name="readOptions">The set of options to use for configuring read behavior; if not specified the defaults will be used.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to be used for iterating over events in the partition.</returns>
            
             <remarks>
               Each reader of events is presented with an independent iterator; if there are multiple readers, each receive their own copy of an event to
               process, rather than competing for them.
             </remarks>
            
             <seealso cref="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsFromPartitionAsync(System.String,Azure.Messaging.EventHubs.Consumer.EventPosition,System.Threading.CancellationToken)" />
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync(System.Threading.CancellationToken)">
             <summary>
               Reads events from all partitions of the event hub as an asynchronous enumerable, allowing events to be iterated as they
               become available on the partition, waiting as necessary should there be no events available.
            
               This enumerator may block for an indeterminate amount of time for an <c>await</c> if events are not available on the partition, requiring
               cancellation via the <paramref name="cancellationToken" /> to be requested in order to return control.  It is recommended to set the
               <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.MaximumWaitTime" /> for scenarios where a more deterministic maximum waiting period is desired.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to be used for iterating over events in the partition.</returns>
            
             <remarks>
               This method is not recommended for production use; the <c>EventProcessorClient</c> should be used for reading events from all partitions in a
               production scenario, as it offers a much more robust experience with higher throughput.
            
               It is important to note that this method does not guarantee fairness amongst the partitions during iteration; each of the partitions compete to publish
               events to be read by the enumerator.  Depending on service communication, there may be a clustering of events per partition and/or there may be a noticeable
               bias for a given partition or subset of partitions.
            
               Each reader of events is presented with an independent iterator; if there are multiple readers, each receive their own copy of an event to
               process, rather than competing for them.
             </remarks>
            
             <seealso href="https://www.nuget.org/packages/Azure.Messaging.EventHubs.Processor">Azure.Messaging.EventHubs.Processor (NuGet)</seealso>
             <seealso cref="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync(Azure.Messaging.EventHubs.Consumer.ReadEventOptions,System.Threading.CancellationToken)" />
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync(Azure.Messaging.EventHubs.Consumer.ReadEventOptions,System.Threading.CancellationToken)">
             <summary>
               Reads events from all partitions of the event hub as an asynchronous enumerable, allowing events to be iterated as they
               become available on the partition, waiting as necessary should there be no events available.
            
               This enumerator may block for an indeterminate amount of time for an <c>await</c> if events are not available on the partition, requiring
               cancellation via the <paramref name="cancellationToken" /> to be requested in order to return control.  It is recommended to set the
               <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.MaximumWaitTime" /> for scenarios where a more deterministic maximum waiting period is desired.
             </summary>
            
             <param name="readOptions">The set of options to use for configuring read behavior; if not specified the defaults will be used.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to be used for iterating over events in the partition.</returns>
            
             <remarks>
               This method is not recommended for production use; the <c>EventProcessorClient</c> should be used for reading events from all partitions in a
               production scenario, as it offers a much more robust experience with higher throughput.
            
               It is important to note that this method does not guarantee fairness amongst the partitions during iteration; each of the partitions compete to publish
               events to be read by the enumerator.  Depending on service communication, there may be a clustering of events per partition and/or there may be a noticeable
               bias for a given partition or subset of partitions.
            
               Each reader of events is presented with an independent iterator; if there are multiple readers, each receive their own copy of an event to
               process, rather than competing for them.
             </remarks>
            
             <seealso href="https://www.nuget.org/packages/Azure.Messaging.EventHubs.Processor">Azure.Messaging.EventHubs.Processor (NuGet)</seealso>
             <seealso cref="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync(System.Threading.CancellationToken)" />
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync(System.Boolean,Azure.Messaging.EventHubs.Consumer.ReadEventOptions,System.Threading.CancellationToken)">
             <summary>
               Reads events from all partitions of the event hub as an asynchronous enumerable, allowing events to be iterated as they
               become available on the partition, waiting as necessary should there be no events available.
            
               This enumerator may block for an indeterminate amount of time for an <c>await</c> if events are not available on the partition, requiring
               cancellation via the <paramref name="cancellationToken" /> to be requested in order to return control.  It is recommended to set the
               <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.MaximumWaitTime" /> for scenarios where a more deterministic maximum waiting period is desired.
             </summary>
            
             <param name="startReadingAtEarliestEvent"><c>true</c> to begin reading at the first events available in each partition; otherwise, reading will begin at the end of each partition seeing only new events as they are published.</param>
             <param name="readOptions">The set of options to use for configuring read behavior; if not specified the defaults will be used.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to be used for iterating over events in the partition.</returns>
            
             <remarks>
               This method is not recommended for production use; the <c>EventProcessorClient</c> should be used for reading events from all partitions in a
               production scenario, as it offers a much more robust experience with higher throughput.
            
               It is important to note that this method does not guarantee fairness amongst the partitions during iteration; each of the partitions competes to publish
               events to be read by the enumerator.  Depending on service communication, there may be a clustering of events per partition and/or there may be a noticeable
               bias for a given partition or subset of partitions.
            
               Each reader of events is presented with an independent iterator; if there are multiple readers, each receive their own copy of an event to
               process, rather than competing for them.
             </remarks>
            
             <seealso href="https://www.nuget.org/packages/Azure.Messaging.EventHubs.Processor">Azure.Messaging.EventHubs.Processor (NuGet)</seealso>
             <seealso cref="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync(System.Threading.CancellationToken)" />
             <seealso cref="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync(Azure.Messaging.EventHubs.Consumer.ReadEventOptions,System.Threading.CancellationToken)" />
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.CloseAsync(System.Threading.CancellationToken)">
             <summary>
               Closes the consumer.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.DisposeAsync">
             <summary>
               Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" />,
               including ensuring that the client itself has been closed.
             </summary>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClientOptions">
             <summary>
               The set of options that can be specified when creating an <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" />
               to configure its behavior.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClientOptions.ConnectionOptions">
             <summary>
               The options used for configuring the connection to the Event Hubs service.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClientOptions.RetryOptions">
             <summary>
               The set of options to use for determining whether a failed operation should be retried and,
               if so, the amount of time to wait between retry attempts.  These options also control the
               amount of time allowed for reading events and other interactions with the Event Hubs service.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClientOptions.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClientOptions.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClientOptions.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClientOptions.Clone">
             <summary>
               Creates a new copy of the current <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClientOptions" />, cloning its attributes into a new instance.
             </summary>
            
             <returns>A new copy of <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClientOptions" />.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Consumer.EventPosition">
             <summary>
               The position of events in an Event Hub partition, typically used in the creation of
               an <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" />.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.EventPosition.Earliest">
             <summary>
               Corresponds to the location of the first event present in the partition.  Use this
               position to begin receiving from the first event that was enqueued in the partition
               which has not expired due to the retention policy.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.EventPosition.Latest">
             <summary>
               Corresponds to the end of the partition, where no more events are currently enqueued.  Use this
               position to begin receiving from the next event to be enqueued in the partition after an <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" />
               is created with this position.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.EventPosition.Offset">
             <summary>
               The offset of the event identified by this position.
             </summary>
            
             <value>Expected to be <c>null</c> if the event position represents a sequence number or enqueue time.</value>
            
             <remarks>
               The offset is the relative position for event in the context of the stream.  The offset
               should not be considered a stable value, as the same offset may refer to a different event
               as events reach the age limit for retention and are no longer visible within the stream.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.EventPosition.IsInclusive">
             <summary>
               Indicates if the specified offset is inclusive of the event which it identifies.  This
               information is only relevant if the event position was identified by an offset or sequence number.
             </summary>
            
             <value><c>true</c> if the offset is inclusive; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.EventPosition.EnqueuedTime">
             <summary>
               The enqueue time of the event identified by this position.
             </summary>
            
             <value>Expected to be <c>null</c> if the event position represents an offset or sequence number.</value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.EventPosition.SequenceNumber">
             <summary>
               The sequence number of the event identified by this position.
             </summary>
            
             <value>Expected to be <c>null</c> if the event position represents an offset or enqueue time.</value>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventPosition.FromOffset(System.Int64,System.Boolean)">
             <summary>
               Corresponds to the event in the partition at the provided offset, inclusive of that event.
             </summary>
            
             <param name="offset">The offset of an event with respect to its relative position in the partition.</param>
             <param name="isInclusive">If true, the event with the <paramref name="offset" /> is included; otherwise the next event in sequence will be received.</param>
            
             <returns>The position of the specified event.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventPosition.FromSequenceNumber(System.Int64,System.Boolean)">
             <summary>
               Corresponds to the event in the partition having a specified sequence number associated with it.
             </summary>
            
             <param name="sequenceNumber">The sequence number assigned to an event when it was enqueued in the partition.</param>
             <param name="isInclusive">If true, the event with the <paramref name="sequenceNumber" /> is included; otherwise the next event in sequence will be received.</param>
            
             <returns>The position of the specified event.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventPosition.FromEnqueuedTime(System.DateTimeOffset)">
             <summary>
               Corresponds to a specific date and time within the partition to begin seeking an event; the event enqueued after the
               requested <paramref name="enqueuedTime" /> will become the current position.
             </summary>
            
             <param name="enqueuedTime">The date and time, in UTC, from which the next available event should be chosen.</param>
            
             <returns>The position of the specified event.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventPosition.Equals(Azure.Messaging.EventHubs.Consumer.EventPosition)">
             <summary>
               Determines whether the specified <see cref="T:Azure.Messaging.EventHubs.Consumer.EventPosition" /> is equal to this instance.
             </summary>
            
             <param name="other">The <see cref="T:Azure.Messaging.EventHubs.Consumer.EventPosition" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:Azure.Messaging.EventHubs.Consumer.EventPosition" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventPosition.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventPosition.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventPosition.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventPosition.op_Equality(Azure.Messaging.EventHubs.Consumer.EventPosition,Azure.Messaging.EventHubs.Consumer.EventPosition)">
             <summary>
               Determines whether the specified <see cref="T:Azure.Messaging.EventHubs.Consumer.EventPosition" /> instances are equal to each other.
             </summary>
            
             <param name="left">The first <see cref="T:Azure.Messaging.EventHubs.Consumer.EventPosition" /> to consider.</param>
             <param name="right">The second <see cref="T:Azure.Messaging.EventHubs.Consumer.EventPosition" /> to consider.</param>
            
             <returns><c>true</c> if the two specified <see cref="T:Azure.Messaging.EventHubs.Consumer.EventPosition" /> instances are equal; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.EventPosition.op_Inequality(Azure.Messaging.EventHubs.Consumer.EventPosition,Azure.Messaging.EventHubs.Consumer.EventPosition)">
             <summary>
               Determines whether the specified <see cref="T:Azure.Messaging.EventHubs.Consumer.EventPosition" /> instances are not equal to each other.
             </summary>
            
             <param name="left">The first <see cref="T:Azure.Messaging.EventHubs.Consumer.EventPosition" /> to consider.</param>
             <param name="right">The second <see cref="T:Azure.Messaging.EventHubs.Consumer.EventPosition" /> to consider.</param>
            
             <returns><c>true</c> if the two specified <see cref="T:Azure.Messaging.EventHubs.Consumer.EventPosition" /> instances are not equal; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties">
             <summary>
               A set of information about the enqueued state of a partition, as observed by the consumer.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties.SequenceNumber">
             <summary>
               The sequence number of the last observed event to be enqueued in the partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties.Offset">
             <summary>
               The offset of the last observed event to be enqueued in the partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties.EnqueuedTime">
             <summary>
               The date and time, in UTC, that the last observed event was enqueued in the partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties.LastReceivedTime">
             <summary>
               The date and time, in UTC, that the information about the last enqueued event was received.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties" /> class.
             </summary>
            
             <param name="lastSequenceNumber">The sequence number observed the last event to be enqueued in the partition.</param>
             <param name="lastOffset">The offset of the last event to be enqueued in the partition.</param>
             <param name="lastEnqueuedTime">The date and time, in UTC, that the last event was enqueued in the partition.</param>
             <param name="lastReceivedTime">The date and time, in UTC, that the information was last received.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties.#ctor(Azure.Messaging.EventHubs.EventData)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties" /> class.
             </summary>
            
             <param name="sourceEvent">The event to use as the source for the partition information.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties.Equals(Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties)">
             <summary>
               Determines whether the specified <see cref="T:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties" /> is equal to this instance.
             </summary>
            
             <param name="other">The <see cref="T:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties.op_Equality(Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties,Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties)">
             <summary>
               Determines whether the specified <see cref="T:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties" /> instances are equal to each other.
             </summary>
            
             <param name="left">The first <see cref="T:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties" /> to consider.</param>
             <param name="right">The second <see cref="T:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties" /> to consider.</param>
            
             <returns><c>true</c> if the two specified <see cref="T:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties" /> instances are equal; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties.op_Inequality(Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties,Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties)">
             <summary>
               Determines whether the specified <see cref="T:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties" /> instances are not equal to each other.
             </summary>
            
             <param name="left">The first <see cref="T:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties" /> to consider.</param>
             <param name="right">The second <see cref="T:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties" /> to consider.</param>
            
             <returns><c>true</c> if the two specified <see cref="T:Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties" /> instances are not equal; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Consumer.PartitionContext">
             <summary>
               Represents an Event Hub partition and its relative state, as scoped to an associated
               operation performed against it.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.PartitionContext.PartitionId">
             <summary>
               The identifier of the Event Hub partition this context is associated with.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.PartitionContext.ReadLastEnqueuedEventProperties">
             <summary>
               A set of information about the last enqueued event of a partition, as observed by the associated EventHubs client
               associated with this context as events are received from the Event Hubs service.  This is only available if the consumer was
               created with <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.TrackLastEnqueuedEventProperties" /> set.
             </summary>
            
             <returns>The set of properties for the last event that was enqueued to the partition.  If no events were read or tracking was not set, the properties will be returned with default values.</returns>
            
             <remarks>
               When information about the partition's last enqueued event is being tracked, each event received from the Event Hubs
               service will carry metadata about the partition that it otherwise would not. This results in a small amount of
               additional network bandwidth consumption that is generally a favorable trade-off when considered
               against periodically making requests for partition properties using an Event Hub client.
             </remarks>
            
             <exception cref="T:Azure.Messaging.EventHubs.EventHubsException">Occurs when the Event Hubs client needed to read this information is no longer available.</exception>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.PartitionContext.#ctor(System.String,Azure.Messaging.EventHubs.Core.TransportConsumer)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Consumer.PartitionContext" /> class.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition this context is associated with.</param>
             <param name="consumer">The <see cref="T:Azure.Messaging.EventHubs.Core.TransportConsumer" /> for this context to use as the source for information.</param>
            
             <remarks>
               The <paramref name="consumer" />, if provided, will be held in a weak reference to ensure that it
               does not impact resource use should the partition context be held beyond the lifespan of the
               consumer instance.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.PartitionContext.#ctor(System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Consumer.PartitionContext" /> class.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition this context is associated with.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Consumer.PartitionEvent">
             <summary>
               Contains information about a partition that has attempted to receive an event from the Azure Event Hub
               service, as well as the received event, if any.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.PartitionEvent.Partition">
             <summary>
               The Event Hub partition that the <see cref="P:Azure.Messaging.EventHubs.Consumer.PartitionEvent.Data" /> is associated with.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.PartitionEvent.Data">
             <summary>
               An event that was read from the associated <see cref="P:Azure.Messaging.EventHubs.Consumer.PartitionEvent.Partition" />.
             </summary>
            
             <value>
               The <see cref="T:Azure.Messaging.EventHubs.EventData" /> read from the Event Hub partition, if data was available.
               If a maximum wait time was specified when reading events and no event was available in that
               time period, <c>null</c>.
             </value>
            
             <remarks>
               Ownership of this data, including the memory that holds its <see cref="P:Azure.Messaging.EventHubs.EventData.EventBody" />,
               is assumed to transfer to consumers of the <see cref="T:Azure.Messaging.EventHubs.Consumer.PartitionEvent" />.  It may be considered
               immutable and is safe to access so long as the reference is held.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.PartitionEvent.#ctor(Azure.Messaging.EventHubs.Consumer.PartitionContext,Azure.Messaging.EventHubs.EventData)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Consumer.PartitionEvent" /> structure.
             </summary>
            
             <param name="partition">The Event Hub partition that the <paramref name="data" /> is associated with.</param>
             <param name="data">The event that was read, if events were available; otherwise, <c>null</c>.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Consumer.ReadEventOptions">
             <summary>
               The set of options that can be specified to configure behavior when reading events from an
               <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" />.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.OwnerLevel">
             <summary>
               When populated, the owner level indicates that a reading is intended to be performed exclusively for events in the
               requested partition and for the associated consumer group.  To do so, reading will attempt to assert ownership
               over the partition; in the case where more than one exclusive reader in the consumer group attempts to assert ownership
               for the same partition, the one having a larger <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.OwnerLevel" /> value will "win".
            
               <para>When an exclusive reader is used, other readers which are non-exclusive or which have a lower owner level will either
               not be allowed to be created, if they already exist, will encounter an exception during the next attempted operation.</para>
             </summary>
            
             <value>The relative priority to associate with an exclusive reader; for a non-exclusive reader, this value should be <c>null</c>.</value>
            
             <remarks>
               An <see cref="T:Azure.Messaging.EventHubs.EventHubsException" /> will occur if an <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" /> is unable to read events from the
               requested Event Hub partition for the given consumer group.  In this case, the <see cref="T:Azure.Messaging.EventHubs.EventHubsException.FailureReason" />
               will be set to <see cref="F:Azure.Messaging.EventHubs.EventHubsException.FailureReason.ConsumerDisconnected" />.
             </remarks>
            
             <seealso cref="T:Azure.Messaging.EventHubs.EventHubsException" />
             <seealso cref="F:Azure.Messaging.EventHubs.EventHubsException.FailureReason.ConsumerDisconnected" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.TrackLastEnqueuedEventProperties">
             <summary>
               Indicates whether or not the reader should request information on the last enqueued event on the partition
               associated with a given event, and track that information as events are read.
             </summary>
            
             <value><c>true</c> if information about a partition's last event should be requested and tracked; otherwise, <c>false</c>.</value>
            
             <remarks>
               When information about a partition's last enqueued event is being tracked, each event received from the Event Hubs
               service will carry metadata about the partition that it otherwise would not. This results in a small amount of
               additional network bandwidth consumption that is generally a favorable trade-off when considered
               against periodically making requests for partition properties using one of the Event Hub clients.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.MaximumWaitTime">
             <summary>
               The maximum amount of time to wait to for an event to be available when reading before reading an empty
               event.
             </summary>
            
             <value>
               If specified, should there be no events available before this waiting period expires, an empty event will be returned,
               allowing control to return to the reader that was waiting.
            
               <para>If <c>null</c>, the reader will wait forever for items to be available unless reading is canceled. Empty items will
               not be returned.</para>
             </value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.CacheEventCount">
             <summary>
               The maximum number of events that will be read from the Event Hubs service and held in a local memory
               cache when reading is active and events are being emitted to an enumerator for processing.
             </summary>
            
             <value>
               The <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.CacheEventCount" /> is a control that developers can use to help tune performance for the specific
               needs of an application, given its expected size of events, throughput needs, and expected scenarios for using
               Event Hubs.
             </value>
            
             <remarks>
               The size of this cache has an influence on the efficiency of reading events from the Event Hubs service.  The
               larger the size of the cache, the more efficiently service operations can be buffered in the background to
               improve throughput.  This comes at the cost of additional memory use and potentially increases network I/O.
            
               For scenarios where the size of events is small and many events are flowing through the system, using a larger
               <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.CacheEventCount" /> and <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.PrefetchCount" /> may help improve throughput.  For scenarios where
               the size of events is larger or when processing of events is expected to be a heavier and slower operation, using
               a smaller size <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.CacheEventCount" /> and <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.PrefetchCount" /> may help manage resource use without
               incurring a non-trivial cost to throughput.
            
               Regardless of the values, it is generally recommended that the <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.PrefetchCount" /> be at least 2-3
               times as large as the <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.CacheEventCount" /> to allow for efficient buffering of service operations.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.PrefetchCount">
             <summary>
               The number of events that will be eagerly requested from the Event Hubs service and queued locally without regard to
               whether a read operation is currently active, intended to help maximize throughput by allowing events to be read from
               from a local cache rather than waiting on a service request.
             </summary>
            
             <value>
               The <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.PrefetchCount" /> is a control that developers can use to help tune performance for the specific
               needs of an application, given its expected size of events, throughput needs, and expected scenarios for using
               Event Hubs.
             </value>
            
             <remarks>
               The size of the prefetch count has an influence on the efficiency of reading events from the Event Hubs service.  The
               larger the size of the cache, the more efficiently service operations can be buffered in the background to
               improve throughput.  This comes at the cost of additional memory use and potentially increases network I/O.
            
               For scenarios where the size of events is small and many events are flowing through the system, using a larger
               <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.CacheEventCount" /> and <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.PrefetchCount" /> may help improve throughput.  For scenarios where
               the size of events is larger or when processing of events is expected to be a heavier and slower operation, using
               a smaller size <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.CacheEventCount" /> and <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.PrefetchCount" /> may help manage resource use without
               incurring a non-trivial cost to throughput.
            
               Regardless of the values, it is generally recommended that the <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.PrefetchCount" /> be at least 2-3
               times as large as the <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.CacheEventCount" /> to allow for efficient buffering of service operations.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.PrefetchSizeInBytes">
             <summary>
               The desired number of bytes to attempt to eagerly request from the Event Hubs service and queued locally without regard to
               whether a read operation is currently active, intended to help maximize throughput by allowing events to be read from
               from a local cache rather than waiting on a service request.
             </summary>
            
             <value>
               <para>When set to <c>null</c>, the option is considered disabled; otherwise, it will be considered enabled and take
               precedence over any value specified for the <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.PrefetchCount" />The <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.PrefetchSizeInBytes" /> is an
               advanced control that developers can use to help tune performance in some scenarios; it is recommended to prefer using
               the <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.PrefetchCount" /> over this option where possible for more accurate control and more predictable throughput.</para>
            
               <para>This size should be considered a statement of intent rather than a guaranteed limit; the local cache may be larger or
               smaller than the number of bytes specified, and will always contain at least one event when the <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.PrefetchSizeInBytes" />
               is specified.  A heuristic is used to predict the average event size to use for size calculations, which should be expected to fluctuate
               as traffic passes through the system.  Consequently, the resulting resource use will fluctuate as well.</para>
             </value>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.Clone">
             <summary>
               Creates a new copy of the current <see cref="T:Azure.Messaging.EventHubs.Consumer.ReadEventOptions" />, cloning its attributes into a new instance.
             </summary>
            
             <returns>A new copy of <see cref="T:Azure.Messaging.EventHubs.Consumer.ReadEventOptions" />.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.ChannelReaderExtensions">
             <summary>
               The set of extensions for the <see cref="T:System.Threading.Channels.ChannelReader`1" />
               class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.ChannelReaderExtensions.EnumerateChannel``1(System.Threading.Channels.ChannelReader{``0},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
             <summary>
               Enumerates the events as they become available in the associated channel.
             </summary>
            
             <typeparam name="T">The type of data contained in the channel.</typeparam>
            
             <param name="reader">The <see cref="T:System.Threading.Channels.ChannelReader`1" /> instance that this method was invoked on, and from which events are to be sourced.</param>
             <param name="maximumWaitTime">The maximum amount of time to wait to for an event to be available before emitting an empty item; if <c>null</c>, empty items will not be emitted.</param>
             <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel enumeration.</param>
            
             <returns>An asynchronous enumerator that can be used to iterate over events as they are available.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.ClientLibraryInformation">
             <summary>
               The set of information describing the active version of the
               client library.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.ClientLibraryInformation.Current">
             <summary>
               The current set of information.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.ClientLibraryInformation.Product">
             <summary>
               The name of the client library product.
              </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.ClientLibraryInformation.Version">
             <summary>
               The version of the client library.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.ClientLibraryInformation.Framework">
             <summary>
               The version of the framework on which the client library was
               built.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.ClientLibraryInformation.Platform">
             <summary>
              The name of the platform on which the client library is currently running.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.ClientLibraryInformation.UserAgent">
             <summary>
              The client library information, formatted in the standard form used by SDK
              user agents when interacting with Azure services.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.ClientLibraryInformation.EnumerateProperties">
             <summary>
               Enumerates the client library properties, normalizing the property names.
             </summary>
            
             <returns>An enumerable set of the properties, with name and value.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.ExceptionExtensions">
             <summary>
               The set of extensions for the <see cref="T:System.Exception" />
               class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.ExceptionExtensions.IsNotType``1(System.Exception)">
             <summary>
               Serves as an inverse to the "is" operator, determining whether the <paramref name="instance" />
               is NOT of type <typeparamref name="T" />.
             </summary>
            
             <typeparam name="T">The <see cref="T:System.Exception" /> type to test the <paramref name="instance" /> against.</typeparam>
            
             <param name="instance">The instance to consider.</param>
            
             <returns><c>true</c> if the specified instance is NOT of type <typeparamref name="T" />; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.ExceptionExtensions.IsFatalException(System.Exception)">
             <summary>
               Determines whether the <paramref name="instance" /> is a well-known fatal exception and should avoid retries,
               logging, and similar activities.
             </summary>
            
             <param name="instance">The instance to consider.</param>
            
             <returns><c>true</c> if the specified instance should be considered fatal; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.TransportClient">
             <summary>
               Provides an abstraction for generalizing an Event Hub client so that a dedicated instance may provide operations
               for a specific transport, such as AMQP or JMS.  It is intended that the public <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" /> employ
               a transport client via containment and delegate operations to it rather than understanding protocol-specific details
               for different transports.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.TransportClient.IsClosed">
             <summary>
               Indicates whether or not this client has been closed.
               </summary>
            
             <value>
               <c>true</c> if the client is closed; otherwise, <c>false</c>.
             </value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.TransportClient.ServiceEndpoint">
             <summary>
               The endpoint for the Event Hubs service to which the client is associated.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportClient.GetPropertiesAsync(Azure.Messaging.EventHubs.EventHubsRetryPolicy,System.Threading.CancellationToken)">
             <summary>
               Retrieves information about an Event Hub, including the number of partitions present
               and their identifiers.
             </summary>
            
             <param name="retryPolicy">The retry policy to use as the basis for retrieving the information.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The set of information for the Event Hub that this client is associated with.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportClient.GetPartitionPropertiesAsync(System.String,Azure.Messaging.EventHubs.EventHubsRetryPolicy,System.Threading.CancellationToken)">
             <summary>
               Retrieves information about a specific partition for an Event Hub, including elements that describe the available
               events in the partition event stream.
             </summary>
            
             <param name="partitionId">The unique identifier of a partition associated with the Event Hub.</param>
             <param name="retryPolicy">The retry policy to use as the basis for retrieving the information.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The set of information for the requested partition under the Event Hub this client is associated with.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportClient.CreateProducer(System.String,Azure.Messaging.EventHubs.Core.TransportProducerFeatures,Azure.Messaging.EventHubs.Producer.PartitionPublishingOptions,Azure.Messaging.EventHubs.EventHubsRetryPolicy)">
             <summary>
               Creates a producer strongly aligned with the active protocol and transport,
               responsible for publishing <see cref="T:Azure.Messaging.EventHubs.EventData" /> to the Event Hub.
             </summary>
            
             <param name="partitionId">The identifier of the partition to which the transport producer should be bound; if <c>null</c>, the producer is unbound.</param>
             <param name="requestedFeatures">The flags specifying the set of special transport features that should be opted-into.</param>
             <param name="partitionOptions">The set of options, if any, that should be considered when initializing the producer.</param>
             <param name="retryPolicy">The policy which governs retry behavior and try timeouts.</param>
            
             <returns>A <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducer" /> configured in the requested manner.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportClient.CreateConsumer(System.String,System.String,Azure.Messaging.EventHubs.Consumer.EventPosition,Azure.Messaging.EventHubs.EventHubsRetryPolicy,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.UInt32},System.Nullable{System.Int64})">
             <summary>
               Creates a consumer strongly aligned with the active protocol and transport, responsible
               for reading <see cref="T:Azure.Messaging.EventHubs.EventData" /> from a specific Event Hub partition, in the context
               of a specific consumer group.
            
               A consumer may be exclusive, which asserts ownership over the partition for the consumer
               group to ensure that only one consumer from that group is reading the from the partition.
               These exclusive consumers are sometimes referred to as "Epoch Consumers."
            
               A consumer may also be non-exclusive, allowing multiple consumers from the same consumer
               group to be actively reading events from the partition.  These non-exclusive consumers are
               sometimes referred to as "Non-epoch Consumers."
            
               Designating a consumer as exclusive may be specified by setting the <paramref name="ownerLevel" />.
               When <c>null</c>, consumers are created as non-exclusive.
             </summary>
            
             <param name="consumerGroup">The name of the consumer group this consumer is associated with.  Events are read in the context of this group.</param>
             <param name="partitionId">The identifier of the Event Hub partition from which events will be received.</param>
             <param name="eventPosition">The position within the partition where the consumer should begin reading events.</param>
             <param name="retryPolicy">The policy which governs retry behavior and try timeouts.</param>
             <param name="trackLastEnqueuedEventProperties">Indicates whether information on the last enqueued event on the partition is sent as events are received.</param>
             <param name="ownerLevel">The relative priority to associate with the link; for a non-exclusive link, this value should be <c>null</c>.</param>
             <param name="prefetchCount">Controls the number of events received and queued locally without regard to whether an operation was requested.  If <c>null</c> a default will be used.</param>
             <param name="prefetchSizeInBytes">The cache size of the prefetch queue. When set, the link makes a best effort to ensure prefetched messages fit into the specified size.</param>
            
             <returns>A <see cref="T:Azure.Messaging.EventHubs.Core.TransportConsumer" /> configured in the requested manner.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportClient.CloseAsync(System.Threading.CancellationToken)">
             <summary>
               Closes the connection to the transport client instance.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportClient.DisposeAsync">
             <summary>
               Performs the task needed to clean up resources used by the client,
               including ensuring that the client itself has been closed.
             </summary>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.TransportConsumer">
             <summary>
               Provides an abstraction for generalizing an Event Consumer so that a dedicated instance may provide operations
               for a specific transport, such as AMQP or JMS.  It is intended that the public <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" /> employ
               a transport consumer via containment and delegate operations to it rather than understanding protocol-specific details
               for different transports.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.TransportConsumer.IsClosed">
             <summary>
               Indicates whether or not this consumer has been closed.
             </summary>
            
             <value>
               <c>true</c> if the consumer is closed; otherwise, <c>false</c>.
             </value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.TransportConsumer.LastReceivedEvent">
             <summary>
               The most recent event received from the Event Hubs service by this consumer instance.
             </summary>
            
             <value>
               <c>null</c>, if the tracking of the last enqueued event information was not requested; otherwise,
               the most recently received event.
             </value>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportConsumer.ReceiveAsync(System.Int32,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
             <summary>
               Receives a batch of <see cref="T:Azure.Messaging.EventHubs.EventData" /> from the Event Hub partition.
             </summary>
            
             <param name="maximumEventCount">The maximum number of messages to receive in this batch.</param>
             <param name="maximumWaitTime">The maximum amount of time to wait for events to become available, if no events can be read from the prefetch queue.  If not specified, the per-try timeout specified by the retry policy will be used.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The batch of <see cref="T:Azure.Messaging.EventHubs.EventData" /> from the Event Hub partition this consumer is associated with.  If no events are present, an empty set is returned.</returns>
            
             <remarks>
               When events are available in the prefetch queue, they will be used to form the batch as quickly as possible without waiting for additional events from the
               Event Hubs service to try and meet the requested <paramref name="maximumEventCount" />.  When no events are available in prefetch, the receiver will wait up
               to the <paramref name="maximumWaitTime" /> for events to be read from the service.  Once any events are available, they will be used to form the batch immediately.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportConsumer.CloseAsync(System.Threading.CancellationToken)">
             <summary>
               Closes the connection to the transport producer instance.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.TransportEventBatch">
             <summary>
               Provides an abstraction for generalizing a batch of events so that a dedicated instance may provide operations
               for a specific transport, such as AMQP or JMS.  It is intended that the public <see cref="T:Azure.Messaging.EventHubs.Producer.EventDataBatch" /> employ
               a transport batch via containment and delegate operations to it rather than understanding protocol-specific details
               for different transports.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.TransportEventBatch.MaximumSizeInBytes">
             <summary>
               The maximum size allowed for the batch, in bytes.  This includes the events in the batch as
               well as any overhead for the batch itself when sent to the Event Hubs service.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.TransportEventBatch.SizeInBytes">
             <summary>
               The size of the batch, in bytes, as it will be sent to the Event Hubs
               service.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.TransportEventBatch.ActiveFeatures">
             <summary>
               The flags specifying the set of special transport features that have been opted-into.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.TransportEventBatch.Count">
             <summary>
               The count of events contained in the batch.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportEventBatch.TryAdd(Azure.Messaging.EventHubs.EventData)">
             <summary>
               Attempts to add an event to the batch, ensuring that the size
               of the batch does not exceed its maximum.
             </summary>
            
             <param name="eventData">The event to attempt to add to the batch.</param>
            
             <returns><c>true</c> if the event was added; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportEventBatch.Clear">
             <summary>
               Clears the batch, removing all events and resetting the
               available size.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportEventBatch.AsEnumerable``1">
             <summary>
               Represents the batch as an enumerable set of transport-specific
               representations of an event.
             </summary>
            
             <typeparam name="T">The transport-specific event representation being requested.</typeparam>
            
             <returns>The set of events as an enumerable of the requested type.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportEventBatch.Dispose">
             <summary>
               Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.EventHubs.Core.TransportEventBatch" />.
             </summary>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.TransportProducer">
             <summary>
               Provides an abstraction for generalizing an Event Hub Producer so that a dedicated instance may provide operations
               for a specific transport, such as AMQP or JMS.  It is intended that the public <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> employ
               a transport producer via containment and delegate operations to it rather than understanding protocol-specific details
               for different transports.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.TransportProducer.IsClosed">
             <summary>
               Indicates whether or not this producer has been closed.
             </summary>
            
             <value>
               <c>true</c> if the producer is closed; otherwise, <c>false</c>.
             </value>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportProducer.SendAsync(System.Collections.Generic.IEnumerable{Azure.Messaging.EventHubs.EventData},Azure.Messaging.EventHubs.Producer.SendEventOptions,System.Threading.CancellationToken)">
             <summary>
               Sends a set of events to the associated Event Hub using a batched approach.  If the size of events exceed the
               maximum size of a single batch, an exception will be triggered and the send will fail.
             </summary>
            
             <param name="events">The set of event data to send.</param>
             <param name="sendOptions">The set of options to consider when sending this batch.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportProducer.SendAsync(Azure.Messaging.EventHubs.Producer.EventDataBatch,System.Threading.CancellationToken)">
             <summary>
               Sends a set of events to the associated Event Hub using a batched approach.
             </summary>
            
             <param name="eventBatch">The set of event data to send.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportProducer.CreateBatchAsync(Azure.Messaging.EventHubs.Producer.CreateBatchOptions,System.Threading.CancellationToken)">
             <summary>
               Creates a size-constraint batch to which <see cref="T:Azure.Messaging.EventHubs.EventData" /> may be added using a try-based pattern.  If an event would
               exceed the maximum allowable size of the batch, the batch will not allow adding the event and signal that scenario using its
               return value.
            
               Because events that would violate the size constraint cannot be added, publishing a batch will not trigger an exception when
               attempting to send the events to the Event Hubs service.
             </summary>
            
             <param name="options">The set of options to consider when creating this batch.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An <see cref="T:Azure.Messaging.EventHubs.Producer.EventDataBatch" /> with the requested <paramref name="options" />.</returns>
            
             <seealso cref="M:Azure.Messaging.EventHubs.Core.TransportProducer.CreateBatchAsync(Azure.Messaging.EventHubs.Producer.CreateBatchOptions,System.Threading.CancellationToken)" />
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportProducer.ReadInitializationPublishingPropertiesAsync(System.Threading.CancellationToken)">
             <summary>
               Reads the set of partition publishing properties active for this producer at the time it was initialized.
             </summary>
            
             <param name="cancellationToken">The cancellation token to consider when creating the link.</param>
            
             <returns>The set of <see cref="T:Azure.Messaging.EventHubs.Producer.PartitionPublishingProperties" /> observed when the producer was initialized.</returns>
            
             <remarks>
               It is important to note that these properties are a snapshot of the service state at the time when the
               producer was initialized; they do not necessarily represent the current state of the service.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportProducer.CloseAsync(System.Threading.CancellationToken)">
             <summary>
               Closes the connection to the transport producer instance.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.TransportProducerFeatures">
             <summary>
               The set of special transport features specific to a <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducer" /> which
               require opting-into.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.Core.TransportProducerFeatures.None">
            <summary>No transport features were requested.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Core.TransportProducerFeatures.IdempotentPublishing">
            <summary>The idempotent publishing feature is requested.</summary>
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.TransportProducerPool">
             <summary>
               A pool of <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducer" /> instances that automatically expire after a period of inactivity.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.TransportProducerPool.EventHubProducer">
             <summary>
               An abstracted Event Hub transport-specific producer that is associated with the
               Event Hub gateway rather than a specific partition; intended to perform delegated operations.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportProducerPool.#ctor(System.Func{System.String,Azure.Messaging.EventHubs.Core.TransportProducer},System.Collections.Concurrent.ConcurrentDictionary{System.String,Azure.Messaging.EventHubs.Core.TransportProducerPool.PoolItem},System.Nullable{System.TimeSpan},Azure.Messaging.EventHubs.Core.TransportProducer)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducerPool" /> class.
             </summary>
            
             <param name="transportProducerFactory">A factory method for spawning a <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducer" /> for a given partition.</param>
             <param name="pool">The pool of <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducerPool.PoolItem" /> that is going to be used to store the partition specific <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducer" />.</param>
             <param name="performExpirationPeriod">The period after which <see cref="M:Azure.Messaging.EventHubs.Core.TransportProducerPool.CreateExpirationTimerCallback" /> is run. Overrides <see cref="F:Azure.Messaging.EventHubs.Core.TransportProducerPool.DefaultPerformExpirationPeriod" />.</param>
             <param name="eventHubProducer">An abstracted Event Hub transport-specific producer that is associated with the Event Hub gateway rather than a specific partition.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportProducerPool.#ctor">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducerPool" /> class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportProducerPool.GetPooledProducer(System.String,System.Nullable{System.TimeSpan})">
             <summary>
               Retrieves a <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducerPool.PooledProducer" /> for the requested partition,
               creating one if needed or extending the expiration for an existing instance.
             </summary>
            
             <param name="partitionId">The unique identifier of a partition associated with the Event Hub.</param>
             <param name="removeAfterDuration">The period of inactivity after which a <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducerPool.PoolItem" /> will become eligible for eviction. Overrides <see cref="F:Azure.Messaging.EventHubs.Core.TransportProducerPool.PoolItem.DefaultRemoveAfterDuration" />.</param>
            
             <returns>A <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducerPool.PooledProducer" /> mapping to the partition id passed in as parameter.</returns>
            
             <remarks>
               There is a slight probability that the returned producer may be closed at any time
               after it is returned and the caller may want to handle that scenario.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportProducerPool.CloseAsync(System.Threading.CancellationToken)">
             <summary>
               Closes the producers in the pool and performs any cleanup necessary
               for resources used by the <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducerPool" />.
             </summary>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.TransportProducerPool.PoolItem">
             <summary>
               An item of the pool, adding tracking information to a <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducer" />.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.Core.TransportProducerPool.PoolItem.DefaultRemoveAfterDuration">
            <summary>The period of inactivity after which an item would be removed from the pool.</summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.TransportProducerPool.PoolItem.PartitionProducer">
             <summary>
               An abstracted Event Hub transport-specific <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducer" /> that is associated with a specific partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.TransportProducerPool.PoolItem.PartitionId">
             <summary>
               The unique identifier of a partition associated with the Event Hub.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.TransportProducerPool.PoolItem.ActiveInstances">
             <summary>
               A set of unique identifiers used to track which instances of a <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducerPool.PoolItem" /> are active.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.TransportProducerPool.PoolItem.RemoveAfter">
             <summary>
               The UTC date and time when a <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducerPool.PoolItem" /> will become eligible for eviction.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportProducerPool.PoolItem.ExtendRemoveAfter(System.Nullable{System.TimeSpan})">
             <summary>
               Extends the UTC date and time when <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducerPool.PoolItem" /> will become eligible for eviction.
             </summary>
            
             <param name="removeAfterDuration">The period of inactivity after which a <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducerPool.PoolItem" /> will become eligible for eviction.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportProducerPool.PoolItem.#ctor(System.String,Azure.Messaging.EventHubs.Core.TransportProducer,System.Nullable{System.TimeSpan},System.Nullable{System.DateTimeOffset})">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducerPool.PoolItem" /> class with a default timespan of <see cref="F:Azure.Messaging.EventHubs.Core.TransportProducerPool.PoolItem.DefaultRemoveAfterDuration" />.
             </summary>
            
             <param name="partitionId">The unique identifier of a partition associated with the Event Hub.</param>
             <param name="partitionProducer">An Event Hub transport-specific producer specific to a given partition.</param>
             <param name="removeAfterDuration">The interval after which a <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducerPool.PoolItem" /> will become eligible for eviction. Overrides <see cref="F:Azure.Messaging.EventHubs.Core.TransportProducerPool.PoolItem.DefaultRemoveAfterDuration" />.</param>
             <param name="removeAfter">The UTC date and time when a <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducerPool.PoolItem" /> will become eligible for eviction.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.TransportProducerPool.PooledProducer">
             <summary>
               A class wrapping a <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducer" />, triggering a clean-up when the object is disposed.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.TransportProducerPool.PooledProducer.TransportProducer">
             <summary>
               An abstracted Event Hub transport-specific producer that is associated with the
               Event Hub gateway or a specific partition.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportProducerPool.PooledProducer.#ctor(Azure.Messaging.EventHubs.Core.TransportProducer,System.Func{Azure.Messaging.EventHubs.Core.TransportProducer,System.Threading.Tasks.Task})">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducerPool.PooledProducer" /> class.
             </summary>
            
             <param name="transportProducer">An abstracted Event Hub transport-specific producer that is associated with the Event Hub gateway or a specific partition.</param>
             <param name="cleanUp">The function responsible of cleaning up the resources in use.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportProducerPool.PooledProducer.DisposeAsync">
             <summary>
               Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducerPool.PooledProducer" />.
             </summary>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.TransportTypeExtensions">
             <summary>
               The set of extension methods for the <see cref="T:Azure.Messaging.EventHubs.EventHubsTransportType" /> enumeration.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportTypeExtensions.GetUriScheme(Azure.Messaging.EventHubs.EventHubsTransportType)">
             <summary>
               Determines the URI scheme to be used for the given connection type.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
            
             <returns>The scheme that should be used for the given connection type when forming an associated URI.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TransportTypeExtensions.IsWebSocketTransport(Azure.Messaging.EventHubs.EventHubsTransportType)">
             <summary>
               Determines whether the specified transport makes use of web sockets.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
            
             <returns><c>true</c> if the transport uses web sockets; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.BasicRetryPolicy">
             <summary>
               The default retry policy for the Event Hubs client library, respecting the
               configuration specified as a set of <see cref="T:Azure.Messaging.EventHubs.EventHubsRetryOptions" />.
             </summary>
            
             <seealso cref="T:Azure.Messaging.EventHubs.EventHubsRetryOptions" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.BasicRetryPolicy.Options">
             <summary>
               The set of options responsible for configuring the retry
               behavior.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.BasicRetryPolicy.JitterFactor">
             <summary>
               The factor to apply to the base delay for use as a base jitter value.
             </summary>
            
             <value>This factor is used as the basis for random jitter to apply to the calculated retry duration.</value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.BasicRetryPolicy.MinimumThrottleSeconds">
             <summary>
               The minimum number of seconds to increase the calculated retry duration when a
               service signals a request to throttle.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.BasicRetryPolicy.MaximumThrottleSeconds">
             <summary>
               The maximum number of seconds to increase the calculated retry duration when a
               service signals a request to throttle.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.BasicRetryPolicy.#ctor(Azure.Messaging.EventHubs.EventHubsRetryOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Core.BasicRetryPolicy" /> class.
             </summary>
            
             <param name="retryOptions">The options which control the retry approach.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.BasicRetryPolicy.CalculateTryTimeout(System.Int32)">
             <summary>
               Calculates the amount of time to allow the current attempt for an operation to
               complete before considering it to be timed out.
             </summary>
            
             <param name="attemptCount">The number of total attempts that have been made, including the initial attempt before any retries.</param>
            
             <returns>The amount of time to allow for an operation to complete.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.BasicRetryPolicy.CalculateRetryDelay(System.Exception,System.Int32)">
             <summary>
               Calculates the amount of time to wait before another attempt should be made.
             </summary>
            
             <param name="lastException">The last exception that was observed for the operation to be retried.</param>
             <param name="attemptCount">The number of total attempts that have been made, including the initial attempt before any retries.</param>
            
             <returns>The amount of time to delay before retrying the associated operation; if <c>null</c>, then the operation is no longer eligible to be retried.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.CancellationTokenExtensions">
             <summary>
               The set of extensions for the <see cref="T:System.Threading.CancellationToken" />
               struct.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.CancellationTokenExtensions.ThrowIfCancellationRequested``1(System.Threading.CancellationToken)">
             <summary>
               Throws an exception of the requested type if cancellation has been requested
               of the <paramref name="instance" />.
             </summary>
            
             <typeparam name="T">The type of exception to throw; the type must have a parameterless constructor.</typeparam>
            
             <param name="instance">The instance that this method was invoked on.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.EventHubConnectionOptionsExtensions">
             <summary>
               The set of extension methods for the <see cref="T:Azure.Messaging.EventHubs.EventHubConnectionOptions" />
               class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.EventHubConnectionOptionsExtensions.Clone(Azure.Messaging.EventHubs.EventHubConnectionOptions)">
             <summary>
               Creates a new copy of the current <see cref="T:Azure.Messaging.EventHubs.EventHubConnectionOptions" />, cloning its attributes into a new instance.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
            
             <returns>A new copy of <see cref="T:Azure.Messaging.EventHubs.EventHubConnectionOptions" />.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.EventHubsExceptionExtensions">
             <summary>
               The set of extension methods for the <see cref="T:Azure.Messaging.EventHubs.EventHubsException" /> class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.EventHubsExceptionExtensions.GetFailureData``1(Azure.Messaging.EventHubs.EventHubsException)">
             <summary>
               Gets the data value related to the exception <see cref="T:Azure.Messaging.EventHubs.EventHubsException.FailureReason" />.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
            
             <returns>The Data value or null.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.EventHubsExceptionExtensions.GetFailureOperation(Azure.Messaging.EventHubs.EventHubsException)">
             <summary>
               Gets the failed operation name related to the exception.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
            
             <returns>The failed operation name.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.EventHubsExceptionExtensions.SetFailureData``1(Azure.Messaging.EventHubs.EventHubsException,``0)">
             <summary>
               Sets the data value related to the exception.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
             <param name="data">The value to store in the Exception Data.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.EventHubsExceptionExtensions.SetFailureOperation(Azure.Messaging.EventHubs.EventHubsException,System.String)">
             <summary>
               Sets the failed operation name related to the exception.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
             <param name="operationName">The failed operation name.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.EventHubsRetryOptionsExtensions">
             <summary>
               The set of extension methods for the <see cref="T:Azure.Messaging.EventHubs.EventHubsRetryOptions" />
               class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.EventHubsRetryOptionsExtensions.Clone(Azure.Messaging.EventHubs.EventHubsRetryOptions)">
             <summary>
               Creates a new copy of the current <see cref="T:Azure.Messaging.EventHubs.EventHubsRetryOptions" />, cloning its attributes into a new instance.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
            
             <returns>A new copy of <see cref="T:Azure.Messaging.EventHubs.EventHubsRetryOptions" />.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.EventHubsRetryOptionsExtensions.ToRetryPolicy(Azure.Messaging.EventHubs.EventHubsRetryOptions)">
             <summary>
               Converts the options into a retry policy for use.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
            
             <returns>The <see cref="T:Azure.Messaging.EventHubs.EventHubsRetryPolicy" /> represented by the options.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.EventHubsRetryOptionsExtensions.IsEquivalentTo(Azure.Messaging.EventHubs.EventHubsRetryOptions,Azure.Messaging.EventHubs.EventHubsRetryOptions)">
             <summary>
               Compares retry options between two instances to determine if the
               instances represent the same set of options.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
             <param name="other">The other set of retry options to consider.</param>
            
             <returns><c>true</c>, if the two sets of options are structurally equivalent; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.TimeSpanExtensions">
             <summary>
               The set of extensions for the <see cref="T:System.TimeSpan" />
               class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TimeSpanExtensions.CalculateRemaining(System.TimeSpan,System.TimeSpan)">
             <summary>
               Calculates the duration remaining in a given period, with consideration to
               the amount of time that has already elapsed.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
             <param name="elapsed">The amount of time that has already elapsed.</param>
            
             <returns>The amount of time remaining in the time period.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.DeveloperCodeException">
             <summary>
               Serves an marker for an exception occurring within developer-provided code, such as
               event handlers.  Such exceptions are typically intended to be explicitly not handled by
               the infrastructure of the various Event Hubs types.
             </summary>
            
             <seealso cref="T:System.Exception" />
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.DeveloperCodeException.#ctor(System.Exception)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.DeveloperCodeException" /> class.
             </summary>
            
             <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource">
             <summary>
               Serves as an ETW event source for logging of information about the
               Event Hubs client types.
             </summary>
            
             <remarks>
               When defining Start/Stop tasks, it is highly recommended that the
               the StopEvent.Id must be exactly StartEvent.Id + 1.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.Log">
             <summary>
               Provides a singleton instance of the event source for callers to
               use for logging.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.#ctor">
             <summary>
               Prevents an instance of the <see cref="T:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource" /> class from being created
               outside the scope of the <see cref="P:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.Log" /> instance.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventHubClientCreateStart(System.String,System.String)">
             <summary>
               Indicates that an <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" /> is being created.
             </summary>
            
             <param name="eventHubsNamespace">The Event Hubs namespace associated with the client.</param>
             <param name="eventHubName">The name of the Event Hub associated with the client.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventHubClientCreateComplete(System.String,System.String)">
             <summary>
               Indicates that an <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" /> was created.
             </summary>
            
             <param name="eventHubsNamespace">The Event Hubs namespace associated with the client.</param>
             <param name="eventHubName">The name of the Event Hub associated with the client.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventPublishStart(System.String,System.String,System.String)">
             <summary>
               Indicates that the publishing of events has started.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub being published to.</param>
             <param name="partitionIdOrKey">The identifier of a partition or the partition hash key used for publishing; identifier or key.</param>
             <param name="operationId">An artificial identifier for the publishing operation.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventPublishComplete(System.String,System.String,System.String,System.Int32)">
             <summary>
               Indicates that the publishing of events has completed.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub being published to.</param>
             <param name="partitionIdOrKey">The identifier of a partition or the partition hash key used for publishing; identifier or key.</param>
             <param name="operationId">An artificial identifier for the publishing operation.</param>
             <param name="retryCount">The number of retries that were used for service communication.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventPublishError(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an exception was encountered while publishing events.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub being published to.</param>
             <param name="partitionIdOrKey">The identifier of a partition or the partition hash key used for publishing; identifier or key.</param>
             <param name="operationId">An artificial identifier for the publishing operation.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventReceiveStart(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that the receiving of events has started.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub being received from.</param>
             <param name="consumerGroup">The consumer group associated with the receive operation.</param>
             <param name="partitionId">The identifier of the partition events are being received from.</param>
             <param name="operationId">An artificial identifier for the publishing operation.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventReceiveComplete(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
             <summary>
               Indicates that the receiving of events has completed.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub being received from.</param>
             <param name="partitionId">The identifier of the partition events are being received from.</param>
             <param name="consumerGroup">The consumer group associated with the receive operation.</param>
             <param name="operationId">An artificial identifier for the publishing operation.</param>
             <param name="retryCount">The number of retries that were used for service communication.</param>
             <param name="eventCount">The number of events that were received in the batch.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventReceiveError(System.String,System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an exception was encountered while receiving events.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub being received from.</param>
             <param name="partitionId">The identifier of the partition events are being received from.</param>
             <param name="consumerGroup">The consumer group associated with the receive operation.</param>
             <param name="operationId">An artificial identifier for the publishing operation.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.ClientCloseStart(System.String,System.String,System.String)">
             <summary>
               Indicates that a client is closing, which may correspond to an <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" />,
               <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" />, <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" />, or <c>EventProcessorClient</c>.
             </summary>
            
             <param name="clientTypeName">The name of the type of client being closed.</param>
             <param name="eventHubName">The name of the Event Hub associated with the client.</param>
             <param name="clientId">An identifier to associate with the client.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.ClientCloseComplete(System.String,System.String,System.String)">
             <summary>
               Indicates that a client has been closed, which may correspond to an <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" />,
               <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" />, <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" />, or <c>EventProcessorClient</c>.
             </summary>
            
             <param name="clientTypeName">The name of the type of client being closed.</param>
             <param name="eventHubName">The name of the Event Hub associated with the client.</param>
             <param name="clientId">An identifier to associate with the client.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.ClientCloseError(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an exception was encountered while closing an <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" />,
               <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" />, <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" />, or <c>EventProcessorClient</c>.
             </summary>
            
             <param name="clientTypeName">The name of the type of client being closed.</param>
             <param name="eventHubName">The name of the Event Hub associated with the client.</param>
             <param name="clientId">An identifier to associate with the client.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.GetPropertiesStart(System.String)">
             <summary>
               Indicates that retrieval of the Event Hub properties has started.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub that properties are being retrieved for.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.GetPropertiesComplete(System.String)">
             <summary>
               Indicates that retrieval of the Event Hub properties has completed.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub that properties are being retrieved for.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.GetPropertiesError(System.String,System.String)">
             <summary>
               Indicates that an exception was encountered while retrieving Event Hub properties.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub that properties are being retrieved for.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.GetPartitionPropertiesStart(System.String,System.String)">
             <summary>
               Indicates that retrieval of the Event Hub partition properties has started.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub that properties are being retrieved for.</param>
             <param name="partitionId">The identifier of the partition that properties are being retrieved for.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.GetPartitionPropertiesComplete(System.String,System.String)">
             <summary>
               Indicates that retrieval of the Event Hub partition properties has completed.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub that properties are being retrieved for.</param>
             <param name="partitionId">The identifier of the partition that properties are being retrieved for.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.GetPartitionPropertiesError(System.String,System.String,System.String)">
             <summary>
               Indicates that an exception was encountered while retrieving Event Hub partition properties.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub that properties are being retrieved for.</param>
             <param name="partitionId">The identifier of the partition that properties are being retrieved for.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.PublishPartitionEventsToChannelStart(System.String,System.String)">
             <summary>
               Indicates that reading events from an Event Hub partition has started.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub that events are being read from.</param>
             <param name="partitionId">The identifier of the partition that properties are being read from.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.PublishPartitionEventsToChannelComplete(System.String,System.String)">
             <summary>
               Indicates that reading events from an Event Hub partition has completed.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub that events are being read from.</param>
             <param name="partitionId">The identifier of the partition that properties are being read from.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.PublishPartitionEventsToChannelError(System.String,System.String,System.String)">
             <summary>
               Indicates that an exception was encountered while reading events from an Event Hub partition.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub that events are being read from.</param>
             <param name="partitionId">The identifier of the partition that properties are being read from.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.ReadEventsFromPartitionStart(System.String,System.String)">
             <summary>
               Indicates that reading events from an Event Hub partition has started.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub that events are being read from.</param>
             <param name="partitionId">The identifier of the partition that properties are being read from.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.ReadEventsFromPartitionComplete(System.String,System.String)">
             <summary>
               Indicates that reading events from an Event Hub partition has completed.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub that events are being read from.</param>
             <param name="partitionId">The identifier of the partition that properties are being read from.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.ReadEventsFromPartitionError(System.String,System.String,System.String)">
             <summary>
               Indicates that an exception was encountered while reading events from an Event Hub partition.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub that events are being read from.</param>
             <param name="partitionId">The identifier of the partition that properties are being read from.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.ReadAllEventsStart(System.String)">
             <summary>
               Indicates that reading events from all partitions of the Event Hub has started.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub that events are being read from.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.ReadAllEventsComplete(System.String)">
             <summary>
               Indicates that reading events from all partitions of the Event Hub has completed.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub that events are being read from.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.ReadAllEventsError(System.String,System.String)">
             <summary>
               Indicates that an exception was encountered while reading events from all partitions of the Event Hub.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub that events are being read from.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.AmqpLinkAuthorizationRefreshStart(System.String,System.String)">
             <summary>
               Indicates that refreshing authorization for an AMQP link has started.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub that the link is associated with.</param>
             <param name="endpoint">The service endpoint that the link is bound to for communication.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.AmqpLinkAuthorizationRefreshComplete(System.String,System.String)">
             <summary>
               Indicates that refreshing authorization for an AMQP link has completed.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub that the link is associated with.</param>
             <param name="endpoint">The service endpoint that the link is bound to for communication.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.AmqpLinkAuthorizationRefreshError(System.String,System.String,System.String)">
             <summary>
               Indicates that an exception was encountered while refreshing authorization for an AMQP link has started.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub that the link is associated with.</param>
             <param name="endpoint">The service endpoint that the link is bound to for communication.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventProcessorStart(System.String,System.String,System.String)">
             <summary>
               Indicates that an <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> instance is about to begin processing events.
             </summary>
            
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventProcessorStartComplete(System.String,System.String,System.String)">
             <summary>
               Indicates that an <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> instance is about to begin processing events.
             </summary>
            
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventProcessorStartError(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> instance has encountered an exception while starting to process events.
             </summary>
            
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventProcessorStop(System.String,System.String,System.String)">
             <summary>
               Indicates that an <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> instance is beginning to stop processing events.
             </summary>
            
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventProcessorStopComplete(System.String,System.String,System.String)">
             <summary>
               Indicates that an <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> instance has been stopped and is no longer processing events.
             </summary>
            
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventProcessorStopError(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> instance has encountered an exception while stopping.
             </summary>
            
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventProcessorTaskError(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> instance has encountered an error during processing or load balancing.
             </summary>
            
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventProcessorPartitionProcessingStart(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> instance has taken ownership of a partition and is beginning to process it.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition whose processing is starting.</param>
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventProcessorPartitionProcessingStartError(System.String,System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> instance has experienced an exception while starting processing for a partition.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition whose processing is starting.</param>
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventProcessorPartitionProcessingStartComplete(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> instance has taken ownership of a partition and is actively processing it.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition whose processing is starting.</param>
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventProcessorPartitionProcessingStop(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> instance has lost ownership of a partition and is beginning to stop processing it.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition whose processing is stopping.</param>
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventProcessorPartitionProcessingStopError(System.String,System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> instance has experienced an exception while stopping processing for a partition.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition whose processing is stopping.</param>
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventProcessorPartitionProcessingStopComplete(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> instance has finished stopping processing for a partition, and it is now no longer running.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition whose processing is stopping.</param>
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventProcessorPartitionProcessingError(System.String,System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> instance has experienced an exception while processing events for a partition.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition whose processing is taking place.</param>
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventProcessorLoadBalancingError(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> instance has experienced an exception while performing load balancing.
             </summary>
            
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.EventProcessorClaimOwnershipError(System.String,System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> instance has experienced an exception while attempting to claim ownership of a partition.
             </summary>
            
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
             <param name="partitionId">The identifier of the partition for which the attempt to claim ownership failed.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.IdempotentPublishStart(System.String,System.String)">
             <summary>
               Indicates that the idempotent publishing of events has started.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub being published to.</param>
             <param name="partitionId">The identifier of a partition used for idempotent publishing.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.IdempotentSynchronizationAcquire(System.String,System.String)">
             <summary>
               Indicates that the idempotent publishing of events has acquired the synchronization primitive.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub being published to.</param>
             <param name="partitionId">The identifier of a partition used for idempotent publishing.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.IdempotentSynchronizationRelease(System.String,System.String)">
             <summary>
               Indicates that the idempotent publishing of events has released the synchronization primitive.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub being published to.</param>
             <param name="partitionId">The identifier of a partition used for idempotent publishing.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.IdempotentSequencePublish(System.String,System.String,System.Int64,System.Int64)">
             <summary>
               Indicates that the idempotent publishing of events has released the synchronization primitive.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub being published to.</param>
             <param name="partitionId">The identifier of a partition used for idempotent publishing.</param>
             <param name="startSequenceNumber">The starting sequence number used for publishing.</param>
             <param name="endSequenceNumber">The ending sequence number of partition state used for publishing.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.IdempotentSequenceUpdate(System.String,System.String,System.Int64,System.Int64)">
             <summary>
               Indicates that the idempotent publishing of events has released the synchronization primitive.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub being published to.</param>
             <param name="partitionId">The identifier of a partition used for idempotent publishing.</param>
             <param name="oldSequenceNumber">The sequence number of partition state before the update.</param>
             <param name="newSequenceNumber">The sequence number of partition state after the update.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.IdempotentPublishComplete(System.String,System.String)">
             <summary>
               Indicates that the idempotent publishing of events has completed.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub being published to.</param>
             <param name="partitionId">The identifier of a partition used for idempotent publishing.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.IdempotentPublishError(System.String,System.String,System.String)">
             <summary>
               Indicates that an exception was encountered while idempotent publishing events.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub being published to.</param>
             <param name="partitionId">The identifier of a partition used for idempotent publishing.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.IdempotentPublishInitializeState(System.String,System.String,System.Int64,System.Int16,System.Int64)">
             <summary>
               Indicates that the idempotent publishing state for a partition has been initialized.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub being published to.</param>
             <param name="partitionId">The identifier of a partition used for idempotent publishing.</param>
             <param name="producerGroupId">The identifier of the producer group associated with the partition.</param>
             <param name="ownerLevel">The owner level associated with the partition.</param>
             <param name="lastPublishedSequence">The sequence number last published to the partition for the producer group.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource.UnexpectedException(System.String)">
             <summary>
               Indicates that an exception was encountered in an unexpected code path, not directly associated with
               an Event Hubs operation.
             </summary>
            
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty">
             <summary>
               The set of well-known properties associated with Event Hubs diagnostics.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.DiagnosticIdAttribute">
            <summary>The attribute which represents a unique identifier for the diagnostics context.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.ServiceContextAttribute">
            <summary>The attribute which represents the Azure service to associate with diagnostics information.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.EventHubAttribute">
            <summary>The attribute which represents the Event Hub instance to associate with diagnostics information.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.EndpointAttribute">
            <summary>The attribute which represents the fully-qualified endpoint address of the Event Hubs namespace to associate with diagnostics information.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.EnqueuedTimeAttribute">
            <summary>The attribute which represents the UNIX Epoch enqueued time of an event to associate with diagnostics information.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.EventHubsServiceContext">
            <summary>The value which identifies the Event Hubs diagnostics context.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.EventHubProducerType">
            <summary>The value which identifies an Event Hub producer as the type associated with the diagnostics information.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.KindAttribute">
            <summary>The attribute which represents the kind of diagnostic scope.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.ProducerKind">
            <summary>The value which identifies the message instrumentation scope kind.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.ClientKind">
            <summary>The value which identifies the message client scope kind.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.ConsumerKind">
            <summary>The value which identifies the processor scope kind.</summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.EventActivityName">
             <summary>
               The activity name associated with events.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.ProducerActivityName">
             <summary>
               The activity name associated with Event Hub producers.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.EventProcessorProcessingActivityName">
             <summary>
               The activity name associated with EventProcessor processing a list of events.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.EventProcessorCheckpointActivityName">
             <summary>
               The activity name associated with EventProcessor creating a checkpoint.
             </summary>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Diagnostics.EventDataInstrumentation">
             <summary>
               Enables diagnostics instrumentation to be applied to <see cref="T:Azure.Messaging.EventHubs.EventData" />
               instances.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.EventDataInstrumentation.DiagnosticNamespace">
            <summary>The namespace used for the Event Hubs diagnostic scope.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.EventDataInstrumentation.ResourceProviderNamespace">
            <summary>The namespace used for the Azure Resource Manager provider namespace.</summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Diagnostics.EventDataInstrumentation.ScopeFactory">
             <summary>
               The client diagnostics instance responsible for managing scope.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventDataInstrumentation.InstrumentEvent(Azure.Messaging.EventHubs.EventData,System.String,System.String)">
             <summary>
               Applies diagnostics instrumentation to a given event.
             </summary>
            
             <param name="eventData">The event to instrument.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to use for instrumentation.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the event with.</param>
            
             <returns><c>true</c> if the event was instrumented in response to this request; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventDataInstrumentation.TryExtractDiagnosticId(Azure.Messaging.EventHubs.EventData,System.String@)">
             <summary>
               Extracts a diagnostic id from the given event.
             </summary>
            
             <param name="eventData">The event to instrument.</param>
             <param name="id">The value of the diagnostics identifier assigned to the event. </param>
            
             <returns><c>true</c> if the event was contained the diagnostic id; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.EventDataInstrumentation.ResetEvent(Azure.Messaging.EventHubs.EventData)">
             <summary>
               Resets the instrumentation associated with a given event.
             </summary>
            
             <param name="eventData">The event to reset.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource">
             <summary>
               Serves as an ETW event source for logging of information about Partition Load Balancer.
             </summary>
            
             <remarks>
               When defining Start/Stop tasks, it is highly recommended that the
               the StopEvent.Id must be exactly StartEvent.Id + 1.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.Log">
             <summary>
               Provides a singleton instance of the event source for callers to
               use for logging.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.#ctor">
             <summary>
               Prevents an instance of the <see cref="T:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource" /> class from being created
               outside the scope of this library.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.MinimumPartitionsPerEventProcessor(System.Int32)">
             <summary>
               Indicates the minimum amount of partitions every event processor needs to own when the distribution is balanced.
             </summary>
            
             <param name="count"> Minimum partitions per event processor.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.CurrentOwnershipCount(System.Int32,System.String)">
             <summary>
               Indicates the current ownership count.
             </summary>
            
             <param name="identifier">A unique name used to identify the associated event processor.</param>
             <param name="count"> Current ownership count.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.UnclaimedPartitions(System.Collections.Generic.HashSet{System.String})">
             <summary>
               Indicates the list of unclaimed partitions.
             </summary>
            
             <param name="unclaimedPartitions">List of unclaimed partitions.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.ClaimOwnershipStart(System.String)">
             <summary>
               Indicates that an attempt to claim ownership for a specific partition has started.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition whose ownership claim attempt is starting.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.ClaimOwnershipError(System.String,System.String)">
             <summary>
               Indicates that an exception was encountered while claiming ownership for a specific partition.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.ShouldStealPartition(System.String)">
             <summary>
               Indicates that the load is unbalanced and the associated event processor should own more partitions.
             </summary>
            
             <param name="identifier">A unique name used to identify the associated event processor.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.StealPartition(System.String)">
             <summary>
               Indicates that stealable partitions were found, so randomly picking one of them to claim.
             </summary>
            
             <param name="identifier">A unique name used to identify the associated event processor.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.RenewOwnershipStart(System.String)">
             <summary>
               Indicates that an attempt to renew ownership has started, so they don't expire.
             </summary>
            
             <param name="identifier">A unique name used to identify the associated event processor.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.RenewOwnershipError(System.String,System.String)">
             <summary>
               Indicates that an exception was encountered while renewing ownership.
             </summary>
            
             <param name="identifier">A unique name used to identify the associated event processor.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.RenewOwnershipComplete(System.String)">
             <summary>
               Indicates that an attempt to renew ownership has completed, so they don't expire.
             </summary>
            
             <param name="identifier">A unique name used to identify the associated event processor.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.EventData">
             <summary>
               A set of data encapsulating an event and the associated metadata for
               use with Event Hubs operations.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventData.EventBody">
             <summary>
               The data associated with the event, in <see cref="T:System.BinaryData" /> form, providing support
               for a variety of data transformations and <see cref="T:Azure.Core.Serialization.ObjectSerializer" /> integration.
             </summary>
            
             <remarks>
               <para>If the means for deserializing the raw data is not apparent to consumers, a
               common technique is to make use of <see cref="P:Azure.Messaging.EventHubs.EventData.Properties" /> to associate serialization hints
               as an aid to consumers who wish to deserialize the binary data.</para>
             </remarks>
            
             <seealso cref="T:System.BinaryData" />
             <seealso cref="P:Azure.Messaging.EventHubs.EventData.Properties" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventData.Properties">
             <summary>
               The set of free-form event properties which may be used for passing metadata associated with the event body
               during Event Hubs operations.
             </summary>
            
             <remarks>
               A common use case for <see cref="P:Azure.Messaging.EventHubs.EventData.Properties" /> is to associate serialization hints for the <see cref="P:Azure.Messaging.EventHubs.EventData.EventBody" />
               as an aid to consumers who wish to deserialize the binary data.
             </remarks>
            
             <example>
               <code>
                 var eventData = new EventData(serializedTelemetryData);
                 eventData.Properties["eventType"] = "com.microsoft.Azure.monitoring.EtlEvent";
               </code>
             </example>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventData.SystemProperties">
             <summary>
               The set of free-form event properties which were provided by the Event Hubs service to pass metadata associated with the
               event or associated Event Hubs operation.
             </summary>
            
             <remarks>
               These properties are only populated for events received from the Event Hubs service.  The set is otherwise
               empty.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventData.PublishedSequenceNumber">
             <summary>
               The publishing sequence number assigned to the event at the time it was successfully published.
             </summary>
            
             <value>
               The sequence number that was assigned during publishing, if the event was successfully
               published by a sequence-aware producer.  If the producer was not configured to apply
               sequence numbering or if the event has not yet been successfully published, this member
               will be <c>null</c>.
             </value>
            
             <remarks>
               The published sequence number is only populated and relevant when certain features
               of the producer are enabled.  For example, it is used by idempotent publishing.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventData.SequenceNumber">
             <summary>
               The sequence number assigned to the event when it was enqueued in the associated Event Hub partition.
             </summary>
            
             <remarks>
               This property is only populated for events received from the Event Hubs service. If this
               EventData was not received from the Event Hubs service, the value is <see cref="F:System.Int64.MinValue" />.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventData.Offset">
             <summary>
               The offset of the event when it was received from the associated Event Hub partition.
             </summary>
            
             <remarks>
               This property is only populated for events received from the Event Hubs service. If this
               EventData was not received from the Event Hubs service, the value is <see cref="F:System.Int64.MinValue" />.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventData.EnqueuedTime">
             <summary>
               The date and time, in UTC, of when the event was enqueued in the Event Hub partition.
             </summary>
            
             <remarks>
               This property is only populated for events received from the Event Hubs service. If this
               EventData was not received from the Event Hubs service, the value <c>default(DateTimeOffset)</c>.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventData.PartitionKey">
             <summary>
               The partition hashing key applied to the batch that the associated <see cref="T:Azure.Messaging.EventHubs.EventData" />, was published with.
             </summary>
            
             <remarks>
               This property is only populated for events received from the Event Hubs service.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventData.Body">
             <summary>
               The data associated with the event.
             </summary>
            
             <remarks>
               This member exists only to preserve backward compatibility.  It is recommended to
               prefer the <see cref="P:Azure.Messaging.EventHubs.EventData.EventBody" /> where possible in order to take advantage of
               additional functionality and improved usability for common scenarios.
             </remarks>
            
             <seealso cref="P:Azure.Messaging.EventHubs.EventData.EventBody" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventData.BodyAsStream">
             <summary>
               The data associated with the event, in stream form.
             </summary>
            
             <value>
               A <see cref="T:System.IO.Stream" /> containing the raw data representing the <see cref="P:Azure.Messaging.EventHubs.EventData.EventBody" />
               of the event.  The caller is assumed to have ownership of the stream, including responsibility
               for managing its lifespan and ensuring proper disposal.
             </value>
            
             <remarks>
               This member exists only to preserve backward compatibility.  It is recommended to
               prefer the <see cref="P:Azure.Messaging.EventHubs.EventData.EventBody" /> where possible in order to take advantage of
               additional functionality and improved usability for common scenarios.
             </remarks>
            
             <seealso cref="M:System.BinaryData.ToStream" />
             <seealso cref="P:Azure.Messaging.EventHubs.EventData.EventBody" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventData.HasProperties">
             <summary>
               Indicates whether this instance has a populated set of <see cref="P:Azure.Messaging.EventHubs.EventData.Properties" />
               or not, to avoid triggering lazy allocation by checking the property itself.
             </summary>
            
             <value><c>true</c> if this instance has properties; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventData.LastPartitionSequenceNumber">
             <summary>
               The sequence number of the event that was last enqueued into the Event Hub partition from which this
               event was received.
             </summary>
            
             <remarks>
               This property is only populated for events received using an reader specifying
               <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.TrackLastEnqueuedEventProperties" /> as enabled.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventData.LastPartitionOffset">
             <summary>
               The offset of the event that was last enqueued into the Event Hub partition from which this event was
               received.
             </summary>
            
             <remarks>
               This property is only populated for events received using an reader specifying
               <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.TrackLastEnqueuedEventProperties" /> as enabled.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventData.LastPartitionEnqueuedTime">
             <summary>
               The date and time, in UTC, that the last event was enqueued into the Event Hub partition from
               which this event was received.
             </summary>
            
             <remarks>
               This property is only populated for events received using an reader specifying
               <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.TrackLastEnqueuedEventProperties" /> as enabled.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventData.LastPartitionPropertiesRetrievalTime">
             <summary>
               The date and time, in UTC, that the last event information for the Event Hub partition was retrieved
               from the Event Hubs service.
             </summary>
            
             <remarks>
               This property is only populated for events received using an reader specifying
               <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.TrackLastEnqueuedEventProperties" /> as enabled.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventData.PendingPublishSequenceNumber">
             <summary>
               The publishing sequence number assigned to the event as part of a publishing operation.
             </summary>
            
             <value>
               This member is only populated while a publishing operation is taking place; once the
               operation has completed, successfully or not, the value is cleared.
             </value>
            
             <remarks>
               The published sequence number is only populated and relevant when certain features
               of the producer are enabled.  For example, it is used by idempotent publishing.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventData.PendingProducerGroupId">
             <summary>
               The producer group identifier assigned to the event as part of a publishing operation.
             </summary>
            
             <value>
               This member is only populated while a publishing operation is taking place; once the
               operation has completed, successfully or not, the value is cleared.
             </value>
            
             <remarks>
               The producer group identifier is only populated and relevant when certain features
               of the producer are enabled.  For example, it is used by idempotent publishing.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventData.PendingProducerOwnerLevel">
             <summary>
               The producer owner level assigned to the event as part of a publishing operation.
             </summary>
            
             <value>
               This member is only populated while a publishing operation is taking place; once the
               operation has completed, successfully or not, the value is cleared.
             </value>
            
             <remarks>
               The producer group identifier is only populated and relevant when certain features
               of the producer are enabled.  For example, it is used by idempotent publishing.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventData.#ctor(System.BinaryData)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventData" /> class.
             </summary>
            
             <param name="eventBody">The raw data as binary to use as the body of the event.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventData.#ctor(System.ReadOnlyMemory{System.Byte})">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventData" /> class.
             </summary>
            
             <param name="eventBody">The raw data to use as the body of the event.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventData.#ctor(System.ReadOnlyMemory{System.Byte},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Int64,System.Int64,System.DateTimeOffset,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int16})">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventData" /> class.
             </summary>
            
             <param name="eventBody">The raw data to use as the body of the event.</param>
             <param name="properties">The set of free-form event properties to send with the event.</param>
             <param name="systemProperties">The set of system properties received from the Event Hubs service.</param>
             <param name="sequenceNumber">The sequence number assigned to the event when it was enqueued in the associated Event Hub partition.</param>
             <param name="offset">The offset of the event when it was received from the associated Event Hub partition.</param>
             <param name="enqueuedTime">The date and time, in UTC, of when the event was enqueued in the Event Hub partition.</param>
             <param name="partitionKey">The partition hashing key applied to the batch that the associated <see cref="T:Azure.Messaging.EventHubs.EventData" />, was sent with.</param>
             <param name="lastPartitionSequenceNumber">The sequence number that was last enqueued into the Event Hub partition.</param>
             <param name="lastPartitionOffset">The offset that was last enqueued into the Event Hub partition.</param>
             <param name="lastPartitionEnqueuedTime">The date and time, in UTC, of the event that was last enqueued into the Event Hub partition.</param>
             <param name="lastPartitionPropertiesRetrievalTime">The date and time, in UTC, that the last event information for the Event Hub partition was retrieved from the service.</param>
             <param name="publishedSequenceNumber">The publishing sequence number assigned to the event at the time it was successfully published.</param>
             <param name="pendingPublishSequenceNumber">The publishing sequence number assigned to the event as part of a publishing operation.</param>
             <param name="pendingProducerGroupId">The producer group identifier assigned to the event as part of a publishing operation.</param>
             <param name="pendingOwnerLevel">The producer owner level assigned to the event as part of a publishing operation.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventData.#ctor(System.BinaryData,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Int64,System.Int64,System.DateTimeOffset,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int16})">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventData" /> class.
             </summary>
            
             <param name="eventBody">The raw data as binary to use as the body of the event.</param>
             <param name="properties">The set of free-form event properties to send with the event.</param>
             <param name="systemProperties">The set of system properties received from the Event Hubs service.</param>
             <param name="sequenceNumber">The sequence number assigned to the event when it was enqueued in the associated Event Hub partition.</param>
             <param name="offset">The offset of the event when it was received from the associated Event Hub partition.</param>
             <param name="enqueuedTime">The date and time, in UTC, of when the event was enqueued in the Event Hub partition.</param>
             <param name="partitionKey">The partition hashing key applied to the batch that the associated <see cref="T:Azure.Messaging.EventHubs.EventData" />, was sent with.</param>
             <param name="lastPartitionSequenceNumber">The sequence number that was last enqueued into the Event Hub partition.</param>
             <param name="lastPartitionOffset">The offset that was last enqueued into the Event Hub partition.</param>
             <param name="lastPartitionEnqueuedTime">The date and time, in UTC, of the event that was last enqueued into the Event Hub partition.</param>
             <param name="lastPartitionPropertiesRetrievalTime">The date and time, in UTC, that the last event information for the Event Hub partition was retrieved from the service.</param>
             <param name="publishedSequenceNumber">The publishing sequence number assigned to the event at the time it was successfully published.</param>
             <param name="pendingPublishSequenceNumber">The publishing sequence number assigned to the event as part of a publishing operation.</param>
             <param name="pendingProducerGroupId">The producer group identifier assigned to the event as part of a publishing operation.</param>
             <param name="pendingOwnerLevel">The producer owner level assigned to the event as part of a publishing operation.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventData.#ctor(System.BinaryData,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Int64,System.Int64,System.DateTimeOffset,System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventData" /> class.
             </summary>
            
             <param name="eventBody">The raw data to use as the body of the event.</param>
             <param name="properties">The set of free-form event properties to send with the event.</param>
             <param name="systemProperties">The set of system properties received from the Event Hubs service.</param>
             <param name="sequenceNumber">The sequence number assigned to the event when it was enqueued in the associated Event Hub partition.</param>
             <param name="offset">The offset of the event when it was received from the associated Event Hub partition.</param>
             <param name="enqueuedTime">The date and time, in UTC, of when the event was enqueued in the Event Hub partition.</param>
             <param name="partitionKey">The partition hashing key associated with the event when it was published.</param>
            
             <remarks>
               <para>This constructor has been superseded by the <see cref="M:Azure.Messaging.EventHubs.EventHubsModelFactory.EventData(System.BinaryData,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String,System.Int64,System.Int64,System.DateTimeOffset)" /> factory method.
               It is strongly recommended that the model factory be preferred over use of this constructor.</para>
            
               <para>This overload was previously intended for mocking in support of testing efforts.  It is recommended that
               it not be used in production scenarios, as it allows setting of data that is broker-owned and is only
               meaningful on events that have been read from the Event Hubs service.</para>
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventData.#ctor(System.ReadOnlyMemory{System.Byte},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Int64,System.Int64,System.DateTimeOffset,System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventData" /> class.
             </summary>
            
             <param name="eventBody">The raw data to use as the body of the event.</param>
             <param name="properties">The set of free-form event properties to send with the event.</param>
             <param name="systemProperties">The set of system properties received from the Event Hubs service.</param>
             <param name="sequenceNumber">The sequence number assigned to the event when it was enqueued in the associated Event Hub partition.</param>
             <param name="offset">The offset of the event when it was received from the associated Event Hub partition.</param>
             <param name="enqueuedTime">The date and time, in UTC, of when the event was enqueued in the Event Hub partition.</param>
             <param name="partitionKey">The partition hashing key associated with the event when it was published.</param>
            
             <remarks>
               <para>This constructor has been superseded by the <see cref="M:Azure.Messaging.EventHubs.EventHubsModelFactory.EventData(System.BinaryData,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String,System.Int64,System.Int64,System.DateTimeOffset)" /> factory method.
               It is strongly recommended that the model factory be preferred over use of this constructor.</para>
            
               <para>This overload was previously intended for mocking in support of testing efforts.  It is recommended that
               it not be used in production scenarios, as it allows setting of data that is broker-owned and is only
               meaningful on events that have been read from the Event Hubs service.</para>
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventData.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventData.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventData.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventData.CommitPublishingState">
             <summary>
               Transitions the pending state to its permanent form.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventData.ClearPublishingState">
             <summary>
               Clears the pending publishing state.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventData.Clone">
             <summary>
               Creates a new copy of the current <see cref="T:Azure.Messaging.EventHubs.EventData" />, cloning its attributes into a new instance.
             </summary>
            
             <returns>A new copy of <see cref="T:Azure.Messaging.EventHubs.EventData" />.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.EventHubConnection">
             <summary>
               A connection to the Azure Event Hubs service, enabling client communications with a specific
               Event Hub instance within an Event Hubs namespace.  A single connection may be shared among multiple
               Event Hub producers and/or consumers, or may be used as a dedicated connection for a single
               producer or consumer client.
             </summary>
            
             <seealso href="https://docs.microsoft.com/en-us/Azure/event-hubs/event-hubs-about">About Azure Event Hubs</seealso>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubConnection.FullyQualifiedNamespace">
             <summary>
               The fully qualified Event Hubs namespace that the connection is associated with.  This is likely
               to be similar to <c>{yournamespace}.servicebus.windows.net</c>.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubConnection.EventHubName">
             <summary>
               The name of the Event Hub that the connection is associated with, specific to the
               Event Hubs namespace that contains it.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubConnection.IsClosed">
             <summary>
               Indicates whether or not this <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" /> has been closed.
             </summary>
            
             <value>
               <c>true</c> if the connection is closed; otherwise, <c>false</c>.
             </value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubConnection.ServiceEndpoint">
             <summary>
               The endpoint for the Event Hubs service to which the connection is associated.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnection.#ctor(System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" /> class.
             </summary>
            
             <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the Event Hub name and the shared key properties are contained in this connection string.</param>
            
             <remarks>
               If the connection string is copied from the Event Hubs namespace, it will likely not contain the name of the desired Event Hub,
               which is needed.  In this case, the name can be added manually by adding ";EntityPath=[[ EVENT HUB NAME ]]" to the end of the
               connection string.  For example, ";EntityPath=telemetry-hub".
            
               If you have defined a shared access policy directly on the Event Hub itself, then copying the connection string from that
               Event Hub will result in a connection string that contains the name.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnection.#ctor(System.String,Azure.Messaging.EventHubs.EventHubConnectionOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" /> class.
             </summary>
            
             <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the Event Hub name and the shared key properties are contained in this connection string.</param>
             <param name="connectionOptions">A set of options to apply when configuring the connection.</param>
            
             <remarks>
               If the connection string is copied from the Event Hubs namespace, it will likely not contain the name of the desired Event Hub,
               which is needed.  In this case, the name can be added manually by adding ";EntityPath=[[ EVENT HUB NAME ]]" to the end of the
               connection string.  For example, ";EntityPath=telemetry-hub".
            
               If you have defined a shared access policy directly on the Event Hub itself, then copying the connection string from that
               Event Hub will result in a connection string that contains the name.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnection.#ctor(System.String,System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" /> class.
             </summary>
            
             <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the shared key properties are contained in this connection string, but not the Event Hub name.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the connection with.</param>
            
             <remarks>
               If the connection string is copied from the Event Hub itself, it will contain the name of the desired Event Hub,
               and can be used directly without passing the <paramref name="eventHubName" />.  The name of the Event Hub should be
               passed only once, either as part of the connection string or separately.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnection.#ctor(System.String,System.String,Azure.Messaging.EventHubs.EventHubConnectionOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" /> class.
             </summary>
            
             <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the shared key properties are contained in this connection string, but not the Event Hub name.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the connection with.</param>
             <param name="connectionOptions">A set of options to apply when configuring the connection.</param>
            
             <remarks>
               If the connection string is copied from the Event Hub itself, it will contain the name of the desired Event Hub,
               and can be used directly without passing the <paramref name="eventHubName" />.  The name of the Event Hub should be
               passed only once, either as part of the connection string or separately.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnection.#ctor(System.String,System.String,Azure.AzureNamedKeyCredential,Azure.Messaging.EventHubs.EventHubConnectionOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" /> class.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the connection with.</param>
             <param name="credential">The <see cref="T:Azure.AzureNamedKeyCredential" /> to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
             <param name="connectionOptions">A set of options to apply when configuring the connection.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnection.#ctor(System.String,System.String,Azure.AzureSasCredential,Azure.Messaging.EventHubs.EventHubConnectionOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" /> class.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the connection with.</param>
             <param name="credential">The <see cref="T:Azure.AzureSasCredential" /> to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
             <param name="connectionOptions">A set of options to apply when configuring the connection.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnection.#ctor(System.String,System.String,Azure.Core.TokenCredential,Azure.Messaging.EventHubs.EventHubConnectionOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" /> class.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the connection with.</param>
             <param name="credential">The Azure managed identity credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
             <param name="connectionOptions">A set of options to apply when configuring the connection.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnection.#ctor">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" /> class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnection.CloseAsync(System.Threading.CancellationToken)">
             <summary>
               Closes the connection to the Event Hubs namespace and associated Event Hub.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnection.DisposeAsync">
             <summary>
               Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" />,
               including ensuring that the connection itself has been closed.
             </summary>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnection.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnection.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnection.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnection.GetPropertiesAsync(Azure.Messaging.EventHubs.EventHubsRetryPolicy,System.Threading.CancellationToken)">
             <summary>
               Retrieves information about the Event Hub that the connection is associated with, including
               the number of partitions present and their identifiers.
             </summary>
            
             <param name="retryPolicy">The retry policy to use as the basis for retrieving the information.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The set of information for the Event Hub that this connection is associated with.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnection.GetPartitionIdsAsync(Azure.Messaging.EventHubs.EventHubsRetryPolicy,System.Threading.CancellationToken)">
             <summary>
               Retrieves the set of identifiers for the partitions of an Event Hub.
             </summary>
            
             <param name="retryPolicy">The retry policy to use as the basis for retrieving the information.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The set of identifiers for the partitions within the Event Hub that this connection is associated with.</returns>
            
             <remarks>
               This method is synonymous with invoking <see cref="M:Azure.Messaging.EventHubs.EventHubConnection.GetPropertiesAsync(Azure.Messaging.EventHubs.EventHubsRetryPolicy,System.Threading.CancellationToken)" /> and reading the <see cref="P:Azure.Messaging.EventHubs.EventHubProperties.PartitionIds" />
               property that is returned. It is offered as a convenience for quick access to the set of partition identifiers for the associated Event Hub.
               No new or extended information is presented.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnection.GetPartitionPropertiesAsync(System.String,Azure.Messaging.EventHubs.EventHubsRetryPolicy,System.Threading.CancellationToken)">
             <summary>
               Retrieves information about a specific partition for an Event Hub, including elements that describe the available
               events in the partition event stream.
             </summary>
            
             <param name="partitionId">The unique identifier of a partition associated with the Event Hub.</param>
             <param name="retryPolicy">The retry policy to use as the basis for retrieving the information.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The set of information for the requested partition under the Event Hub this connection is associated with.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnection.CreateTransportProducer(System.String,Azure.Messaging.EventHubs.Core.TransportProducerFeatures,Azure.Messaging.EventHubs.Producer.PartitionPublishingOptions,Azure.Messaging.EventHubs.EventHubsRetryPolicy)">
             <summary>
               Creates a producer strongly aligned with the active protocol and transport,
               responsible for publishing <see cref="T:Azure.Messaging.EventHubs.EventData" /> to the Event Hub.
             </summary>
            
             <param name="partitionId">The identifier of the partition to which the transport producer should be bound; if <c>null</c>, the producer is unbound.</param>
             <param name="requestedFeatures">The flags specifying the set of special transport features that should be opted-into.</param>
             <param name="partitionOptions">The set of options, if any, that should be considered when initializing the producer.</param>
             <param name="retryPolicy">The policy which governs retry behavior and try timeouts.</param>
            
             <returns>A <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducer" /> configured in the requested manner.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnection.CreateTransportConsumer(System.String,System.String,Azure.Messaging.EventHubs.Consumer.EventPosition,Azure.Messaging.EventHubs.EventHubsRetryPolicy,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.UInt32},System.Nullable{System.Int64})">
             <summary>
               Creates a consumer strongly aligned with the active protocol and transport, responsible
               for reading <see cref="T:Azure.Messaging.EventHubs.EventData" /> from a specific Event Hub partition, in the context
               of a specific consumer group.
            
               A consumer may be exclusive, which asserts ownership over the partition for the consumer
               group to ensure that only one consumer from that group is reading the from the partition.
               These exclusive consumers are sometimes referred to as "Epoch Consumers."
            
               A consumer may also be non-exclusive, allowing multiple consumers from the same consumer
               group to be actively reading events from the partition.  These non-exclusive consumers are
               sometimes referred to as "Non-epoch Consumers."
            
               Designating a consumer as exclusive may be specified by setting the <paramref name="ownerLevel" />.
               When <c>null</c>, consumers are created as non-exclusive.
             </summary>
            
             <param name="consumerGroup">The name of the consumer group this consumer is associated with.  Events are read in the context of this group.</param>
             <param name="partitionId">The identifier of the Event Hub partition from which events will be received.</param>
             <param name="eventPosition">The position within the partition where the consumer should begin reading events.</param>
             <param name="retryPolicy">The policy which governs retry behavior and try timeouts.</param>
             <param name="trackLastEnqueuedEventProperties">Indicates whether information on the last enqueued event on the partition is sent as events are received.</param>
             <param name="ownerLevel">The relative priority to associate with the link; for a non-exclusive link, this value should be <c>null</c>.</param>
             <param name="prefetchCount">Controls the number of events received and queued locally without regard to whether an operation was requested.  If <c>null</c> a default will be used.</param>
             <param name="prefetchSizeInBytes">The cache size of the prefetch queue. When set, the link makes a best effort to ensure prefetched messages fit into the specified size.</param>
            
             <returns>A <see cref="T:Azure.Messaging.EventHubs.Core.TransportConsumer" /> configured in the requested manner.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnection.CreateTransportClient(System.String,System.String,Azure.Messaging.EventHubs.Authorization.EventHubTokenCredential,Azure.Messaging.EventHubs.EventHubConnectionOptions)">
             <summary>
               Builds an Event Hub client specific to the protocol and transport specified by the
               requested connection type of the <paramref name="options" />.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of a specific Event Hub.</param>
             <param name="credential">The Azure managed identity credential to use for authorization.</param>
             <param name="options">The set of options to use for the client.</param>
            
             <returns>A client generalization specific to the specified protocol/transport to which operations may be delegated.</returns>
            
             <remarks>
               As an internal method, only basic sanity checks are performed against arguments.  It is
               assumed that callers are trusted and have performed deep validation.
            
               Parameters passed are also assumed to be owned by thee transport client and safe to mutate or dispose;
               creation of clones or otherwise protecting the parameters is assumed to be the purview of the caller.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnection.CreateWithCredential``1(System.String,System.String,``0,Azure.Messaging.EventHubs.EventHubConnectionOptions)">
             <summary>
               Creates an <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" /> based on the provided options and credential.
             </summary>
            
             <typeparam name="TCredential">The type of credential being used.</typeparam>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the producer with.</param>
             <param name="credential">The credential to use for authorization.  This may be of type <see cref="T:Azure.Core.TokenCredential" />, <see cref="T:Azure.AzureSasCredential" />, or <see cref="T:Azure.AzureNamedKeyCredential" />.</param>
             <param name="options">A set of options to apply when configuring the connection.</param>
            
             <returns>The connection that was created.</returns>
            
             <remarks>
               Ownership of the connection is transferred to the caller.  The caller holds responsibility
               for closing the connection and other cleanup activities.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnection.BuildConnectionSignatureAuthorizationResource(Azure.Messaging.EventHubs.EventHubsTransportType,System.String,System.String)">
             <summary>
               Builds the fully-qualified identifier for the connection, for use with signature-based authorization.
             </summary>
            
             <param name="transportType">The type of protocol and transport that will be used for communicating with the Event Hubs service.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to connect the client to.</param>
            
             <returns>The value to use as the resource for the signature.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.EventHubConnectionOptions">
             <summary>
               The set of options that can be specified when creating an <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" />
               to configure its behavior.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubConnectionOptions.TransportType">
             <summary>
               The type of protocol and transport that will be used for communicating with the Event Hubs
               service.
             </summary>
            
             <value>The default transport is AMQP over TCP.</value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubConnectionOptions.Proxy">
             <summary>
               The proxy to use for communication over web sockets.
             </summary>
            
             <remarks>
               A proxy cannot be used for communication over TCP; if web sockets are not in
               use, specifying a proxy is an invalid option.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubConnectionOptions.CustomEndpointAddress">
             <summary>
               The address to use for establishing a connection to the Event Hubs service, allowing network requests to be
               routed through any application gateways or other paths needed for the host environment.
             </summary>
            
             <value>
               This address will override the default endpoint of the Event Hubs namespace when making the network request
               to the service.  The default endpoint specified in a connection string or by a fully qualified namespace will
               still be needed to negotiate the connection with the Event Hubs service.
             </value>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnectionOptions.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnectionOptions.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubConnectionOptions.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.EventHubProperties">
             <summary>
               A set of information for an Event Hub.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubProperties.Name">
             <summary>
               The name of the Event Hub, specific to the namespace
               that contains it.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubProperties.CreatedOn">
             <summary>
               The date and time, in UTC, at which the Event Hub was created.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubProperties.PartitionIds">
             <summary>
               The set of unique identifiers for each partition in the Event Hub.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubProperties.#ctor(System.String,System.DateTimeOffset,System.String[])">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventHubProperties" /> class.
             </summary>
            
             <param name="name">The name of the Event Hub.</param>
             <param name="createdOn">The date and time at which the Event Hub was created.</param>
             <param name="partitionIds">The set of unique identifiers for each partition.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubProperties.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubProperties.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubProperties.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.EventHubsConnectionStringProperties">
             <summary>
               The set of properties that comprise an Event Hubs connection string.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubsConnectionStringProperties.FullyQualifiedNamespace">
             <summary>
               The fully qualified Event Hubs namespace that the consumer is associated with.  This is likely
               to be similar to <c>{yournamespace}.servicebus.windows.net</c>.
             </summary>
            
             <value>The namespace of the Event Hub, as derived from the endpoint address of the connection string.</value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubsConnectionStringProperties.Endpoint">
             <summary>
               The endpoint to be used for connecting to the Event Hubs namespace.
             </summary>
            
             <value>The endpoint address, including protocol, from the connection string.</value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubsConnectionStringProperties.EventHubName">
             <summary>
               The name of the specific Event Hub instance under the associated Event Hubs namespace.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubsConnectionStringProperties.SharedAccessKeyName">
             <summary>
               The name of the shared access key, either for the Event Hubs namespace
               or the Event Hub.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubsConnectionStringProperties.SharedAccessKey">
             <summary>
               The value of the shared access key, either for the Event Hubs namespace
               or the Event Hub.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubsConnectionStringProperties.SharedAccessSignature">
             <summary>
               The value of the fully-formed shared access signature, either for the Event Hubs
               namespace or the Event Hub.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsConnectionStringProperties.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsConnectionStringProperties.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsConnectionStringProperties.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsConnectionStringProperties.ToConnectionString">
             <summary>
               Creates an Event Hubs connection string based on this set of <see cref="T:Azure.Messaging.EventHubs.EventHubsConnectionStringProperties" />.
             </summary>
            
             <returns>
               A valid Event Hubs connection string; depending on the specified property information, this may
               represent the namespace-level or Event Hub-level.
             </returns>
            
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsConnectionStringProperties.Validate(System.String,System.String)">
             <summary>
               Performs the actions needed to validate the set of connection string properties for connecting to the
               Event Hubs service.
             </summary>
            
             <param name="explicitEventHubName">The name of the Event Hub that was explicitly passed independent of the connection string, allowing easier use of a namespace-level connection string.</param>
             <param name="connectionStringArgumentName">The name of the argument associated with the connection string; to be used when raising <see cref="T:System.ArgumentException" /> variants.</param>
            
             <exception cref="T:System.ArgumentException">In the case that the properties violate an invariant or otherwise represent a combination that is not permissible, an appropriate exception will be thrown.</exception>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsConnectionStringProperties.Parse(System.String)">
             <summary>
               Parses the specified Event Hubs connection string into its component properties.
             </summary>
            
             <param name="connectionString">The connection string to parse.</param>
            
             <returns>The component properties parsed from the connection string.</returns>
            
             <exception cref="T:System.FormatException">The specified connection string was malformed and could not be parsed.</exception>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.EventHubsException">
             <summary>
               Serves as a basis for exceptions produced within the Event Hubs
               context.
             </summary>
            
             <seealso cref="T:System.Exception" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubsException.IsTransient">
             <summary>
               Indicates whether an exception should be considered transient or final.
             </summary>
            
             <value><c>true</c> if the exception is likely transient; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubsException.Reason">
             <summary>
               The reason for the failure of an Event Hubs operation that resulted
               in the exception.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubsException.EventHubName">
             <summary>
               The name of the Event Hubs to which the exception is associated.
             </summary>
            
             <value>The name of the Event Hub, if available; otherwise, <c>null</c>.</value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubsException.Message">
             <summary>
               Gets a message that describes the current exception.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsException.#ctor(System.Boolean,System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventHubsException" /> class.
             </summary>
            
             <param name="isTransient"><c>true</c> if the exception should be considered transient; otherwise, <c>false</c>.</param>
             <param name="eventHubName">The name of the Event Hub to which the exception is associated.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsException.#ctor(System.Boolean,System.String,Azure.Messaging.EventHubs.EventHubsException.FailureReason)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventHubsException" /> class.
             </summary>
            
             <param name="isTransient"><c>true</c> if the exception should be considered transient; otherwise, <c>false</c>.</param>
             <param name="eventHubName">The name of the Event Hub to which the exception is associated.</param>
             <param name="reason">The reason for the failure that resulted in the exception.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsException.#ctor(System.Boolean,System.String,System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventHubsException" /> class.
             </summary>
            
             <param name="isTransient"><c>true</c> if the exception should be considered transient; otherwise, <c>false</c>.</param>
             <param name="eventHubName">The name of the Event Hub to which the exception is associated.</param>
             <param name="message">The error message that explains the reason for the exception.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsException.#ctor(System.Boolean,System.String,System.String,Azure.Messaging.EventHubs.EventHubsException.FailureReason)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventHubsException" /> class.
             </summary>
            
             <param name="isTransient"><c>true</c> if the exception should be considered transient; otherwise, <c>false</c>.</param>
             <param name="eventHubName">The name of the Event Hub to which the exception is associated.</param>
             <param name="message">The error message that explains the reason for the exception.</param>
             <param name="reason">The reason for the failure that resulted in the exception.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsException.#ctor(System.Boolean,System.String,System.String,System.Exception)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventHubsException" /> class.
             </summary>
            
             <param name="isTransient"><c>true</c> if the exception should be considered transient; otherwise, <c>false</c>.</param>
             <param name="eventHubName">The name of the Event Hub to which the exception is associated.</param>
             <param name="message">The error message that explains the reason for the exception.</param>
             <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsException.#ctor(System.Boolean,System.String,System.String,Azure.Messaging.EventHubs.EventHubsException.FailureReason,System.Exception)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventHubsException" /> class.
             </summary>
            
             <param name="isTransient"><c>true</c> if the exception should be considered transient; otherwise, <c>false</c>.</param>
             <param name="eventHubName">The name of the Event Hub to which the exception is associated.</param>
             <param name="message">The error message that explains the reason for the exception.</param>
             <param name="reason">The reason for the failure that resulted in the exception.</param>
             <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsException.#ctor(System.String,System.String,Azure.Messaging.EventHubs.EventHubsException.FailureReason)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventHubsException" /> class, using the <paramref name="reason" />
               to detect whether or not it should be transient.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub to which the exception is associated.</param>
             <param name="message">The error message that explains the reason for the exception.</param>
             <param name="reason">The reason for the failure that resulted in the exception.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsException.#ctor(System.String,System.String,Azure.Messaging.EventHubs.EventHubsException.FailureReason,System.Exception)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventHubsException" /> class, using the <paramref name="reason" />
               to detect whether or not it should be transient.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub to which the exception is associated.</param>
             <param name="message">The error message that explains the reason for the exception.</param>
             <param name="reason">The reason for the failure that resulted in the exception.</param>
             <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsException.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.EventHubsException.FailureReason">
             <summary>
               The set of well-known reasons for an Event Hubs operation failure that
               was the cause of an exception.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.EventHubsException.FailureReason.GeneralError">
            <summary>The exception was the result of a general error within the client library.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.EventHubsException.FailureReason.ClientClosed">
            <summary>An operation has been attempted using an Event Hubs client instance which has already been closed.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.EventHubsException.FailureReason.ConsumerDisconnected">
            <summary>A client was forcefully disconnected from an Event Hub instance.  This typically occurs when another consumer with higher <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.OwnerLevel" /> asserts ownership over the partition and consumer group.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.EventHubsException.FailureReason.ResourceNotFound">
            <summary>An Event Hubs resource, such as an Event Hub, consumer group, or partition cannot be found by the Event Hubs service.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.EventHubsException.FailureReason.MessageSizeExceeded">
            <summary>A message is larger than the maximum size allowed for its transport.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.EventHubsException.FailureReason.QuotaExceeded">
            <summary>The quota applied to an Event Hubs resource has been exceeded while interacting with the Azure Event Hubs service.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.EventHubsException.FailureReason.ServiceBusy">
            <summary>The Azure Event Hubs service reports that it is busy in response to a client request to perform an operation.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.EventHubsException.FailureReason.ServiceTimeout">
            <summary>An operation or other request timed out while interacting with the Azure Event Hubs service.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.EventHubsException.FailureReason.ServiceCommunicationProblem">
            <summary>There was a general communications error encountered when interacting with the Azure Event Hubs service.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.EventHubsException.FailureReason.ProducerDisconnected">
            <summary>A client was forcefully disconnected from an Event Hub instance.  This typically occurs when another consumer with higher <see cref="P:Azure.Messaging.EventHubs.Producer.PartitionPublishingOptions.OwnerLevel" /> asserts ownership over the partition and producer group.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.EventHubsException.FailureReason.InvalidClientState">
            <summary>A client is in an invalid state from which it cannot recover.  It is recommended that the client be closed and recreated to force reinitialization of state.</summary>
        </member>
        <member name="T:Azure.Messaging.EventHubs.EventHubsModelFactory">
             <summary>
               A factory for the creation of Event Hubs model types to
               assist with mocking and testing.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsModelFactory.EventHubProperties(System.String,System.DateTimeOffset,System.String[])">
             <summary>
               Initializes a new instance of the <see cref="M:Azure.Messaging.EventHubs.EventHubsModelFactory.EventHubProperties(System.String,System.DateTimeOffset,System.String[])" /> class.
             </summary>
            
             <param name="name">The name of the Event Hub.</param>
             <param name="createdOn">The date and time at which the Event Hub was created.</param>
             <param name="partitionIds">The set of unique identifiers for each partition.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsModelFactory.PartitionProperties(System.String,System.String,System.Boolean,System.Int64,System.Int64,System.Int64,System.DateTimeOffset)">
             <summary>
               Initializes a new instance of the <see cref="M:Azure.Messaging.EventHubs.EventHubsModelFactory.PartitionProperties(System.String,System.String,System.Boolean,System.Int64,System.Int64,System.Int64,System.DateTimeOffset)" /> class.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub that contains the partitions.</param>
             <param name="partitionId">The identifier of the partition.</param>
             <param name="isEmpty">Indicates whether or not the partition is currently empty.</param>
             <param name="beginningSequenceNumber">The first sequence number available for events in the partition.</param>
             <param name="lastSequenceNumber">The sequence number observed the last event to be enqueued in the partition.</param>
             <param name="lastOffset">The offset of the last event to be enqueued in the partition.</param>
             <param name="lastEnqueuedTime">The date and time, in UTC, that the last event was enqueued in the partition.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsModelFactory.PartitionPublishingProperties(System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int16},System.Nullable{System.Int32})">
             <summary>
               Initializes a new instance of the <see cref="M:Azure.Messaging.EventHubs.EventHubsModelFactory.EventHubProperties(System.String,System.DateTimeOffset,System.String[])" /> class.
             </summary>
            
             <param name="isIdempotentPublishingEnabled">Indicates whether idempotent publishing is enabled.</param>
             <param name="producerGroupId">The identifier of the producer group associated with the partition.</param>
             <param name="ownerLevel">The owner level associated with the partition.</param>
             <param name="lastPublishedSequenceNumber">The sequence number assigned to the event that was last successfully published to the partition.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsModelFactory.LastEnqueuedEventProperties(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
             <summary>
               Initializes a new instance of the <see cref="M:Azure.Messaging.EventHubs.EventHubsModelFactory.LastEnqueuedEventProperties(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" /> class.
             </summary>
            
             <param name="lastSequenceNumber">The sequence number observed the last event to be enqueued in the partition.</param>
             <param name="lastOffset">The offset of the last event to be enqueued in the partition.</param>
             <param name="lastEnqueuedTime">The date and time, in UTC, that the last event was enqueued in the partition.</param>
             <param name="lastReceivedTime">The date and time, in UTC, that the information was last received.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsModelFactory.PartitionContext(System.String,Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties)">
             <summary>
               Initializes a new instance of the <see cref="M:Azure.Messaging.EventHubs.EventHubsModelFactory.PartitionContext(System.String,Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties)" /> class.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition this context is associated with.</param>
             <param name="lastEnqueuedEventProperties">The set of properties to be returned when <see cref="M:Azure.Messaging.EventHubs.Consumer.PartitionContext.ReadLastEnqueuedEventProperties" /> is invoked.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsModelFactory.EventData(System.BinaryData,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String,System.Int64,System.Int64,System.DateTimeOffset)">
             <summary>
               Initializes a new instance of the <see cref="M:Azure.Messaging.EventHubs.EventHubsModelFactory.EventData(System.BinaryData,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String,System.Int64,System.Int64,System.DateTimeOffset)" /> class.
             </summary>
            
             <param name="eventBody">The data to use as the body of the event.</param>
             <param name="properties">The set of free-form event properties to send with the event.</param>
             <param name="systemProperties">The set of system properties that accompany events read from the Event Hubs service.</param>
             <param name="partitionKey">The partition hashing key associated with the event when it was published.</param>
             <param name="sequenceNumber">The sequence number assigned to the event when it was enqueued in the associated Event Hub partition.</param>
             <param name="offset">The offset of the event when it was received from the associated Event Hub partition.</param>
             <param name="enqueuedTime">The date and time, in UTC, of when the event was enqueued in the Event Hub partition.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsModelFactory.EventDataBatch(System.Int64,System.Collections.Generic.IList{Azure.Messaging.EventHubs.EventData},Azure.Messaging.EventHubs.Producer.CreateBatchOptions,System.Func{Azure.Messaging.EventHubs.EventData,System.Boolean})">
             <summary>
               Initializes a new instance of the <see cref="M:Azure.Messaging.EventHubs.EventHubsModelFactory.EventDataBatch(System.Int64,System.Collections.Generic.IList{Azure.Messaging.EventHubs.EventData},Azure.Messaging.EventHubs.Producer.CreateBatchOptions,System.Func{Azure.Messaging.EventHubs.EventData,System.Boolean})" /> class.
             </summary>
            
             <param name="batchSizeBytes">The size, in bytes, that the batch should report; this is a static value and will not mutate as events are added.</param>
             <param name="batchEventStore">A list to which events will be added when <see cref="M:Azure.Messaging.EventHubs.Producer.EventDataBatch.TryAdd(Azure.Messaging.EventHubs.EventData)" /> calls are successful.</param>
             <param name="batchOptions">The set of options to consider when creating this batch.</param>
             <param name="tryAddCallback">A function that will be invoked when <see cref="M:Azure.Messaging.EventHubs.Producer.EventDataBatch.TryAdd(Azure.Messaging.EventHubs.EventData)" /> is called; the return of this callback represents the result of <see cref="M:Azure.Messaging.EventHubs.Producer.EventDataBatch.TryAdd(Azure.Messaging.EventHubs.EventData)" />.  If not provided, all events will be accepted into the batch.</param>
            
             <returns>The <see cref="M:Azure.Messaging.EventHubs.EventHubsModelFactory.EventDataBatch(System.Int64,System.Collections.Generic.IList{Azure.Messaging.EventHubs.EventData},Azure.Messaging.EventHubs.Producer.CreateBatchOptions,System.Func{Azure.Messaging.EventHubs.EventData,System.Boolean})" /> instance that was created.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.EventHubsRetryMode">
             <summary>
               The type of approach to apply when calculating the delay
               between retry attempts.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.EventHubsRetryMode.Fixed">
            <summary>Retry attempts happen at fixed intervals; each delay is a consistent duration.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.EventHubsRetryMode.Exponential">
            <summary>Retry attempts will delay based on a back-off strategy, where each attempt will increase the duration that it waits before retrying.</summary>
        </member>
        <member name="T:Azure.Messaging.EventHubs.EventHubsRetryOptions">
             <summary>
                The set of options that can be specified to influence how
                retry attempts are made, and a failure is eligible to be retried.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubsRetryOptions.Mode">
             <summary>
               The approach to use for calculating retry delays.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubsRetryOptions.MaximumRetries">
             <summary>
               The maximum number of retry attempts before considering the associated operation
               to have failed.
             </summary>
            
             <value>The default retry limit is 3.</value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubsRetryOptions.Delay">
             <summary>
               The delay between retry attempts for a fixed approach or the delay
               on which to base calculations for a backoff-based approach.
             </summary>
            
             <value>The default delay is 0.8 seconds.</value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubsRetryOptions.MaximumDelay">
             <summary>
               The maximum permissible delay between retry attempts.
             </summary>
            
             <value>The default maximum delay is 60 seconds.</value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubsRetryOptions.TryTimeout">
             <summary>
               The maximum duration to wait for completion of a single attempt, whether the initial
               attempt or a retry.
             </summary>
            
             <value>The default timeout is 60 seconds.</value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventHubsRetryOptions.CustomRetryPolicy">
             <summary>
               A custom retry policy to be used in place of the individual option values.
             </summary>
            
             <remarks>
               When populated, this custom policy will take precedence over the individual retry
               options provided.
             </remarks>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.EventHubsRetryPolicy">
             <summary>
               An abstract representation of a policy to govern retrying of messaging operations.
             </summary>
            
             <remarks>
               It is recommended that developers without advanced needs not implement custom retry
               policies but instead configure the default policy by specifying the desired set of
               retry options when creating one of the Event Hubs clients.
             </remarks>
            
             <seealso cref="T:Azure.Messaging.EventHubs.EventHubsRetryOptions" />
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsRetryPolicy.CalculateTryTimeout(System.Int32)">
             <summary>
               Calculates the amount of time to allow the current attempt for an operation to
               complete before considering it to be timed out.
             </summary>
            
             <param name="attemptCount">The number of total attempts that have been made, including the initial attempt before any retries.</param>
            
             <returns>The amount of time to allow for an operation to complete.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsRetryPolicy.CalculateRetryDelay(System.Exception,System.Int32)">
             <summary>
               Calculates the amount of time to wait before another attempt should be made.
             </summary>
            
             <param name="lastException">The last exception that was observed for the operation to be retried.</param>
             <param name="attemptCount">The number of total attempts that have been made, including the initial attempt before any retries.</param>
            
             <returns>The amount of time to delay before retrying the associated operation; if <c>null</c>, then the operation is no longer eligible to be retried.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsRetryPolicy.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsRetryPolicy.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventHubsRetryPolicy.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.EventHubsTransportType">
             <summary>
               Specifies the type of protocol and transport that will be used for communicating with
               Azure Event Hubs.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.EventHubsTransportType.AmqpTcp">
            <summary>The connection uses the AMQP protocol over TCP.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.EventHubsTransportType.AmqpWebSockets">
            <summary>The connection uses the AMQP protocol over web sockets.</summary>
        </member>
        <member name="T:Azure.Messaging.EventHubs.PartitionProperties">
             <summary>
               A set of information for a single partition of an Event Hub.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.PartitionProperties.EventHubName">
             <summary>
               The name of the Event Hub where the partitions reside, specific to the
               Event Hubs namespace that contains it.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.PartitionProperties.Id">
             <summary>
               The identifier of the partition, unique to the Event Hub which contains it.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.PartitionProperties.BeginningSequenceNumber">
             <summary>
               The first sequence number available for events in the partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.PartitionProperties.LastEnqueuedSequenceNumber">
             <summary>
               The sequence number of the last observed event to be enqueued in the partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.PartitionProperties.LastEnqueuedOffset">
             <summary>
               The offset of the last observed event to be enqueued in the partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.PartitionProperties.LastEnqueuedTime">
             <summary>
               The date and time, in UTC, that the last observed event was enqueued in the partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.PartitionProperties.IsEmpty">
             <summary>
               Indicates whether or not the partition is currently empty.
             </summary>
            
             <value><c>true</c> if the partition is empty; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.PartitionProperties.#ctor(System.String,System.String,System.Boolean,System.Int64,System.Int64,System.Int64,System.DateTimeOffset)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.PartitionProperties" /> class.
             </summary>
            
             <param name="eventHubName">The name of the Event Hub that contains the partitions.</param>
             <param name="partitionId">The identifier of the partition.</param>
             <param name="isEmpty">Indicates whether or not the partition is currently empty.</param>
             <param name="beginningSequenceNumber">The first sequence number available for events in the partition.</param>
             <param name="lastSequenceNumber">The sequence number observed the last event to be enqueued in the partition.</param>
             <param name="lastOffset">The offset of the last event to be enqueued in the partition.</param>
             <param name="lastEnqueuedTime">The date and time, in UTC, that the last event was enqueued in the partition.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.PartitionProperties.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.PartitionProperties.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.PartitionProperties.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1">
             <summary>
               Provides a base for creating a custom processor for consuming events across all partitions of a given Event Hub
               within the scope of a specific consumer group.  The processor is capable of collaborating with other instances for
               the same Event Hub and consumer group pairing to share work by using a common storage platform to communicate.  Fault
               tolerance is also built-in, allowing the processor to be resilient in the face of errors.
             </summary>
            
             <typeparam name="TPartition">The context of the partition for which an operation is being performed.</typeparam>
            
             <remarks>
               The <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> is safe to cache and use for the lifetime of an application, and that is best practice when the application
               processes events regularly or semi-regularly.  The processor holds responsibility for efficient resource management, working to keep resource usage low during
               periods of inactivity and manage health during periods of higher use.  Calling either the <see cref="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.StopProcessingAsync(System.Threading.CancellationToken)" /> or <see cref="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.StopProcessing(System.Threading.CancellationToken)" />
               method when processing is complete or as the application is shutting down will ensure that network resources and other unmanaged objects are properly cleaned up.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.FullyQualifiedNamespace">
             <summary>
               The fully qualified Event Hubs namespace that the processor is associated with.  This is likely
               to be similar to <c>{yournamespace}.servicebus.windows.net</c>.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.EventHubName">
             <summary>
               The name of the Event Hub that the processor is connected to, specific to the
               Event Hubs namespace that contains it.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.ConsumerGroup">
             <summary>
               The name of the consumer group this event processor is associated with.  Events will be
               read only in the context of this group.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.Identifier">
             <summary>
               A unique name used to identify this event processor.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.IsRunning">
             <summary>
               Indicates whether or not this event processor is currently running.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.Status">
             <summary>
               Indicates the current state of the processor.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.Logger">
             <summary>
               The instance of <see cref="T:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource" /> which can be mocked for testing.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.RetryPolicy">
             <summary>
               The active policy which governs retry attempts for the processor.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.#ctor(System.Int32,System.String,System.String,System.String,Azure.Core.TokenCredential,Azure.Messaging.EventHubs.Primitives.EventProcessorOptions,Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> class.
             </summary>
            
             <param name="eventBatchMaximumCount">The desired number of events to include in a batch to be processed.  This size is the maximum count in a batch; the actual count may be smaller, depending on whether events are available in the Event Hub.</param>
             <param name="consumerGroup">The name of the consumer group the processor is associated with.  Events are read in the context of this group.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the processor with.</param>
             <param name="credential">The Azure managed identity credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
             <param name="options">The set of options to use for the processor.</param>
             <param name="loadBalancer">The load balancer to use for coordinating processing with other event processor instances.  If <c>null</c>, the standard load balancer will be created.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.#ctor(System.Int32,System.String,System.String,Azure.Messaging.EventHubs.Primitives.EventProcessorOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> class.
             </summary>
            
             <param name="eventBatchMaximumCount">The desired number of events to include in a batch to be processed.  This size is the maximum count in a batch; the actual count may be smaller, depending on whether events are available in the Event Hub.</param>
             <param name="consumerGroup">The name of the consumer group the processor is associated with.  Events are read in the context of this group.</param>
             <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the Event Hub name and the shared key properties are contained in this connection string.</param>
             <param name="options">The set of options to use for the processor.</param>
            
             <remarks>
               If the connection string is copied from the Event Hubs namespace, it will likely not contain the name of the desired Event Hub,
               which is needed.  In this case, the name can be added manually by adding ";EntityPath=[[ EVENT HUB NAME ]]" to the end of the
               connection string.  For example, ";EntityPath=telemetry-hub".
            
               If you have defined a shared access policy directly on the Event Hub itself, then copying the connection string from that
               Event Hub will result in a connection string that contains the name.
             </remarks>
            
             <seealso href="https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string">How to get an Event Hubs connection string</seealso>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.#ctor(System.Int32,System.String,System.String,System.String,Azure.Messaging.EventHubs.Primitives.EventProcessorOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> class.
             </summary>
            
             <param name="eventBatchMaximumCount">The desired number of events to include in a batch to be processed.  This size is the maximum count in a batch; the actual count may be smaller, depending on whether events are available in the Event Hub.</param>
             <param name="consumerGroup">The name of the consumer group the processor is associated with.  Events are read in the context of this group.</param>
             <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the shared key properties are contained in this connection string, but not the Event Hub name.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the processor with.</param>
             <param name="options">The set of options to use for the processor.</param>
            
             <remarks>
               If the connection string is copied from the Event Hub itself, it will contain the name of the desired Event Hub,
               and can be used directly without passing the <paramref name="eventHubName" />.  The name of the Event Hub should be
               passed only once, either as part of the connection string or separately.
             </remarks>
            
             <seealso href="https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string">How to get an Event Hubs connection string</seealso>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.#ctor(System.Int32,System.String,System.String,System.String,Azure.AzureNamedKeyCredential,Azure.Messaging.EventHubs.Primitives.EventProcessorOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> class.
             </summary>
            
             <param name="eventBatchMaximumCount">The desired number of events to include in a batch to be processed.  This size is the maximum count in a batch; the actual count may be smaller, depending on whether events are available in the Event Hub.</param>
             <param name="consumerGroup">The name of the consumer group the processor is associated with.  Events are read in the context of this group.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the processor with.</param>
             <param name="credential">The shared access key credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
             <param name="options">The set of options to use for the processor.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.#ctor(System.Int32,System.String,System.String,System.String,Azure.AzureSasCredential,Azure.Messaging.EventHubs.Primitives.EventProcessorOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> class.
             </summary>
            
             <param name="eventBatchMaximumCount">The desired number of events to include in a batch to be processed.  This size is the maximum count in a batch; the actual count may be smaller, depending on whether events are available in the Event Hub.</param>
             <param name="consumerGroup">The name of the consumer group the processor is associated with.  Events are read in the context of this group.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the processor with.</param>
             <param name="credential">The shared signature credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
             <param name="options">The set of options to use for the processor.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.#ctor(System.Int32,System.String,System.String,System.String,Azure.Core.TokenCredential,Azure.Messaging.EventHubs.Primitives.EventProcessorOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> class.
             </summary>
            
             <param name="eventBatchMaximumCount">The desired number of events to include in a batch to be processed.  This size is the maximum count in a batch; the actual count may be smaller, depending on whether events are available in the Event Hub.</param>
             <param name="consumerGroup">The name of the consumer group the processor is associated with.  Events are read in the context of this group.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the processor with.</param>
             <param name="credential">The Azure managed identity credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
             <param name="options">The set of options to use for the processor.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.#ctor">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.StartProcessingAsync(System.Threading.CancellationToken)">
             <summary>
               Signals the <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> to begin processing events.  Should this method be called while the processor
               is running, no action is taken.
             </summary>
            
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the start operation.  This won't affect the <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> once it starts running.</param>
            
             <exception cref="T:System.AggregateException">
               As the processor starts, it will attempt to detect configuration and permissions errors that would prevent it from
               being able to recover without intervention.  For example, an incorrect connection string or the inability to query the
               Event Hub would be detected.  These exceptions will be packaged as an <see cref="T:System.AggregateException" />, and will cause
               <see cref="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.StartProcessingAsync(System.Threading.CancellationToken)" /> to fail.
             </exception>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.StartProcessing(System.Threading.CancellationToken)">
             <summary>
               Signals the <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> to begin processing events.  Should this method be called while the processor
               is running, no action is taken.
             </summary>
            
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the start operation.  This won't affect the <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> once it starts running.</param>
            
             <exception cref="T:System.AggregateException">
               As the processor starts, it will attempt to detect configuration and permissions errors that would prevent it from
               being able to recover without intervention.  For example, an incorrect connection string or the inability to query the
               Event Hub would be detected.  These exceptions will be packaged as an <see cref="T:System.AggregateException" />, and will cause
               <see cref="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.StartProcessing(System.Threading.CancellationToken)" /> to fail.
             </exception>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.StopProcessingAsync(System.Threading.CancellationToken)">
             <summary>
               Signals the <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> to stop processing events.  Should this method be called while the processor
               is not running, no action is taken.
             </summary>
            
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the stop operation.  If the operation is successfully canceled, the <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> will keep running.</param>
            
             <remarks>
               When stopping, the processor will update the ownership of partitions that it was responsible for processing and clean up network resources used for communication with
               the Event Hubs service.  As a result, this method will perform network I/O and may need to wait for partition reads that were active to complete.
            
               <para>Due to service calls and network latency, an invocation of this method may take slightly longer than the specified <see cref="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.MaximumWaitTime" /> or
               if the wait time was not configured, the duration of the <see cref="P:Azure.Messaging.EventHubs.EventHubsRetryOptions.TryTimeout" /> of the configured retry policy.</para>
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.StopProcessing(System.Threading.CancellationToken)">
             <summary>
               Signals the <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> to stop processing events.  Should this method be called while the processor
               is not running, no action is taken.
             </summary>
            
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the stop operation.  If the operation is successfully canceled, the <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> will keep running.</param>
            
             <remarks>
               When stopping, the processor will update the ownership of partitions that it was responsible for processing and clean up network resources used for communication with
               the Event Hubs service.  As a result, this method will perform network I/O and may need to wait for partition reads that were active to complete.
            
               <para>Due to service calls and network latency, an invocation of this method may take slightly longer than the specified <see cref="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.MaximumWaitTime" /> or
               if the wait time was not configured, the duration of the <see cref="P:Azure.Messaging.EventHubs.EventHubsRetryOptions.TryTimeout" /> of the configured retry policy.</para>
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.CreateConsumer(System.String,System.String,Azure.Messaging.EventHubs.Consumer.EventPosition,Azure.Messaging.EventHubs.EventHubConnection,Azure.Messaging.EventHubs.Primitives.EventProcessorOptions)">
             <summary>
               Creates an <see cref="T:Azure.Messaging.EventHubs.Core.TransportConsumer" /> to use for processing.
             </summary>
            
             <param name="consumerGroup">The consumer group to associate with the consumer.</param>
             <param name="partitionId">The partition to associated with the consumer.</param>
             <param name="eventPosition">The position in the event stream where the consumer should begin reading.</param>
             <param name="connection">The connection to use for the consumer.</param>
             <param name="options">The options to use for configuring the consumer.</param>
            
             <returns>An <see cref="T:Azure.Messaging.EventHubs.Core.TransportConsumer" /> with the requested configuration.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.ProcessEventBatchAsync(`0,System.Collections.Generic.IReadOnlyList{Azure.Messaging.EventHubs.EventData},System.Boolean,System.Threading.CancellationToken)">
             <summary>
               Performs the tasks needed to process a batch of events.
             </summary>
            
             <param name="partition">The Event Hub partition whose processing should be started.</param>
             <param name="eventBatch">The batch of events to process.</param>
             <param name="dispatchEmptyBatches"><c>true</c> if empty batches should be dispatched to the handler; otherwise, <c>false</c>.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the processing.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.CreatePartitionProcessor(`0,System.Threading.CancellationTokenSource,System.Nullable{Azure.Messaging.EventHubs.Consumer.EventPosition})">
             <summary>
               Creates the infrastructure for tracking the processing of a partition and begins processing the
               partition in the background until cancellation is requested.
             </summary>
            
             <param name="partition">The Event Hub partition whose processing should be started.</param>
             <param name="cancellationSource">A <see cref="T:System.Threading.CancellationTokenSource" /> instance to signal the request to cancel the operation.</param>
             <param name="startingPositionOverride">Allows for skipping partition initialization and directly overriding the position within the event stream where processing will begin.</param>
            
             <returns>The <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.PartitionProcessor" /> encapsulating the processing task, its cancellation token, and associated state.</returns>
            
             <remarks>
               This method makes liberal use of class methods and state in addition to the received parameters.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.ValidateStartupAsync(System.Boolean,System.Threading.CancellationToken)">
             <summary>
               Performs the tasks needed to validate basic configuration and permissions of the dependencies needed for
               the processor to function.
             </summary>
            
             <param name="async">When <c>true</c>, the method will be executed asynchronously; otherwise, it will execute synchronously.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the start operation.</param>
            
             <exception cref="T:System.AggregateException">Any validation failures will result in an aggregate exception.</exception>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.CreateConnection">
             <summary>
               Creates an <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" /> to use for communicating with the Event Hubs service.
             </summary>
            
             <returns>The requested <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" />.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.ListCheckpointsAsync(System.Threading.CancellationToken)">
             <summary>
               Produces a list of the available checkpoints for the Event Hub and consumer group associated with the
               event processor instance, so that processing for a given set of partitions can be properly initialized.
               It's recommended that <see cref="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.GetCheckpointAsync(System.String,System.Threading.CancellationToken)" /> is implemented as well as <see cref="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.ListCheckpointsAsync(System.Threading.CancellationToken)" /> to achieve an optimal performance.
             </summary>
            
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the processing.  This is most likely to occur when the processor is shutting down.</param>
            
             <returns>The set of checkpoints for the processor to take into account when initializing partitions.</returns>
            
             <remarks>
               Should a partition not have a corresponding checkpoint, the <see cref="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.DefaultStartingPosition" /> will
               be used to initialize the partition for processing.
            
               In the event that a custom starting point is desired for a single partition, or each partition should start at a unique place,
               it is recommended that this method express that intent by returning checkpoints for those partitions with the desired custom
               starting location set.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.GetCheckpointAsync(System.String,System.Threading.CancellationToken)">
             <summary>
               Returns a checkpoint for the Event Hub, consumer group, and identifier of the partition associated with the
               event processor instance, so that processing for a given partition can be properly initialized.
               The default implementation calls the <see cref="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.ListCheckpointsAsync(System.Threading.CancellationToken)" /> and filters results by <see cref="P:Azure.Messaging.EventHubs.Primitives.EventProcessorCheckpoint.PartitionId" />.
               It's recommended that this method is overriden in <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> implementations to achieve an optimal performance.
             </summary>
            
             <param name="partitionId">The identifier of the partition for which to retrieve the checkpoint.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the processing.  This is most likely to occur when the processor is shutting down.</param>
            
             <returns>The checkpoint for the processor to take into account when initializing partition.</returns>
            
             <remarks>
               Should a partition not have a corresponding checkpoint, the <see cref="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.DefaultStartingPosition" /> will
               be used to initialize the partition for processing.
            
               In the event that a custom starting point is desired for a single partition, or each partition should start at a unique place,
               it is recommended that this method express that intent by returning checkpoints for those partitions with the desired custom
               starting location set.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.ListOwnershipAsync(System.Threading.CancellationToken)">
             <summary>
               Produces a list of the ownership assignments for partitions between each of the cooperating event processor
               instances for a given Event Hub and consumer group pairing.  This method is used when load balancing to allow
               the processor to discover other active collaborators and to make decisions about how to best balance work
               between them.
             </summary>
            
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the processing.  This is most likely to occur when the processor is shutting down.</param>
            
             <returns>The set of ownership records to take into account when making load balancing decisions.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.ClaimOwnershipAsync(System.Collections.Generic.IEnumerable{Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership},System.Threading.CancellationToken)">
             <summary>
               Attempts to claim ownership of the specified partitions for processing.  This method is used by
               load balancing to allow event processor instances to distribute the responsibility for processing
               partitions for a given Event Hub and consumer group pairing amongst the active event processors.
             </summary>
            
             <param name="desiredOwnership">The set of partition ownership desired by the event processor instance; this is the set of partitions that it will attempt to request responsibility for processing.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the processing.  This is most likely to occur when the processor is shutting down.</param>
            
             <returns>The set of ownership records for the partitions that were successfully claimed; this is expected to be the <paramref name="desiredOwnership" /> or a subset of those partitions.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.OnProcessingEventBatchAsync(System.Collections.Generic.IEnumerable{Azure.Messaging.EventHubs.EventData},`0,System.Threading.CancellationToken)">
             <summary>
               Performs the tasks needed to process a batch of events for a given partition as they are read from the Event Hubs service.
             </summary>
            
             <param name="events">The batch of events to be processed.</param>
             <param name="partition">The context of the partition from which the events were read.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the processing.  This is most likely to occur when the processor is shutting down.</param>
            
             <remarks>
               <para>The number of events in the <paramref name="events" /> batch may vary.  The batch will contain a number of events between zero and batch size that was
               requested when the processor was created, depending on the availability of events in the partition within the requested <see cref="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.MaximumWaitTime" />
               interval.
            
               If there are enough events available in the Event Hub partition to fill a batch of the requested size, the processor will populate the batch and dispatch it to this method
               immediately.  If there were not a sufficient number of events available in the partition to populate a full batch, the event processor will continue reading from the partition
               to reach the requested batch size until the <see cref="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.MaximumWaitTime" /> has elapsed, at which point it will return a batch containing whatever events were
               available by the end of that period.
            
               If a <see cref="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.MaximumWaitTime" /> was not requested, indicated by setting the option to <c>null</c>, the event processor will continue reading from the Event Hub
               partition until a full batch of the requested size could be populated and will not dispatch any partial batches to this method.</para>
            
               <para>Should an exception occur within the code for this method, the event processor will allow it to bubble and will not surface to the error handler or attempt to handle
               it in any way.  Developers are strongly encouraged to take exception scenarios into account and guard against them using try/catch blocks and other means as appropriate.</para>
            
               <para>It is not recommended that the state of the processor be managed directly from within this method; requesting to start or stop the processor may result in
               a deadlock scenario, especially if using the synchronous form of the call.</para>
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.OnProcessingErrorAsync(System.Exception,`0,System.String,System.Threading.CancellationToken)">
             <summary>
               Performs the tasks needed when an unexpected exception occurs within the operation of the
               event processor infrastructure.
             </summary>
            
             <param name="exception">The exception that occurred during operation of the event processor.</param>
             <param name="partition">The context of the partition associated with the error, if any; otherwise, <c>null</c>.  This may only be initialized for members of <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessorPartition" />, depending on the point at which the error occurred.</param>
             <param name="operationDescription">A short textual description of the operation during which the exception occurred; intended to be informational only.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the processing.  This is most likely to occur when the processor is shutting down.</param>
            
             <remarks>
               This error handler is invoked when there is an exception observed within the event processor itself; it is not invoked for exceptions in
               code that has been implemented to process events or other overrides and extension points that are not critical to the processor's operation.
               The event processor will make every effort to recover from exceptions and continue processing.  Should an exception that cannot be recovered
               from be encountered, the processor will attempt to forfeit ownership of all partitions that it was processing so that work may be redistributed.
            
               The exceptions surfaced to this method may be fatal or non-fatal; because the processor may not be able to accurately predict whether an
               exception was fatal or whether its state was corrupted, this method has responsibility for making the determination as to whether processing
               should be terminated or restarted.  The method may do so by calling Stop on the processor instance and then, if desired, calling Start on the processor.
            
               It is recommended that, for production scenarios, the decision be made by considering observations made by this error handler, the method invoked
               when initializing processing for a partition, and the method invoked when processing for a partition is stopped.  Many developers will also include
               data from their monitoring platforms in this decision as well.
            
               As with event processing, should an exception occur in the code for the error handler, the event processor will allow it to bubble and will not attempt to handle
               it in any way.  Developers are strongly encouraged to take exception scenarios into account and guard against them using try/catch blocks and other means as appropriate.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.OnInitializingPartitionAsync(`0,System.Threading.CancellationToken)">
             <summary>
               Performs the tasks to initialize a partition, and its associated context, for event processing.
             </summary>
            
             <param name="partition">The context of the partition being initialized.  Only the well-known members of the <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessorPartition" /> will be populated.  If a custom context is being used, the implementor of this method is responsible for initializing custom members.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the initialization.  This is most likely to occur if the partition is claimed by another event processor instance or the processor is shutting down.</param>
            
             <remarks>
               It is not recommended that the state of the processor be managed directly from within this method; requesting to start or stop the processor may result in
               a deadlock scenario, especially if using the synchronous form of the call.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.OnPartitionProcessingStoppedAsync(`0,Azure.Messaging.EventHubs.Processor.ProcessingStoppedReason,System.Threading.CancellationToken)">
             <summary>
               Performs the tasks needed when processing for a partition is being stopped.  This commonly occurs when the partition
               is claimed by another event processor instance or when the current event processor instance is shutting down.
             </summary>
            
             <param name="partition">The context of the partition for which processing is being stopped.</param>
             <param name="reason">The reason that processing is being stopped for the partition.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the processing.  This is not expected to signal under normal circumstances and will only occur if the processor encounters an unrecoverable error.</param>
            
             <remarks>
               It is not recommended that the state of the processor be managed directly from within this method; requesting to start or stop the processor may result in
               a deadlock scenario, especially if using the synchronous form of the call.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.ReadLastEnqueuedEventProperties(System.String)">
             <summary>
               A set of information about the last enqueued event of a partition, as observed by the associated EventHubs client
               associated with this context as events are received from the Event Hubs service.  This is only available if the consumer was
               created with <see cref="P:Azure.Messaging.EventHubs.Consumer.ReadEventOptions.TrackLastEnqueuedEventProperties" /> set.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition to read the properties from.</param>
            
             <returns>The set of properties for the last event that was enqueued to the partition.</returns>
            
             <remarks>
               When information about the partition's last enqueued event is being tracked, each event received from the Event Hubs
               service will carry metadata about the partition that it otherwise would not. This results in a small amount of
               additional network bandwidth consumption that is generally a favorable trade-off when considered
               against periodically making requests for partition properties using an Event Hub client.
             </remarks>
            
             <exception cref="T:System.InvalidOperationException">Occurs when this method is invoked without <see cref="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.TrackLastEnqueuedEventProperties" /> set or when the processor is not running.</exception>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.CreateStorageManager(Azure.Messaging.EventHubs.Primitives.EventProcessor{`0})">
             <summary>
               Creates a <see cref="T:Azure.Messaging.EventHubs.Primitives.StorageManager" /> to use for interacting with durable storage.
             </summary>
            
             <param name="instance">The <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> instance to associate with the storage manager.</param>
            
             <returns>A <see cref="T:Azure.Messaging.EventHubs.Primitives.StorageManager" /> with the requested configuration.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.PartitionProcessor">
             <summary>
               The set of information needed to track and manage the active processing
               of a partition.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.PartitionProcessor.ProcessingTask">
            <summary>The task that is performing the processing.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.PartitionProcessor.Partition">
            <summary>The partition that is being processed.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.PartitionProcessor.CancellationSource">
            <summary>The source token that can be used to cancel the processing for the associated <see cref="F:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.PartitionProcessor.ProcessingTask" />.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.PartitionProcessor.ReadLastEnqueuedEventProperties">
            <summary>A function that can be used to read the information about the last enqueued event of the partition.</summary>
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.PartitionProcessor.#ctor(System.Threading.Tasks.Task,`0,System.Func{Azure.Messaging.EventHubs.Consumer.LastEnqueuedEventProperties},System.Threading.CancellationTokenSource)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.PartitionProcessor" /> class.
             </summary>
            
             <param name="processingTask">The task that is performing the processing.</param>
             <param name="partition">The partition that is being processed.</param>
             <param name="readLastEnqueuedEventProperties">A function that can be used to read the information about the last enqueued event of the partition.</param>
             <param name="cancellationSource">he source token that can be used to cancel the processing.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.PartitionProcessor.Dispose">
             <summary>
               Performs tasks needed to clean-up the disposable resources used by the processor.  This method does
               not assume responsibility for signaling the cancellation source or awaiting the <see cref="F:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.PartitionProcessor.ProcessingTask" />.
             </summary>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Primitives.EventProcessorCheckpoint">
             <summary>
               Contains the information to reflect the state of event processing for a given Event Hub partition.
             </summary>
            
             <seealso cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorCheckpoint.FullyQualifiedNamespace">
             <summary>
               The fully qualified Event Hubs namespace this checkpoint is associated with.  This
               is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorCheckpoint.EventHubName">
             <summary>
               The name of the specific Event Hub this checkpoint is associated with, relative
               to the Event Hubs namespace that contains it.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorCheckpoint.ConsumerGroup">
             <summary>
               The name of the consumer group this checkpoint is associated with.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorCheckpoint.PartitionId">
             <summary>
               The identifier of the Event Hub partition this checkpoint is associated with.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorCheckpoint.StartingPosition">
             <summary>
               The starting position within the partition's event stream that this checkpoint is associated with.
             </summary>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions">
             <summary>
               The set of options that can be specified when creating an <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" />
               to configure its behavior.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.ConnectionOptions">
             <summary>
               The options used for configuring the connection to the Event Hubs service.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.RetryOptions">
             <summary>
               The set of options to use for determining whether a failed operation should be retried and,
               if so, the amount of time to wait between retry attempts.  These options also control the
               amount of time allowed for receiving event batches and other interactions with the Event Hubs service.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.MaximumWaitTime">
             <summary>
               The maximum amount of time to wait for events to become available from a given partition before emitting
               an empty batch of events.
             </summary>
            
             <value>
               If <c>null</c>, the processor will wait indefinitely for a batch of events to become available and will not
               dispatch them to be processed while waiting; otherwise, a batch will always be emitted within this interval, whether or not
               it is empty.
             </value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.PrefetchCount">
             <summary>
               The number of events that will be eagerly requested from the Event Hubs service and queued locally without regard to
               whether a read operation is currently active, intended to help maximize throughput by allowing events to be read from
               from a local cache rather than waiting on a service request.
             </summary>
            
             <value>
               The <see cref="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.PrefetchCount" /> is a control that developers can use to help tune performance for the specific
               needs of an application, given its expected size of events, throughput needs, and expected scenarios for using
               Event Hubs.
             </value>
            
             <remarks>
               The size of the prefetch count has an influence on the efficiency of reading events from the Event Hubs service.  The
               larger the size of the cache, the more efficiently service operations can be buffered in the background to
               improve throughput.  This comes at the cost of additional memory use and potentially increases network I/O.
            
               For scenarios where the size of events is small and many events are flowing through the system, requesting more
               events in a batch and using a higher <see cref="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.PrefetchCount" /> may help improve throughput.  For scenarios where
               the size of events is larger or when processing of events is expected to be a heavier and slower operation, requesting
               fewer events in a batch and using a smaller <see cref="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.PrefetchCount" /> may help manage resource use without
               incurring a non-trivial cost to throughput.
            
               Regardless of the values, it is generally recommended that the <see cref="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.PrefetchCount" /> be at least 2-3
               times as large as the number of events in a batch to allow for efficient buffering of service operations.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.PrefetchSizeInBytes">
             <summary>
               The desired number of bytes to attempt to eagerly request from the Event Hubs service and queued locally without regard to
               whether a read operation is currently active, intended to help maximize throughput by allowing events to be read from
               from a local cache rather than waiting on a service request.
             </summary>
            
             <value>
               <para>When set to <c>null</c>, the option is considered disabled; otherwise, it will be considered enabled and take
               precedence over any value specified for the <see cref="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.PrefetchCount" />The <see cref="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.PrefetchSizeInBytes" /> is an
               advanced control that developers can use to help tune performance in some scenarios; it is recommended to prefer using
               the <see cref="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.PrefetchCount" /> over this option where possible for more accurate control and more predictable throughput.</para>
            
               <para>This size should be considered a statement of intent rather than a guaranteed limit; the local cache may be larger or
               smaller than the number of bytes specified, and will always contain at least one event when the <see cref="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.PrefetchSizeInBytes" />
               is specified.  A heuristic is used to predict the average event size to use for size calculations, which should be expected to fluctuate
               as traffic passes through the system.  Consequently, the resulting resource use will fluctuate as well.</para>
             </value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.LoadBalancingUpdateInterval">
             <summary>
               The desired amount of time to allow between load balancing verification attempts.
             </summary>
            
             <value>If not specified, a load balancing interval of 10 seconds will be assumed.</value>
            
             <remarks>
               Because load balancing holds less priority than processing events, this interval
               should be considered the minimum time that will elapse between verification attempts; operations
               with higher priority may cause a minor delay longer than this interval for load balancing.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.PartitionOwnershipExpirationInterval">
             <summary>
               The desired amount of time to consider a partition owned by a specific event processor
               instance before the ownership is considered stale and the partition becomes eligible to be
               requested by another event processor that wishes to assume responsibility for processing it.
             </summary>
            
             <value>If not specified, an ownership interval of 30 seconds will be assumed.</value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.Identifier">
             <summary>
               A unique name used to identify the event processor.  If <c>null</c> or empty, a GUID will be used as the
               identifier.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.TrackLastEnqueuedEventProperties">
             <summary>
               Indicates whether or not the processor should request information on the last enqueued event on the partition
               associated with a given event, and track that information as events are received.
             </summary>
            
             <value><c>true</c> if information about a partition's last event should be requested and tracked; otherwise, <c>false</c>.</value>
            
             <remarks>
               When information about a partition's last enqueued event is being tracked, each event received from the Event Hubs
               service will carry metadata about the partition that it otherwise would not. This results in a small amount of
               additional network bandwidth consumption that is generally a favorable trade-off when considered
               against periodically making requests for partition properties using one of the Event Hub clients.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.DefaultStartingPosition">
             <summary>
               The position within a partition where the event processor should
               begin reading events when no checkpoint can be found.
             </summary>
            
             <remarks>
               In the event that a custom starting point is desired for a single partition, or each partition should start at a unique place,
               it is recommended that those values be returned by the <see cref="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.ListCheckpointsAsync(System.Threading.CancellationToken)" /> method as
               if they were previously saved checkpoints.
             </remarks>
            
             <seealso cref="M:Azure.Messaging.EventHubs.Primitives.EventProcessor`1.ListCheckpointsAsync(System.Threading.CancellationToken)" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.LoadBalancingStrategy">
             <summary>
               The strategy that an event processor will use to make decisions about
               partition ownership when performing load balancing to share work with
               other event processors.
             </summary>
            
             <seealso cref="T:Azure.Messaging.EventHubs.Processor.LoadBalancingStrategy" />
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.Clone">
             <summary>
               Creates a new copy of the current <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions" />, cloning its attributes into a new instance.
             </summary>
            
             <returns>A new copy of <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions" />.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Primitives.EventProcessorPartition">
             <summary>
               A set of contextual information about an Event Hub partition for which an
               <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> operation is being performed.
             </summary>
            
             <remarks>
               This class represents a minimalist set of information and is intended to be
               extended for scenarios which require additional context for partitions.
             </remarks>
            
             <seealso cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorPartition.PartitionId">
             <summary>
               The identifier of the partition.
             </summary>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership">
             <summary>
               The set of information for describing the status of the partition ownership between <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" />
               instances cooperating for distribution of processing for a given Event Hub.
             </summary>
            
             <seealso cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership.FullyQualifiedNamespace">
             <summary>
               The fully qualified Event Hubs namespace this ownership is associated with.  This
               is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership.EventHubName">
             <summary>
               The name of the specific Event Hub this ownership is associated with, relative
               to the Event Hubs namespace that contains it.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership.ConsumerGroup">
             <summary>
               The name of the consumer group this ownership is associated with.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership.OwnerIdentifier">
             <summary>
               The identifier of the associated <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessor`1" /> instance.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership.PartitionId">
             <summary>
               The identifier of the Event Hub partition this ownership is associated with.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership.LastModifiedTime">
             <summary>
               The date and time, in UTC, that the last update was made to this ownership.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership.Version">
             <summary>
               The version metadata needed to update this ownership.
             </summary>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Primitives.EventProcessorStatus">
             <summary>
               Represents the state of an event processor.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.Primitives.EventProcessorStatus.NotRunning">
            <summary>The processor is not running and in a good state.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Primitives.EventProcessorStatus.Running">
            <summary>The processor is running and actively processing events.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Primitives.EventProcessorStatus.Starting">
            <summary>The processor has begun its initialization, which is still in progress.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Primitives.EventProcessorStatus.Stopping">
            <summary>The processor has begun shutting down, which is still in progress.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Primitives.EventProcessorStatus.Faulted">
            <summary>The processor is not running and in a bad state; Stop must be called to reset state.</summary>
        </member>
        <member name="T:Azure.Messaging.EventHubs.Primitives.PartitionReceiver">
             <summary>
               Allows reading events from a specific partition of an Event Hub, and in the context
               of a specific consumer group, to be read with a greater level of control over
               communication with the Event Hubs service than is offered by other event consumers.
             </summary>
            
             <remarks>
               <para>It is recommended that the <c>EventProcessorClient</c> or <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" />
               be used for reading and processing events for the majority of scenarios.  The partition receiver is
               intended to enable scenarios with special needs which require more direct control.</para>
            
               <para>The <see cref="T:Azure.Messaging.EventHubs.Primitives.PartitionReceiver" /> is safe to cache and use for the lifetime of an application, and that is best practice when the application
               reads events regularly or semi-regularly.  The receiver holds responsibility for efficient resource management, working to keep resource usage low during
               periods of inactivity and manage health during periods of higher use.  Calling either the <see cref="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.CloseAsync(System.Threading.CancellationToken)" /> or <see cref="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.DisposeAsync" />
               method as the application is shutting down will ensure that network resources and other unmanaged objects are properly cleaned up.</para>
             </remarks>
            
             <seealso href="https://www.nuget.org/packages/Azure.Messaging.EventHubs.Processor">Azure.Messaging.EventHubs.Processor (NuGet)</seealso>
             <seealso cref="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsFromPartitionAsync(System.String,Azure.Messaging.EventHubs.Consumer.EventPosition,System.Threading.CancellationToken)" />
             <seealso cref="M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsFromPartitionAsync(System.String,Azure.Messaging.EventHubs.Consumer.EventPosition,Azure.Messaging.EventHubs.Consumer.ReadEventOptions,System.Threading.CancellationToken)" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.FullyQualifiedNamespace">
             <summary>
               The fully qualified Event Hubs namespace that the client is associated with.  This is likely
               to be similar to <c>{yournamespace}.servicebus.windows.net</c>.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.EventHubName">
             <summary>
               The name of the Event Hub that the client is connected to, specific to the
               Event Hubs namespace that contains it.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.ConsumerGroup">
             <summary>
               The name of the consumer group that this client is associated with.  Events will be read
               only in the context of this group.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.PartitionId">
             <summary>
               The identifier of the Event Hub partition that this client is associated with.  Events will be read
               only from this partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.InitialPosition">
             <summary>
               The position within the partition where the client begins reading events.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.IsClosed">
             <summary>
               Indicates whether or not this <see cref="T:Azure.Messaging.EventHubs.Primitives.PartitionReceiver" /> has been closed.
             </summary>
            
             <value>
               <c>true</c> if the client is closed; otherwise, <c>false</c>.
             </value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.Logger">
             <summary>
               The instance of <see cref="T:Azure.Messaging.EventHubs.Diagnostics.EventHubsEventSource" /> which can be mocked for testing.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.#ctor(System.String,System.String,Azure.Messaging.EventHubs.Consumer.EventPosition,System.String,Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.PartitionReceiver" /> class.
             </summary>
            
             <param name="consumerGroup">The name of the consumer group this client is associated with.  Events are read in the context of this group.</param>
             <param name="partitionId">The identifier of the Event Hub partition from which events will be received.</param>
             <param name="eventPosition">The position within the partition where the client should begin reading events.</param>
             <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the Event Hub name and the shared key properties are contained in this connection string.</param>
             <param name="options">A set of options to apply when configuring the client.</param>
            
             <remarks>
               If the connection string is copied from the Event Hubs namespace, it will likely not contain the name of the desired Event Hub,
               which is needed.  In this case, the name can be added manually by adding ";EntityPath=[[ EVENT HUB NAME ]]" to the end of the
               connection string.  For example, ";EntityPath=telemetry-hub".
            
               If you have defined a shared access policy directly on the Event Hub itself, then copying the connection string from that
               Event Hub will result in a connection string that contains the name.
             </remarks>
            
             <seealso href="https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string">How to get an Event Hubs connection string</seealso>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.#ctor(System.String,System.String,Azure.Messaging.EventHubs.Consumer.EventPosition,System.String,System.String,Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.PartitionReceiver" /> class.
             </summary>
            
             <param name="consumerGroup">The name of the consumer group this client is associated with.  Events are read in the context of this group.</param>
             <param name="partitionId">The identifier of the Event Hub partition from which events will be received.</param>
             <param name="eventPosition">The position within the partition where the client should begin reading events.</param>
             <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the shared key properties are contained in this connection string, but not the Event Hub name.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the client with.</param>
             <param name="options">A set of options to apply when configuring the client.</param>
            
             <remarks>
               If the connection string is copied from the Event Hub itself, it will contain the name of the desired Event Hub,
               and can be used directly without passing the <paramref name="eventHubName" />.  The name of the Event Hub should be
               passed only once, either as part of the connection string or separately.
             </remarks>
            
             <seealso href="https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string">How to get an Event Hubs connection string</seealso>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.#ctor(System.String,System.String,Azure.Messaging.EventHubs.Consumer.EventPosition,System.String,System.String,Azure.AzureNamedKeyCredential,Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.PartitionReceiver" /> class.
             </summary>
            
             <param name="consumerGroup">The name of the consumer group this client is associated with.  Events are read in the context of this group.</param>
             <param name="partitionId">The identifier of the Event Hub partition from which events will be received.</param>
             <param name="eventPosition">The position within the partition where the client should begin reading events.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the client with.</param>
             <param name="credential">The shared key credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
             <param name="options">A set of options to apply when configuring the client.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.#ctor(System.String,System.String,Azure.Messaging.EventHubs.Consumer.EventPosition,System.String,System.String,Azure.AzureSasCredential,Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.PartitionReceiver" /> class.
             </summary>
            
             <param name="consumerGroup">The name of the consumer group this client is associated with.  Events are read in the context of this group.</param>
             <param name="partitionId">The identifier of the Event Hub partition from which events will be received.</param>
             <param name="eventPosition">The position within the partition where the client should begin reading events.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the client with.</param>
             <param name="credential">The shared signature credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
             <param name="options">A set of options to apply when configuring the client.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.#ctor(System.String,System.String,Azure.Messaging.EventHubs.Consumer.EventPosition,System.String,System.String,Azure.Core.TokenCredential,Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.PartitionReceiver" /> class.
             </summary>
            
             <param name="consumerGroup">The name of the consumer group this client is associated with.  Events are read in the context of this group.</param>
             <param name="partitionId">The identifier of the Event Hub partition from which events will be received.</param>
             <param name="eventPosition">The position within the partition where the client should begin reading events.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the client with.</param>
             <param name="credential">The Azure managed identity credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
             <param name="options">A set of options to apply when configuring the client.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.#ctor(System.String,System.String,Azure.Messaging.EventHubs.Consumer.EventPosition,Azure.Messaging.EventHubs.EventHubConnection,Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.PartitionReceiver" /> class.
             </summary>
            
             <param name="consumerGroup">The name of the consumer group this client is associated with.  Events are read in the context of this group.</param>
             <param name="partitionId">The identifier of the Event Hub partition from which events will be received.</param>
             <param name="eventPosition">The position within the partition where the client should begin reading events.</param>
             <param name="connection">The <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" /> connection to use for communication with the Event Hubs service.</param>
             <param name="options">A set of options to apply when configuring the client.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.#ctor">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.PartitionReceiver" /> class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.GetPartitionPropertiesAsync(System.Threading.CancellationToken)">
             <summary>
               Retrieves information about the partition this client is associated to, including elements that describe the
               available events in the partition event stream.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The set of information for the associated partition under the Event Hub this client is associated with.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.ReadLastEnqueuedEventProperties">
             <summary>
               A set of information about the last enqueued event of the partition associated with this receiver, observed as events
               are received from the Event Hubs service.  This is only available if the receiver was created with <see cref="P:Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions.TrackLastEnqueuedEventProperties" />
               set.  Otherwise, the properties will contain default values.
             </summary>
            
             <returns>The set of properties for the last event that was enqueued to the partition.  If no events were read or tracking was not set, the properties will be returned with default values.</returns>
            
             <remarks>
               When information about the partition's last enqueued event is being tracked, each event received from the Event Hubs
               service will carry metadata about the partition that it otherwise would not. This results in a small amount of
               additional network bandwidth consumption that is generally a favorable trade-off when considered
               against periodically making requests for partition properties using an Event Hub client.
             </remarks>
            
             <exception cref="T:Azure.Messaging.EventHubs.EventHubsException">Occurs when the Event Hubs client needed to read this information is no longer available.</exception>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.ReceiveBatchAsync(System.Int32,System.Threading.CancellationToken)">
             <summary>
               Receives a batch of <see cref="T:Azure.Messaging.EventHubs.EventData" /> from the Event Hub partition this client is associated with.
             </summary>
            
             <param name="maximumEventCount">The maximum number of messages to receive in this batch.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The batch of <see cref="T:Azure.Messaging.EventHubs.EventData" /> from the Event Hub partition this client is associated with.  If no events are present, an empty enumerable is returned.</returns>
            
             <remarks>
               When events are available in the prefetch queue, they will be used to form the batch as quickly as possible without waiting for additional events from the
               Event Hubs service to try and meet the requested <paramref name="maximumEventCount" />.  When no events are available in prefetch, the receiver will wait up
               to the duration specified by the <see cref="P:Azure.Messaging.EventHubs.EventHubsRetryOptions.TryTimeout" /> in the active retry policy for events to be read from the service.  Once any
               events are available, they will be used to form the batch immediately.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.ReceiveBatchAsync(System.Int32,System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
               Receives a batch of <see cref="T:Azure.Messaging.EventHubs.EventData" /> from the Event Hub partition this client is associated with.
             </summary>
            
             <param name="maximumEventCount">The maximum number of messages to receive in this batch.</param>
             <param name="maximumWaitTime">The maximum amount of time to wait for events to become available, if no events can be read from the prefetch queue.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The batch of <see cref="T:Azure.Messaging.EventHubs.EventData" /> from the Event Hub partition this client is associated with.  If no events are present, an empty enumerable is returned.</returns>
            
             <remarks>
               When events are available in the prefetch queue, they will be used to form the batch as quickly as possible without waiting for additional events from the
               Event Hubs service to try and meet the requested <paramref name="maximumEventCount" />.  When no events are available in prefetch, the receiver will wait up
               to the <paramref name="maximumWaitTime" /> for events to be read from the service.  Once any events are available, they will be used to form the batch immediately.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.CloseAsync(System.Threading.CancellationToken)">
             <summary>
               Closes the client.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.DisposeAsync">
             <summary>
               Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.EventHubs.Primitives.PartitionReceiver" />,
               including ensuring that the client itself has been closed.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiver.CreateTransportConsumer(System.String,System.String,Azure.Messaging.EventHubs.Consumer.EventPosition,Azure.Messaging.EventHubs.EventHubsRetryPolicy,Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions)">
             <summary>
               Creates an <see cref="T:Azure.Messaging.EventHubs.Core.TransportConsumer" /> to use for reading events.
             </summary>
            
             <param name="consumerGroup">The name of the consumer group the consumer will be associated with.  Events will be read in the context of this group.</param>
             <param name="partitionId">The identifier of the Event Hub partition from which events will be received.</param>
             <param name="eventPosition">The position within the partition where the consumer should begin reading events.</param>
             <param name="retryPolicy">The policy which governs retry behavior and try timeouts.</param>
             <param name="options">A set of options to apply when configuring the consumer.</param>
            
             <returns>A <see cref="T:Azure.Messaging.EventHubs.Core.TransportConsumer" /> configured in the requested manner.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions">
             <summary>
               The set of options that can be specified when creating a <see cref="T:Azure.Messaging.EventHubs.Primitives.PartitionReceiver" />
               to configure its behavior.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions.ConnectionOptions">
             <summary>
               The options used for configuring the connection to the Event Hubs service.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions.RetryOptions">
             <summary>
               The set of options to use for determining whether a failed operation should be retried and,
               if so, the amount of time to wait between retry attempts.  These options also control the
               amount of time allowed for reading events and other interactions with the Event Hubs service.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions.DefaultMaximumReceiveWaitTime">
             <summary>
               The default amount of time to wait for the requested amount of messages when reading; if this
               period elapses before the requested amount of messages were available or read, then the set of
               messages that were read will be returned.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions.OwnerLevel">
             <summary>
               When populated, the owner level indicates that a reading is intended to be performed exclusively for events in the
               requested partition and for the associated consumer group.  To do so, reading will attempt to assert ownership
               over the partition; in the case where more than one exclusive reader attempts to assert ownership for the same
               partition/consumer group pair, the one having a larger <see cref="P:Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions.OwnerLevel" /> value will "win."
            
               When an exclusive reader is used, other readers which are non-exclusive or which have a lower owner level will either
               not be allowed to be created, if they already exist, will encounter an exception during the next attempted operation.
             </summary>
            
             <value>The relative priority to associate with an exclusive reader; for a non-exclusive reader, this value should be <c>null</c>.</value>
            
             <remarks>
               An <see cref="T:Azure.Messaging.EventHubs.EventHubsException" /> will occur if a <see cref="T:Azure.Messaging.EventHubs.Primitives.PartitionReceiver" /> is unable to read events from the
               requested Event Hub partition for the given consumer group.  In this case, the <see cref="T:Azure.Messaging.EventHubs.EventHubsException.FailureReason" />
               will be set to <see cref="F:Azure.Messaging.EventHubs.EventHubsException.FailureReason.ConsumerDisconnected" />.
             </remarks>
            
             <seealso cref="T:Azure.Messaging.EventHubs.EventHubsException" />
             <seealso cref="F:Azure.Messaging.EventHubs.EventHubsException.FailureReason.ConsumerDisconnected" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions.PrefetchCount">
             <summary>
               The number of events that will be eagerly requested from the Event Hubs service and queued locally without regard to
               whether a read operation is currently active, intended to help maximize throughput by allowing events to be read from
               from a local cache rather than waiting on a service request.
             </summary>
            
             <value>
               The <see cref="P:Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions.PrefetchCount" /> is a control that developers can use to help tune performance for the specific
               needs of an application, given its expected size of events, throughput needs, and expected scenarios for using
               Event Hubs.
             </value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions.PrefetchSizeInBytes">
             <summary>
               The desired number of bytes to attempt to eagerly request from the Event Hubs service and queued locally without regard to
               whether a read operation is currently active, intended to help maximize throughput by allowing events to be read from
               from a local cache rather than waiting on a service request.
             </summary>
            
             <value>
               <para>When set to <c>null</c>, the option is considered disabled; otherwise, it will be considered enabled and take
               precedence over any value specified for the <see cref="P:Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions.PrefetchCount" />The <see cref="P:Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions.PrefetchSizeInBytes" /> is an
               advanced control that developers can use to help tune performance in some scenarios; it is recommended to prefer using
               the <see cref="P:Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions.PrefetchCount" /> over this option where possible for more accurate control and more predictable throughput.</para>
            
               <para>This size should be considered a statement of intent rather than a guaranteed limit; the local cache may be larger or
               smaller than the number of bytes specified, and will always contain at least one event when the <see cref="P:Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions.PrefetchSizeInBytes" />
               is specified.  A heuristic is used to predict the average event size to use for size calculations, which should be expected to fluctuate
               as traffic passes through the system.  Consequently, the resulting resource use will fluctuate as well.</para>
             </value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions.TrackLastEnqueuedEventProperties">
             <summary>
               Indicates whether or not the reader should request information on the last enqueued event on the partition
               associated with a given event, and track that information as events are read.
             </summary>
            
             <value><c>true</c> if information about a partition's last event should be requested and tracked; otherwise, <c>false</c>.</value>
            
             <remarks>
               When information about a partition's last enqueued event is being tracked, each event received from the Event Hubs
               service will carry metadata about the partition that it otherwise would not. This results in a small amount of
               additional network bandwidth consumption that is generally a favorable trade-off when considered
               against periodically making requests for partition properties using one of the Event Hub clients.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions.Clone">
             <summary>
               Creates a new copy of the current <see cref="T:Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions" />, cloning its attributes into a new instance.
             </summary>
            
             <returns>A new copy of <see cref="T:Azure.Messaging.EventHubs.Primitives.PartitionReceiverOptions" />.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer">
             <summary>
               Handles all load balancing concerns for an event processor including claiming, stealing, and relinquishing ownership.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.FullyQualifiedNamespace">
             <summary>
               The fully qualified Event Hubs namespace that the processor is associated with.  This is likely
               to be similar to <c>{yournamespace}.servicebus.windows.net</c>.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.EventHubName">
             <summary>
               The name of the Event Hub that the processor is connected to, specific to the
               Event Hubs namespace that contains it.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.ConsumerGroup">
             <summary>
               The name of the consumer group this load balancer is associated with.  Events will be
               read only in the context of this group.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.OwnerIdentifier">
             <summary>
               The identifier of the EventProcessorClient that owns this load balancer.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.OwnershipExpirationInterval">
             <summary>
               The minimum amount of time for an ownership to be considered expired without further updates.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.LoadBalanceInterval">
             <summary>
               The minimum amount of time to be elapsed between two load balancing verifications.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.IsBalanced">
             <summary>
               Indicates whether the load balancer believes itself to be in a balanced state
               when considering its fair share of partitions and whether any partitions
               remain unclaimed.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.OwnedPartitionIds">
             <summary>
               The partitionIds currently owned by the associated event processor.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.Logger">
             <summary>
               The instance of <see cref="T:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource" /> which can be mocked for testing.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.#ctor(Azure.Messaging.EventHubs.Primitives.StorageManager,System.String,System.String,System.String,System.String,System.TimeSpan,System.TimeSpan)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer" /> class.
             </summary>
            
             <param name="storageManager">Responsible for creation of checkpoints and for ownership claim.</param>
             <param name="identifier">The identifier of the EventProcessorClient that owns this load balancer.</param>
             <param name="consumerGroup">The name of the consumer group this load balancer is associated with.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace that the processor is associated with.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="ownershipExpirationInterval">The minimum amount of time for an ownership to be considered expired without further updates.</param>
             <param name="loadBalancingInterval">The minimum amount of time to be elapsed between two load balancing verifications.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.#ctor">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer" /> class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.RunLoadBalancingAsync(System.String[],System.Threading.CancellationToken)">
             <summary>
               Performs load balancing between multiple EventProcessorClient instances, claiming others' partitions to enforce
               a more equal distribution when necessary.  It also manages its own partition processing tasks and ownership.
             </summary>
            
             <param name="partitionIds">The set of partitionIds available for ownership balancing.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The claimed ownership. <c>null</c> if this instance is not eligible, if no claimable ownership was found or if the claim attempt failed.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.RelinquishOwnershipAsync(System.Threading.CancellationToken)">
             <summary>
               Relinquishes this instance's ownership so they can be claimed by other processors and clears the OwnedPartitionIds.
             </summary>
            
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.GetDateTimeOffsetNow">
             <summary>
                Queries the value to use for the current date/time.  This is abstracted to allow for deterministic
                values to be used for testing.
             </summary>
            
             <returns>The current date and time, in UTC.</returns>
        </member>
        <member name="T:Azure.Messaging.EventHubs.Primitives.StorageManager">
             <summary>
               Deals with the interaction with the chosen storage service.  It's able to create checkpoints and
               list/claim ownership.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.StorageManager.ListOwnershipAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
               Retrieves a complete ownership list from the chosen storage service.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the ownership are associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the ownership are associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the ownership are associated with.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An enumerable containing all the existing ownership for the associated Event Hub and consumer group.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.StorageManager.ClaimOwnershipAsync(System.Collections.Generic.IEnumerable{Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership},System.Threading.CancellationToken)">
             <summary>
               Attempts to claim ownership of partitions for processing.
             </summary>
            
             <param name="partitionOwnership">An enumerable containing all the ownership to claim.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An enumerable containing the successfully claimed ownership instances.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.StorageManager.ListCheckpointsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
               Retrieves a complete checkpoints list from the chosen storage service.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the ownership are associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the ownership are associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the ownership are associated with.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An enumerable containing all the existing checkpoints for the associated Event Hub and consumer group.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.StorageManager.GetCheckpointAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
               Retrieves a checkpoint information from the chosen storage service. The default implementation calls <see cref="M:Azure.Messaging.EventHubs.Primitives.StorageManager.ListCheckpointsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" /> and selects a checkpoint by id.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the ownership are associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the ownership are associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the ownership are associated with.</param>
             <param name="partitionId">The identifier of the partition to read a checkpoint for.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessorCheckpoint" /> instance if a checkpoint is found for a particular partition otherwise, <code>null</code>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.StorageManager.UpdateCheckpointAsync(Azure.Messaging.EventHubs.Primitives.EventProcessorCheckpoint,Azure.Messaging.EventHubs.EventData,System.Threading.CancellationToken)">
             <summary>
               Updates the checkpoint using the given information for the associated partition and consumer group in the chosen storage service.
             </summary>
            
             <param name="checkpoint">The checkpoint containing the information to be stored.</param>
             <param name="eventData">The event to use as the basis for the checkpoint's starting position.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Processor.LoadBalancingStrategy">
             <summary>
               The strategy that an event processor will use to make decisions about
               partition ownership when performing load balancing to share work with
               other event processors.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.Processor.LoadBalancingStrategy.Balanced">
             <summary>
               An event processor will take a measured approach to requesting
               partition ownership when balancing work with other processors, slowly
               claiming partitions until a stabilized distribution is achieved.
            
               <para>When using this strategy, it may take longer for all partitions of
               an Event Hub to be owned by a processor when processing first starts, the
               number of active processors changes, or when partitions are scaled.  The
               Balanced strategy will reduce contention for a partition, ensuring that once
               it is claimed, processing will be more likely to be steady and consistent.</para>
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.Processor.LoadBalancingStrategy.Greedy">
             <summary>
               An event processor will attempt to claim ownership of its fair share of
               partitions aggressively when balancing work with other processors.
            
               <para>When using this strategy, all partitions of an Event Hub will be claimed
               quickly when processing first starts, the number of active processors changes, or
               when partitions are scaled.  The Greedy strategy is likely to cause competition for
               ownership of a given partition, causing it to see sporadic processing and some amount of
               duplicate events until balance has been reached and work is distributed equally among the
               active processors.</para>
             </summary>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Processor.PartitionClosingEventArgs">
             <summary>
               Contains information about the partition whose processing is being stopped.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Processor.PartitionClosingEventArgs.PartitionId">
             <summary>
               The identifier of the Event Hub partition this instance is associated with.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Processor.PartitionClosingEventArgs.Reason">
             <summary>
               The reason why the processing for the associated partition is being stopped.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Processor.PartitionClosingEventArgs.CancellationToken">
             <summary>
               A <see cref="P:Azure.Messaging.EventHubs.Processor.PartitionClosingEventArgs.CancellationToken" /> instance to signal the request to cancel the operation.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.PartitionClosingEventArgs.#ctor(System.String,Azure.Messaging.EventHubs.Processor.ProcessingStoppedReason,System.Threading.CancellationToken)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Processor.PartitionClosingEventArgs" /> class.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition this instance is associated with.</param>
             <param name="reason">The reason why the processing for the associated partition is being stopped.</param>
             <param name="cancellationToken">A <see cref="P:Azure.Messaging.EventHubs.Processor.PartitionClosingEventArgs.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Processor.PartitionInitializingEventArgs">
             <summary>
               Contains information about a partition that an <c>EventProcessorClient</c> will be
               processing events from.  It can also be used to specify the position within a partition
               where the associated <c>EventProcessorClient</c> should begin reading events in case
               it cannot find a checkpoint.
             </summary>
            
             <seealso href="https://www.nuget.org/packages/Azure.Messaging.EventHubs.Processor">Azure.Messaging.EventHubs.Processor (NuGet)</seealso>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Processor.PartitionInitializingEventArgs.PartitionId">
             <summary>
               The identifier of the partition whose processing is starting.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Processor.PartitionInitializingEventArgs.DefaultStartingPosition">
             <summary>
               The position within a partition where the associated <c>EventProcessorClient</c> should
               begin reading events when no checkpoint can be found.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Processor.PartitionInitializingEventArgs.CancellationToken">
             <summary>
               A <see cref="P:Azure.Messaging.EventHubs.Processor.PartitionInitializingEventArgs.CancellationToken" /> instance to signal the request to cancel the operation.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.PartitionInitializingEventArgs.#ctor(System.String,Azure.Messaging.EventHubs.Consumer.EventPosition,System.Threading.CancellationToken)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Processor.PartitionInitializingEventArgs" /> class.
             </summary>
            
             <param name="partitionId">The identifier of the partition whose processing is starting.</param>
             <param name="defaultStartingPosition">The position within a partition where the associated <c>EventProcessorClient</c> should begin reading events when no checkpoint can be found.</param>
             <param name="cancellationToken">A <see cref="P:Azure.Messaging.EventHubs.Processor.PartitionInitializingEventArgs.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Processor.ProcessErrorEventArgs">
             <summary>
               Contains information about a partition whose processing threw an exception, as well as
               the exception that has been thrown.
             </summary>
            
             <seealso href="https://www.nuget.org/packages/Azure.Messaging.EventHubs.Processor">Azure.Messaging.EventHubs.Processor (NuGet)</seealso>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Processor.ProcessErrorEventArgs.PartitionId">
             <summary>
               The identifier of the partition whose processing threw an exception.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Processor.ProcessErrorEventArgs.Operation">
             <summary>
               A short description of the operation that was being performed when the exception was thrown.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Processor.ProcessErrorEventArgs.Exception">
             <summary>
               The exception that was thrown by the <c>EventProcessorClient</c>.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Processor.ProcessErrorEventArgs.CancellationToken">
             <summary>
               A <see cref="P:Azure.Messaging.EventHubs.Processor.ProcessErrorEventArgs.CancellationToken" /> instance to signal the request to cancel the operation.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.ProcessErrorEventArgs.#ctor(System.String,System.String,System.Exception,System.Threading.CancellationToken)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Processor.ProcessErrorEventArgs" /> structure.
             </summary>
            
             <param name="partitionId">The identifier of the partition whose processing threw an exception.</param>
             <param name="operation">A short description of the operation that was being performed when the exception was thrown.</param>
             <param name="exception">The exception that was thrown by the <c>EventProcessorClient</c>.</param>
             <param name="cancellationToken">A <see cref="P:Azure.Messaging.EventHubs.Processor.ProcessErrorEventArgs.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Processor.ProcessEventArgs">
             <summary>
               Contains information about a partition that has attempted to receive an event from the Azure Event Hub
               service in an <c>EventProcessorClient</c> context, as well as the received event, if any.  It
               also provides a way of creating a checkpoint based on the information contained in the associated event.
             </summary>
            
             <seealso href="https://www.nuget.org/packages/Azure.Messaging.EventHubs.Processor">Azure.Messaging.EventHubs.Processor (NuGet)</seealso>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Processor.ProcessEventArgs.HasEvent">
             <summary>
               Indicates whether or not the arguments contain an event to be processed.  In
               the case where no event is contained, then the context and creation of
               checkpoints are also unavailable.
             </summary>
            
             <value><c>true</c> if the arguments contain an event to be processed; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Processor.ProcessEventArgs.Partition">
             <summary>
               The context of the Event Hub partition this instance is associated with.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Processor.ProcessEventArgs.Data">
             <summary>
               The received event to be processed.  Expected to be <c>null</c> if the receive call has timed out.
             </summary>
            
             <remarks>
               Ownership of this data, including the memory that holds its <see cref="P:Azure.Messaging.EventHubs.EventData.EventBody" />,
               is assumed to transfer to consumers of the <see cref="T:Azure.Messaging.EventHubs.Processor.ProcessEventArgs" />.  It may be considered
               immutable and is safe to access so long as the reference is held.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Processor.ProcessEventArgs.CancellationToken">
             <summary>
               A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.ProcessEventArgs.#ctor(Azure.Messaging.EventHubs.Consumer.PartitionContext,Azure.Messaging.EventHubs.EventData,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Processor.ProcessEventArgs" /> structure.
             </summary>
            
             <param name="partition">The context of the Event Hub partition this instance is associated with.</param>
             <param name="data">The received event to be processed.  Expected to be <c>null</c> if the receive call has timed out.</param>
             <param name="updateCheckpointImplementation">The callback to be called upon <see cref="M:Azure.Messaging.EventHubs.Processor.ProcessEventArgs.UpdateCheckpointAsync(System.Threading.CancellationToken)" /> call.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.ProcessEventArgs.UpdateCheckpointAsync(System.Threading.CancellationToken)">
             <summary>
               Updates the checkpoint for the <see cref="T:Azure.Messaging.EventHubs.Consumer.PartitionContext" /> and <see cref="T:Azure.Messaging.EventHubs.EventData" /> associated with
               this event.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <exception cref="T:System.InvalidOperationException">Occurs when <see cref="P:Azure.Messaging.EventHubs.Processor.ProcessEventArgs.Partition" /> and <see cref="P:Azure.Messaging.EventHubs.Processor.ProcessEventArgs.Data" /> are <c>null</c>.</exception>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Processor.ProcessingStoppedReason">
             <summary>
               The reason for stopping event processing for a given partition.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.Processor.ProcessingStoppedReason.Shutdown">
            <summary>A request was made to stop processing.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Processor.ProcessingStoppedReason.OwnershipLost">
            <summary>The ownership of the associated partition was lost.</summary>
        </member>
        <member name="T:Azure.Messaging.EventHubs.Producer.CreateBatchOptions">
             <summary>
               The set of options that can be specified to influence the way in which an event batch
               behaves and is sent to the Event Hubs service.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.CreateBatchOptions.MaximumSizeInBytes">
             <summary>
               The maximum size to allow for a single batch of events, in bytes.
             </summary>
            
             <value>
               The desired limit, in bytes, for the size of the associated event batch.  If <c>null</c>,
               the maximum size allowed by the active transport will be used.
             </value>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.CreateBatchOptions.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.CreateBatchOptions.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.CreateBatchOptions.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.CreateBatchOptions.Clone">
             <summary>
               Creates a new copy of the current <see cref="T:Azure.Messaging.EventHubs.Producer.CreateBatchOptions" />, cloning its attributes into a new instance.
             </summary>
            
             <returns>A new copy of <see cref="T:Azure.Messaging.EventHubs.Producer.CreateBatchOptions" />.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Producer.EventDataBatch">
             <summary>
               A set of <see cref="T:Azure.Messaging.EventHubs.EventData" /> with size constraints known up-front,
               intended to be sent to the Event Hubs service in a single operation.
               When published, the result is atomic; either all events that belong to the batch
               were successful or all have failed.  Partial success is not possible.
             </summary>
            
             <remarks>
               The operations for this class are thread-safe and will prevent changes when
               actively being published to the Event Hubs service.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.EventDataBatch.MaximumSizeInBytes">
             <summary>
               The maximum size allowed for the batch, in bytes.  This includes the events in the batch as
               well as any overhead for the batch itself when sent to the Event Hubs service.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.EventDataBatch.SizeInBytes">
             <summary>
               The size of the batch, in bytes, as it will be sent to the Event Hubs
               service.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.EventDataBatch.StartingPublishedSequenceNumber">
             <summary>
               The publishing sequence number assigned to the first event in the batch at the time
               the batch was successfully published.
             </summary>
            
             <value>
               The sequence number of the first event in the batch, if the batch was successfully
               published by a sequence-aware producer.  If the producer was not configured to apply
               sequence numbering or if the batch has not yet been successfully published, this member
               will be <c>null</c>.
             </value>
            
             <remarks>
               The starting published sequence number is only populated and relevant when certain features
               of the producer are enabled.  For example, it is used by idempotent publishing.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.EventDataBatch.Count">
             <summary>
               The count of events contained in the batch.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.EventDataBatch.SendOptions">
             <summary>
               The set of options that should be used when publishing the batch.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventDataBatch.#ctor(Azure.Messaging.EventHubs.Core.TransportEventBatch,System.String,System.String,Azure.Messaging.EventHubs.Producer.SendEventOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.EventDataBatch" /> class.
             </summary>
            
             <param name="transportBatch">The  transport-specific batch responsible for performing the batch operations.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to use for instrumentation.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the events with during instrumentation.</param>
             <param name="sendOptions">The set of options that should be used when publishing the batch.</param>
            
             <remarks>
               As an internal type, this class performs only basic sanity checks against its arguments.  It
               is assumed that callers are trusted and have performed deep validation.
            
               Any parameters passed are assumed to be owned by this instance and safe to mutate or dispose;
               creation of clones or otherwise protecting the parameters is assumed to be the purview of the
               caller.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventDataBatch.TryAdd(Azure.Messaging.EventHubs.EventData)">
             <summary>
               Attempts to add an event to the batch, ensuring that the size
               of the batch does not exceed its maximum.
             </summary>
            
             <param name="eventData">The event to attempt to add to the batch.</param>
            
             <returns><c>true</c> if the event was added; otherwise, <c>false</c>.</returns>
            
             <remarks>
               When an event is accepted into the batch, its content and state are frozen; any
               changes made to the event will not be reflected in the batch nor will any state
               transitions be reflected to the original instance.
             </remarks>
            
             <exception cref="T:System.InvalidOperationException">
               When a batch is published, it will be locked for the duration of that operation.  During this time,
               no events may be added to the batch.  Calling <c>TryAdd</c> while the batch is being published will
               result in an <see cref="T:System.InvalidOperationException" /> until publishing has completed.
             </exception>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventDataBatch.Dispose">
             <summary>
               Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.EventHubs.Producer.EventDataBatch" />.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventDataBatch.Clear">
             <summary>
               Clears the batch, removing all events and resetting the
               available size.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventDataBatch.AsEnumerable``1">
             <summary>
               Represents the batch as an enumerable set of specific representations of an event.
             </summary>
            
             <typeparam name="T">The specific event representation being requested.</typeparam>
            
             <returns>The set of events as an enumerable of the requested type.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventDataBatch.GetEventDiagnosticIdentifiers">
             <summary>
               Gets the list of diagnostic identifiers of events added to this batch.
             </summary>
            
             <returns>A read-only list of diagnostic identifiers.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventDataBatch.Lock">
             <summary>
               Locks the batch to prevent new events from being added while a service
               operation is active.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventDataBatch.Unlock">
             <summary>
               Unlocks the batch, allowing new events to be added.
             </summary>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient">
             <summary>
               A client responsible for publishing <see cref="T:Azure.Messaging.EventHubs.EventData" /> to a specific Event Hub,
               grouped together in batches.  Depending on the options specified when sending, events data
               may be automatically routed to an available partition or sent to a specifically requested partition.
             </summary>
            
             <remarks>
               <para>
                 Allowing automatic routing of partitions is recommended when:
                 <para>- The sending of events needs to be highly available.</para>
                 <para>- The event data should be evenly distributed among all available partitions.</para>
               </para>
            
               <para>
                 If no partition is specified, the following rules are used for automatically selecting one:
                 <para>1) Distribute the events equally amongst all available partitions using a round-robin approach.</para>
                 <para>2) If a partition becomes unavailable, the Event Hubs service will automatically detect it and forward the message to another available partition.</para>
               </para>
            
               <para>
                 The <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> is safe to cache and use for the lifetime of an application, and that is best practice when the application
                 publishes events regularly or semi-regularly.  The producer holds responsibility for efficient resource management, working to keep resource usage low during
                 periods of inactivity and manage health during periods of higher use.  Calling either the <see cref="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.CloseAsync(System.Threading.CancellationToken)" /> or <see cref="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.DisposeAsync" />
                 method as the application is shutting down will ensure that network resources and other unmanaged objects are properly cleaned up.
               </para>
             </remarks>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.MaximumCreateProducerAttempts">
            <summary>The maximum number of attempts that may be made to get a <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducer" /> from the pool.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.MinimumBatchSizeLimit">
            <summary>The minimum allowable size, in bytes, for a batch to be sent.</summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.FullyQualifiedNamespace">
             <summary>
               The fully qualified Event Hubs namespace that the producer is associated with.  This is likely
               to be similar to <c>{yournamespace}.servicebus.windows.net</c>.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.EventHubName">
             <summary>
               The name of the Event Hub that the producer is connected to, specific to the
               Event Hubs namespace that contains it.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.IsClosed">
             <summary>
               Indicates whether or not this <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> has been closed.
             </summary>
            
             <value>
               <c>true</c> if the client is closed; otherwise, <c>false</c>.
             </value>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.#ctor(System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> class.
             </summary>
            
             <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the Event Hub name and the shared key properties are contained in this connection string.</param>
            
             <remarks>
               If the connection string is copied from the Event Hubs namespace, it will likely not contain the name of the desired Event Hub,
               which is needed.  In this case, the name can be added manually by adding ";EntityPath=[[ EVENT HUB NAME ]]" to the end of the
               connection string.  For example, ";EntityPath=telemetry-hub".
            
               If you have defined a shared access policy directly on the Event Hub itself, then copying the connection string from that
               Event Hub will result in a connection string that contains the name.
             </remarks>
            
             <seealso href="https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string">How to get an Event Hubs connection string</seealso>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.#ctor(System.String,Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> class.
             </summary>
            
             <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the Event Hub name and the shared key properties are contained in this connection string.</param>
             <param name="clientOptions">The set of options to use for this consumer.</param>
            
             <remarks>
               If the connection string is copied from the Event Hubs namespace, it will likely not contain the name of the desired Event Hub,
               which is needed.  In this case, the name can be added manually by adding ";EntityPath=[[ EVENT HUB NAME ]]" to the end of the
               connection string.  For example, ";EntityPath=telemetry-hub".
            
               If you have defined a shared access policy directly on the Event Hub itself, then copying the connection string from that
               Event Hub will result in a connection string that contains the name.
             </remarks>
            
             <seealso href="https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string">How to get an Event Hubs connection string</seealso>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.#ctor(System.String,System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> class.
             </summary>
            
             <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the shared key properties are contained in this connection string, but not the Event Hub name.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the producer with.</param>
            
             <remarks>
               If the connection string is copied from the Event Hub itself, it will contain the name of the desired Event Hub,
               and can be used directly without passing the <paramref name="eventHubName" />.  The name of the Event Hub should be
               passed only once, either as part of the connection string or separately.
             </remarks>
            
             <seealso href="https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string">How to get an Event Hubs connection string</seealso>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.#ctor(System.String,System.String,Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> class.
             </summary>
            
             <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the shared key properties are contained in this connection string, but not the Event Hub name.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the producer with.</param>
             <param name="clientOptions">A set of options to apply when configuring the producer.</param>
            
             <remarks>
               If the connection string is copied from the Event Hub itself, it will contain the name of the desired Event Hub,
               and can be used directly without passing the <paramref name="eventHubName" />.  The name of the Event Hub should be
               passed only once, either as part of the connection string or separately.
             </remarks>
            
             <seealso href="https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string">How to get an Event Hubs connection string</seealso>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.#ctor(System.String,System.String,Azure.AzureNamedKeyCredential,Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> class.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the producer with.</param>
             <param name="credential">The shared access key credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
             <param name="clientOptions">A set of options to apply when configuring the producer.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.#ctor(System.String,System.String,Azure.AzureSasCredential,Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> class.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the producer with.</param>
             <param name="credential">The shared access signature credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
             <param name="clientOptions">A set of options to apply when configuring the producer.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.#ctor(System.String,System.String,Azure.Core.TokenCredential,Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> class.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the producer with.</param>
             <param name="credential">The Azure managed identity credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
             <param name="clientOptions">A set of options to apply when configuring the producer.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.#ctor(Azure.Messaging.EventHubs.EventHubConnection,Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> class.
             </summary>
            
             <param name="connection">The <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" /> connection to use for communication with the Event Hubs service.</param>
             <param name="clientOptions">A set of options to apply when configuring the producer.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.#ctor(Azure.Messaging.EventHubs.EventHubConnection,Azure.Messaging.EventHubs.Core.TransportProducer,Azure.Messaging.EventHubs.Core.TransportProducerPool)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> class.
             </summary>
            
             <param name="connection">The connection to use as the basis for delegation of client-type operations.</param>
             <param name="transportProducer">The transport producer instance to use as the basis for service communication.</param>
             <param name="partitionProducerPool">A <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducerPool" /> used to manage a set of partition specific <see cref="T:Azure.Messaging.EventHubs.Core.TransportProducer" />.</param>
            
             <remarks>
               This constructor is intended to be used internally for functional
               testing only.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.#ctor">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.GetEventHubPropertiesAsync(System.Threading.CancellationToken)">
             <summary>
               Retrieves information about the Event Hub that the connection is associated with, including
               the number of partitions present and their identifiers.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The set of information for the Event Hub that this client is associated with.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.GetPartitionIdsAsync(System.Threading.CancellationToken)">
             <summary>
               Retrieves the set of identifiers for the partitions of an Event Hub.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The set of identifiers for the partitions within the Event Hub that this client is associated with.</returns>
            
             <remarks>
               This method is synonymous with invoking <see cref="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.GetEventHubPropertiesAsync(System.Threading.CancellationToken)" /> and reading the <see cref="P:Azure.Messaging.EventHubs.EventHubProperties.PartitionIds" />
               property that is returned. It is offered as a convenience for quick access to the set of partition identifiers for the associated Event Hub.
               No new or extended information is presented.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.GetPartitionPropertiesAsync(System.String,System.Threading.CancellationToken)">
             <summary>
               Retrieves information about a specific partition for an Event Hub, including elements that describe the available
               events in the partition event stream.
             </summary>
            
             <param name="partitionId">The unique identifier of a partition associated with the Event Hub.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The set of information for the requested partition under the Event Hub this client is associated with.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.GetPartitionPublishingPropertiesAsync(System.String,System.Threading.CancellationToken)">
             <summary>
               A set of information about the state of publishing for a partition, as observed by the <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" />.  This
               data can always be read, but will only be populated with information relevant to the active features for the producer client.
             </summary>
            
             <param name="partitionId">The unique identifier of a partition associated with the Event Hub.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The set of information about the publishing state of the requested partition, within the context of this producer.</returns>
            
             <remarks>
               The state of a partition is only understood by the <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> after events have been published to that
               partition; calling this method for a partition before events have been published to it will return an empty set of properties.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.SendAsync(System.Collections.Generic.IEnumerable{Azure.Messaging.EventHubs.EventData},System.Threading.CancellationToken)">
             <summary>
               Sends a set of events to the associated Event Hub as a single operation.  To avoid the
               overhead associated with measuring and validating the size in the client, validation will
               be delegated to the Event Hubs service and is deferred until the operation is invoked.
               The call will fail if the size of the specified set of events exceeds the maximum allowable
               size of a single batch.
             </summary>
            
             <param name="eventBatch">The set of event data to send.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>
               A task to be resolved on when the operation has completed; if no exception is thrown when awaited, the
               Event Hubs service has acknowledge receipt and assumed responsibility for delivery of the set of events.
             </returns>
            
             <exception cref="T:Azure.Messaging.EventHubs.EventHubsException">
               Occurs when the set of events exceeds the maximum size allowed in a single batch, as determined by the Event Hubs service.  The <see cref="P:Azure.Messaging.EventHubs.EventHubsException.Reason" /> will be set to
               <see cref="F:Azure.Messaging.EventHubs.EventHubsException.FailureReason.MessageSizeExceeded" /> in this case.
             </exception>
            
             <remarks>
               When published, the result is atomic; either all events that belong to the set were successful or all
               have failed.  Partial success is not possible.
             </remarks>
            
             <seealso cref="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.SendAsync(System.Collections.Generic.IEnumerable{Azure.Messaging.EventHubs.EventData},Azure.Messaging.EventHubs.Producer.SendEventOptions,System.Threading.CancellationToken)" />
             <seealso cref="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.SendAsync(Azure.Messaging.EventHubs.Producer.EventDataBatch,System.Threading.CancellationToken)" />
             <seealso cref="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.CreateBatchAsync(System.Threading.CancellationToken)" />
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.SendAsync(System.Collections.Generic.IEnumerable{Azure.Messaging.EventHubs.EventData},Azure.Messaging.EventHubs.Producer.SendEventOptions,System.Threading.CancellationToken)">
             <summary>
               Sends a set of events to the associated Event Hub as a single operation.  To avoid the
               overhead associated with measuring and validating the size in the client, validation will
               be delegated to the Event Hubs service and is deferred until the operation is invoked.
               The call will fail if the size of the specified set of events exceeds the maximum allowable
               size of a single batch.
             </summary>
            
             <param name="eventBatch">The set of event data to send.</param>
             <param name="options">The set of options to consider when sending this batch.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>
               A task to be resolved on when the operation has completed; if no exception is thrown when awaited, the
               Event Hubs service has acknowledge receipt and assumed responsibility for delivery of the set of events.
             </returns>
            
             <exception cref="T:Azure.Messaging.EventHubs.EventHubsException">
               Occurs when the set of events exceeds the maximum size allowed in a single batch, as determined by the Event Hubs service.  The <see cref="P:Azure.Messaging.EventHubs.EventHubsException.Reason" /> will be set to
               <see cref="F:Azure.Messaging.EventHubs.EventHubsException.FailureReason.MessageSizeExceeded" /> in this case.
             </exception>
            
             <remarks>
               When published, the result is atomic; either all events that belong to the set were successful or all
               have failed.  Partial success is not possible.
             </remarks>
            
             <seealso cref="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.SendAsync(System.Collections.Generic.IEnumerable{Azure.Messaging.EventHubs.EventData},System.Threading.CancellationToken)" />
             <seealso cref="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.SendAsync(Azure.Messaging.EventHubs.Producer.EventDataBatch,System.Threading.CancellationToken)" />
             <seealso cref="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.CreateBatchAsync(Azure.Messaging.EventHubs.Producer.CreateBatchOptions,System.Threading.CancellationToken)" />
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.SendAsync(Azure.Messaging.EventHubs.Producer.EventDataBatch,System.Threading.CancellationToken)">
             <summary>
               Sends a set of events to the associated Event Hub using a batched approach.
             </summary>
            
             <param name="eventBatch">The set of event data to send. A batch may be created using <see cref="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.CreateBatchAsync(System.Threading.CancellationToken)" />.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>
               A task to be resolved on when the operation has completed; if no exception is thrown when awaited, the
               Event Hubs service has acknowledge receipt and assumed responsibility for delivery of the batch.
             </returns>
            
             <remarks>
               When published, the result is atomic; either all events that belong to the batch were successful or all
               have failed.  Partial success is not possible.
             </remarks>
            
             <seealso cref="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.CreateBatchAsync(System.Threading.CancellationToken)" />
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.CreateBatchAsync(System.Threading.CancellationToken)">
             <summary>
               Creates a size-constraint batch to which <see cref="T:Azure.Messaging.EventHubs.EventData" /> may be added using a try-based pattern.  If an event would
               exceed the maximum allowable size of the batch, the batch will not allow adding the event and signal that scenario using its
               return value.
            
               Because events that would violate the size constraint cannot be added, publishing a batch will not trigger an exception when
               attempting to send the events to the Event Hubs service.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An <see cref="T:Azure.Messaging.EventHubs.Producer.EventDataBatch" /> with the default batch options.</returns>
            
             <seealso cref="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.CreateBatchAsync(Azure.Messaging.EventHubs.Producer.CreateBatchOptions,System.Threading.CancellationToken)" />
             <seealso cref="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.SendAsync(Azure.Messaging.EventHubs.Producer.EventDataBatch,System.Threading.CancellationToken)" />
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.CreateBatchAsync(Azure.Messaging.EventHubs.Producer.CreateBatchOptions,System.Threading.CancellationToken)">
             <summary>
               Creates a size-constraint batch to which <see cref="T:Azure.Messaging.EventHubs.EventData" /> may be added using a try-based pattern.  If an event would
               exceed the maximum allowable size of the batch, the batch will not allow adding the event and signal that scenario using its
               return value.
            
               Because events that would violate the size constraint cannot be added, publishing a batch will not trigger an exception when
               attempting to send the events to the Event Hubs service.
             </summary>
            
             <param name="options">The set of options to consider when creating this batch.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An <see cref="T:Azure.Messaging.EventHubs.Producer.EventDataBatch" /> with the requested <paramref name="options" />.</returns>
            
             <seealso cref="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.CreateBatchAsync(System.Threading.CancellationToken)" />
             <seealso cref="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.SendAsync(Azure.Messaging.EventHubs.Producer.EventDataBatch,System.Threading.CancellationToken)" />
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.CloseAsync(System.Threading.CancellationToken)">
             <summary>
               Closes the producer.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.DisposeAsync">
             <summary>
               Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" />,
               including ensuring that the client itself has been closed.
             </summary>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions">
             <summary>
               The set of options that can be specified when creating an <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" />
               to configure its behavior.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions.EnableIdempotentPartitions">
             <summary>
               Indicates whether or not the producer should enable idempotent publishing to the Event Hub partitions.  If
               enabled, the producer will only be able to publish directly to partitions; it will not be able to publish to
               the Event Hubs gateway for automatic partition routing nor using a partition key.
             </summary>
            
             <value><c>true</c> if the producer should enable idempotent partition publishing; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions.PartitionOptions">
             <summary>
               The set of options that can be specified to influence publishing behavior specific to the configured Event Hub partition.  These
               options are not necessary in the majority of scenarios and are intended for use with specialized scenarios, such as when
               recovering the state used for idempotent publishing.
            
               <para>It is highly recommended that these options only be specified if there is a proven need to do so; Incorrectly configuring these
               values may result in an <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> instance that is unable to publish to the Event Hubs.</para>
             </summary>
            
             <remarks>
               These options are ignored when publishing to the Event Hubs gateway for automatic routing or when using a partition key.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions.ConnectionOptions">
             <summary>
               The options used for configuring the connection to the Event Hubs service.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions.RetryOptions">
             <summary>
               The set of options to use for determining whether a failed operation should be retried and,
               if so, the amount of time to wait between retry attempts.  These options also control the
               amount of time allowed for publishing events and other interactions with the Event Hubs service.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions.Clone">
             <summary>
               Creates a new copy of the current <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions" />, cloning its attributes into a new instance.
             </summary>
            
             <returns>A new copy of <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions" />.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions.CreateFeatureFlags">
             <summary>
               Creates the set of flags that represents the features requested by these options.
             </summary>
            
             <returns>The set of features that were requested for the <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" />.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions.GetPublishingOptionsOrDefaultForPartition(System.String)">
             <summary>
               Attempts to retrieve the publishing options for a given partition, returning a
               default in the case that no partition was specified or there were no available options
               for that partition.
             </summary>
            
             <param name="partitionId">The identifier of the partition for which options are requested.</param>
            
             <returns><c>null</c> in the event that there was no partition specified or no options for the partition; otherwise, the publishing options.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Producer.PartitionPublishingOptions">
             <summary>
               The set of options that can be specified for an <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" />
               to influence its behavior when publishing directly to an Event Hub partition.
             </summary>
            
             <remarks>
               These options are ignored when publishing to the Event Hubs gateway for automatic
               routing or when using a partition key.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.PartitionPublishingOptions.ProducerGroupId">
             <summary>
               The identifier of the producer group that this producer is associated with when publishing to the associated partition.
               Events will be published in the context of this group.
             </summary>
            
             <value>The identifier of the producer group to associate with the partition; if <c>null</c>, the Event Hubs service will control the value.</value>
            
             <remarks>
               The producer group is only recognized and relevant when certain features of the producer are enabled.  For example, it is used by
               idempotent publishing.
             </remarks>
            
             <seealso cref="P:Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions.EnableIdempotentPartitions" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.PartitionPublishingOptions.OwnerLevel">
             <summary>
               The owner level indicates that a publishing is intended to be performed exclusively for events in the
               requested partition in the context of the associated producer group.  To do so, publishing will attempt to assert ownership
               over the partition; in the case where more than one publisher in the producer group attempts to assert ownership for the same
               partition, the one having a larger <see cref="P:Azure.Messaging.EventHubs.Producer.PartitionPublishingOptions.OwnerLevel" /> value will "win".
            
               <para>When an owner level is specified, other exclusive publishers which have a lower owner level within the context of the same producer
               group will either not be allowed to be created or, if they already exist, will encounter an exception during the next attempted operation.  Should
               there be multiple producers in the producer group with the same owner level, each of them will be able to publish to the partition.</para>
            
               <para>Producers with no owner level or which belong to a different producer group are permitted to publish to the associated partition without
             restriction or awareness of other exclusive producers.</para>
             </summary>
            
             <value>The relative priority to associate with an exclusive publisher; if <c>null</c>, the Event Hubs service will control the value.</value>
            
             <remarks>
               The owner level is only recognized and relevant when certain features of the producer are enabled.  For example, it is used by
               idempotent publishing.
            
               <para>An <see cref="T:Azure.Messaging.EventHubs.EventHubsException" /> will occur if an <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> is unable to read events from the
               requested Event Hub partition for the given consumer group.  In this case, the <see cref="T:Azure.Messaging.EventHubs.EventHubsException.FailureReason" />
               will be set to <see cref="F:Azure.Messaging.EventHubs.EventHubsException.FailureReason.ProducerDisconnected" />.</para>
             </remarks>
            
             <seealso cref="T:Azure.Messaging.EventHubs.EventHubsException" />
             <seealso cref="F:Azure.Messaging.EventHubs.EventHubsException.FailureReason.ProducerDisconnected" />
             <seealso cref="P:Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions.EnableIdempotentPartitions" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.PartitionPublishingOptions.StartingSequenceNumber">
             <summary>
               The starting number that should be used for the automatic sequencing of events for the associated partition, when published by this producer.
             </summary>
            
             <value>
                 <para>The starting sequence number to associate with the partition; if <c>null</c>, the Event Hubs service will control the value.</para>
            
                 <para>The sequence number will be in the range of <c>0</c> - <see cref="F:System.Int32.MaxValue" /> (inclusive) and will increase as events are published.
                 When more than <see cref="F:System.Int32.MaxValue" /> events have been published, the sequence number will roll over to <c>0</c>.</para>
             </value>
            
             <remarks>
               The starting sequence number is only recognized and relevant when certain features of the producer are enabled.  For example, it is used by
               idempotent publishing.
             </remarks>
            
             <seealso cref="P:Azure.Messaging.EventHubs.Producer.EventHubProducerClientOptions.EnableIdempotentPartitions" />
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.PartitionPublishingOptions.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.PartitionPublishingOptions.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.PartitionPublishingOptions.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.PartitionPublishingOptions.Clone">
             <summary>
               Creates a new copy of the current <see cref="T:Azure.Messaging.EventHubs.Producer.PartitionPublishingOptions" />, cloning its attributes into a new instance.
             </summary>
            
             <returns>A new copy of <see cref="T:Azure.Messaging.EventHubs.Producer.PartitionPublishingOptions" />.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Producer.PartitionPublishingProperties">
             <summary>
               A set of information for an Event Hub.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.PartitionPublishingProperties.Empty">
             <summary>
               Returns a set of properties that represents an empty set of properties
               suitable for use when partitions are not inherently stateful.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.PartitionPublishingProperties.IsIdempotentPublishingEnabled">
             <summary>
               Indicates whether or not idempotent publishing is enabled for the producer and, by extension, the associated partition.
             </summary>
            
             <value><c>true</c> if the idempotent publishing is enabled; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.PartitionPublishingProperties.ProducerGroupId">
             <summary>
               The identifier of the producer group for which this producer is publishing to the associated partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.PartitionPublishingProperties.OwnerLevel">
             <summary>
               The owner level of the producer publishing to the associated partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.PartitionPublishingProperties.LastPublishedSequenceNumber">
             <summary>
               The sequence number assigned to the event that was most recently published to the associated partition
               successfully.
             </summary>
            
             <value>
               <para>The sequence number will be in the range of <c>-1</c> - <see cref="F:System.Int32.MaxValue" /> (inclusive) and will
               increase as events are published. When more than <see cref="F:System.Int32.MaxValue" /> events have been published,
               the sequence number will roll over to <c>0</c>.</para>
            
               <para>A value of <c>-1</c> indicates that no events are known to have been published.</para>
             </value>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.PartitionPublishingProperties.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.PartitionPublishingProperties.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.PartitionPublishingProperties.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.PartitionPublishingProperties.#ctor(System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int16},System.Nullable{System.Int32})">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventHubProperties" /> class.
             </summary>
            
             <param name="isIdempotentPublishingEnabled">Indicates whether idempotent publishing is enabled.</param>
             <param name="producerGroupId">The identifier of the producer group associated with the partition.</param>
             <param name="ownerLevel">The owner level associated with the partition.</param>
             <param name="lastPublishedSequenceNumber">The sequence number assigned to the event that was last successfully published to the partition.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Producer.PartitionPublishingState">
             <summary>
               The set of state associated with stateful publishing to a partition, such as when
               idempotency is enabled.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.PartitionPublishingState.PartitionId">
             <summary>
               The identifier of the partition whose state is represented.
             </summary>
            
             <remarks>
               This class is not intended to be used with its <see cref="P:Azure.Messaging.EventHubs.Producer.PartitionPublishingState.PublishingGuard" />
               for synchronizing access; it does not provide any inherent thread safety guarantees.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.PartitionPublishingState.IsInitialized">
             <summary>
               Indicates whether or not the state has been initialized.
             </summary>
            
             <value><c>true</c> if this instance is initialized; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.PartitionPublishingState.PublishingGuard">
             <summary>
               The primitive for synchronizing access for publishing to the partition.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.PartitionPublishingState.ProducerGroupId">
             <summary>
               The identifier of the producer group for which publishing is being performed.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.PartitionPublishingState.OwnerLevel">
             <summary>
               The owner level for which publishing is being performed.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.PartitionPublishingState.LastPublishedSequenceNumber">
             <summary>
               The sequence number assigned to the event that was most recently published to the associated partition
               successfully.
             </summary>
            
             <value>
               The sequence number will be in the range of <c>0</c> - <see cref="F:System.Int32.MaxValue" /> (inclusive) and will
               increase as events are published.  When more than <see cref="F:System.Int32.MaxValue" /> events have been published,
               the sequence number will roll over to <c>0</c>.
             </value>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.PartitionPublishingState.#ctor(System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.PartitionPublishingState" /> class.
             </summary>
            
             <param name="partitionId">The identifier of the partition whose state is represented.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Producer.SendEventOptions">
             <summary>
               The set of options that can be specified to influence the way in which events
               are published to the Event Hubs service.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.SendEventOptions.PartitionKey">
             <summary>
               Allows a hashing key to be provided for the batch of events, which instructs the Event Hubs
               service map this key to a specific partition but allowing the service to choose an arbitrary,
               partition for this batch of events and any other batches using the same partition hashing key.
            
               The selection of a partition is stable for a given partition hashing key.  Should any other
               batches of events be sent using the same exact partition hashing key, the Event Hubs service will
               route them all to the same partition.
            
               This should be specified only when there is a need to group events by partition, but there is
               flexibility into which partition they are routed. If ensuring that a batch of events is sent
               only to a specific partition, it is recommended that the identifier of the position be
               specified directly when sending the batch.
             </summary>
            
             <value>
               If the producer wishes to influence the automatic routing of events to partitions, the partition
               hashing key to associate with the event or batch of events; otherwise, <c>null</c>.
             </value>
            
             <remarks>
               If the <see cref="P:Azure.Messaging.EventHubs.Producer.SendEventOptions.PartitionKey" /> is specified, then no <see cref="P:Azure.Messaging.EventHubs.Producer.SendEventOptions.PartitionId" />
               may be set when sending.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Producer.SendEventOptions.PartitionId">
             <summary>
               If specified, events be published to this specific partition.  If the identifier is not
               specified, the Event Hubs service will be responsible for routing events automatically to an available partition.
             </summary>
            
             <value>
               If the producer wishes the events to be automatically to partitions, <c>null</c>; otherwise, the identifier
               of the desired partition.
             </value>
            
             <remarks>
               If the <see cref="P:Azure.Messaging.EventHubs.Producer.SendEventOptions.PartitionId" /> is specified, then no <see cref="P:Azure.Messaging.EventHubs.Producer.SendEventOptions.PartitionKey" />
               may be set when sending.
            
               <para>Allowing automatic routing of partitions is recommended when:</para>
               <para>- The sending of events needs to be highly available.</para>
               <para>- The event data should be evenly distributed among all available partitions.</para>
            
               If no partition is specified, the following rules are used for automatically selecting one:
               <para>1) Distribute the events equally amongst all available partitions using a round-robin approach.</para>
               <para>2) If a partition becomes unavailable, the Event Hubs service will automatically detect it and forward the message to another available partition.</para>
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.SendEventOptions.#ctor">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.SendEventOptions" /> class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.SendEventOptions.#ctor(System.String,System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.SendEventOptions" /> class.
             </summary>
            
             <param name="partitionId">The identifier of the partition to which events should be sent.</param>
             <param name="partitionKey">The hashing key to use for influencing the partition to which the events are routed.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.SendEventOptions.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.SendEventOptions.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.SendEventOptions.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Producer.SendEventOptions.Clone">
             <summary>
               Creates a new copy of the current <see cref="T:Azure.Messaging.EventHubs.Producer.SendEventOptions" />, cloning its attributes into a new instance.
             </summary>
            
             <returns>A new copy of <see cref="T:Azure.Messaging.EventHubs.Producer.SendEventOptions" />.</returns>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.ResourcesNamespace.Current">
            <summary>The default namespace of the local assembly; this is where the embedded resources appear.</summary>
        </member>
        <member name="T:Azure.Messaging.EventHubs.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.CannotParseIntegerType">
            <summary>
              Looks up a localized string similar to The {0} value is expected to be a {1} bit signed integer. Actual value: '{2}'..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.CannotSendWithPartitionIdAndPartitionKey">
            <summary>
              Looks up a localized string similar to An event cannot be published using both a partition key and a partition identifier.  This operation specified partition key `{0}` and partition id `{1}`..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.CannotStartEventProcessorWithoutHandler">
            <summary>
              Looks up a localized string similar to Cannot begin processing without {0} handler set..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ClientNeededForThisInformationNotAvailable">
            <summary>
              Looks up a localized string similar to The Event Hub client responsible for this information is not available.
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ClosedConnectionCannotPerformOperation">
            <summary>
              Looks up a localized string similar to {0} has already been closed and cannot perform the requested operation..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ClosedInstanceCannotPerformOperation">
            <summary>
              Looks up a localized string similar to {0} has already been closed and cannot perform the requested operation..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ConsumerIdentifierOverMaxValue">
            <summary>
              Looks up a localized string similar to The 'identifier' parameter exceeds the maximum allowed size of {0} characters..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.CouldNotAcquireAccessToken">
            <summary>
              Looks up a localized string similar to Unable to acquire an access token using the provided credential..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.CouldNotCreateLink">
            <summary>
              Looks up a localized string similar to Unable to create the items needed to communicate with the Event Hubs service..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.DeveloperCodeError">
            <summary>
              Looks up a localized string similar to An error was encountered while executing custom code, such as in an event handler..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.DeveloperCodeExceptionMessageMask">
            <summary>
              Looks up a localized string similar to [Developer Code Exception] : {0}..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.EventBatchIsLocked">
            <summary>
              Looks up a localized string similar to The event batch is currently being used in communication with the Event Hubs service; events may not be added until the active operation is complete..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.FailedToCreateReader">
            <summary>
              Looks up a localized string similar to Could not create a reader of events for Event Hub: '{0}', partition: '{1}', consumer group: '{2}'..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.FailedToSerializeUnsupportedType">
            <summary>
              Looks up a localized string similar to Serialization failed due to an unsupported type, {0}..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.InvalidConnectionString">
            <summary>
              Looks up a localized string similar to The connection string could not be parsed; either it was malformed or contains no well-known tokens..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.InvalidEncoding">
            <summary>
              Looks up a localized string similar to The string has an invalid encoding format..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.InvalidEventPositionForFilter">
            <summary>
              Looks up a localized string similar to The event position is not valid for filtering.  It must have an offset, sequence number, or enqueued time available to filter against..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.InvalidFullyQualifiedNamespace">
            <summary>
              Looks up a localized string similar to The value '{0}' is not a well-formed Event Hubs fully qualified namespace..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.InvalidMessageBody">
            <summary>
              Looks up a localized string similar to An invalid message body was encountered.  Either the body was null or an incorrect type. Expected: {0}.
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.InvalidSharedAccessSignature">
            <summary>
              Looks up a localized string similar to The shared access signature could not be parsed; it was either malformed or incorrectly encoded..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.InvalidEndpointAddress">
            <summary>
              Looks up a localized string similar to The endpoint address could not be parsed; it was either malformed or not using the `sb://` scheme..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.InvalidTimePeriod">
            <summary>
              Looks up a localized string similar to The time period may not be Zero or Infinite..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.InvalidTransportType">
            <summary>
              Looks up a localized string similar to The requested transport type, '{0}' is not supported..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.MessageSizeExceeded">
            <summary>
              Looks up a localized string similar to The message (id:{0}, size:{1} bytes) is larger than is currently allowed ({2} bytes)..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.MissingConnectionInformation">
            <summary>
              Looks up a localized string similar to The connection string used for an Event Hub client must specify the Event Hubs namespace host, and a Shared Access Signature (both the name and value) to be valid. The path to an Event Hub must be included in the connection string or specified separately..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OnlyOneEventHubNameMayBeSpecified">
            <summary>
              Looks up a localized string similar to The path to an Event Hub may be specified as part of the connection string or as a separate value, but not both..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ProxyMustUseWebSockets">
            <summary>
              Looks up a localized string similar to A proxy may only be used for a web sockets connection..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ResourceMustMatchSharedAccessSignature">
            <summary>
              Looks up a localized string similar to The requested resource, '{0}', does not match the resource of the shared access signature, '{1}'. A token cannot be issued..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.RetryOptionsMustBeSet">
            <summary>
              Looks up a localized string similar to Retry options must be specified; if no retry is desired, please set the maximum number of retries to 0. To provide a custom retry policy, please assign it on the client directly..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.RunningEventProcessorCannotPerformOperation">
            <summary>
              Looks up a localized string similar to The event processor is already running and needs to be stopped in order to perform this operation..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.SharedAccessKeyIsRequired">
            <summary>
              Looks up a localized string similar to In order to update the signature, a shared access key must have been provided when the shared access signature was created..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.SharedKeyCredentialCannotGenerateTokens">
            <summary>
              Looks up a localized string similar to A shared key credential is unable to generate a token directly. Please use this credential when creating an Event Hub Client, for proper generation of shared key tokens..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.TimeoutMustBePositive">
            <summary>
              Looks up a localized string similar to A timeout value must be positive. To request using the default timeout, please use TimeSpan.Zero or null..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.TimeSpanMustBeNonNegative">
            <summary>
              Looks up a localized string similar to Argument {0} must be a non-negative timespan value. The provided value was {1}..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.TrackLastEnqueuedEventPropertiesNotSet">
            <summary>
              Looks up a localized string similar to This information is only available when TrackLastEnqueuedEventProperties is set on the Event Hub consumer options..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.UnknownCommunicationException">
            <summary>
              Looks up a localized string similar to An unknown error was encountered while communicating with the Event Hubs service..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.UnknownConnectionType">
            <summary>
              Looks up a localized string similar to The specified connection type, "{0}", is not recognized as valid in this context..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.UnknownRetryMode">
            <summary>
              Looks up a localized string similar to The requested retry mode, '{0}', is not known; a retry delay canot be determined..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.UnrecoverableException">
            <summary>
              Looks up a localized string similar to An unrecoverable exception was encountered that left the environment in a bad state..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.UnsupportedCredential">
            <summary>
              Looks up a localized string similar to The credential is not a known and supported credential type. Please use a JWT credential or shared key credential..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.UnsupportedTransportEventType">
            <summary>
              Looks up a localized string similar to The requested transport event type, '{0}', is not supported by the active transport client..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ValueMustBeAtLeast">
            <summary>
              Looks up a localized string similar to The value supplied must be greater than or equal to {0}..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ValueOutOfRange">
            <summary>
              Looks up a localized string similar to The value supplied must be between {0} and {1}..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.BlobsResourceDoesNotExist">
            <summary>
              Looks up a localized string similar to The Azure Storage Blobs container or blob used by the Event Processor Client does not exist..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.CannotCreateCheckpointForEmptyEvent">
            <summary>
              Looks up a localized string similar to A checkpoint cannot be created or updated using an empty event..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.HandlerHasAlreadyBeenAssigned">
            <summary>
              Looks up a localized string similar to Another handler has already been assigned to this event and there can be only one..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.HandlerHasNotBeenAssigned">
            <summary>
              Looks up a localized string similar to This handler has not been previously assigned to this event..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OperationListOwnership">
            <summary>
              Looks up a localized string similar to Retrieving list of ownership from the storage service..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OperationGetPartitionIds">
            <summary>
              Looks up a localized string similar to Retrieving list of partition identifiers from a Consumer Client..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OperationListCheckpoints">
            <summary>
              Looks up a localized string similar to Retrieving list of checkpoints from the storage service..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OperationLoadBalancing">
            <summary>
              Looks up a localized string similar to Executing a load balancing cycle..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OperationClaimOwnership">
            <summary>
              Looks up a localized string similar to Attempting to claim a new ownership in the storage service..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OperationRenewOwnership">
            <summary>
              Looks up a localized string similar to Attempting to renew all of the processor's partition ownership in the storage service..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OperationReadEvents">
            <summary>
              Looks up a localized string similar to Reading events from the Event Hubs service..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OperationEventProcessingLoop">
            <summary>
              Looks up a localized string similar to Performing the main Event Processor loop..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OperationSurrenderOwnership">
            <summary>
              Looks up a localized string similar to Surrendering ownership of a partition..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.CannotReadLastEnqueuedEventPropertiesWithoutEvent">
            <summary>
              Looks up a localized string similar to The last enqueued event properties cannot be read when an event is not available..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.AggregateEventProcessingExceptionMessage">
            <summary>
              Looks up a localized string similar to One or more exceptions occured during event processing.  Please see the inner exceptions for more detail..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OnlyOneSharedAccessAuthorizationMayBeSpecified">
            <summary>
              Looks up a localized string similar to The authorization for a connection string may specifiy a shared key or precomputed shared access signature, but not both.  Please verify that your connection string does not have the `SharedAccessSignature` token if you are passing the  `SharedKeyName` and `SharedKey`..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.CannotPublishToGateway">
            <summary>
              Looks up a localized string similar to The producer was configured to use features that require publishing to a specific partition.  Publishing with automatic routing or using a partition key is not supported by this producer..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.IdempotentAlreadyPublished">
            <summary>
              Looks up a localized string similar to These events have already been successfully published.  When idempotent publishing is enabled, events that were acknowledged by the Event Hubs service may not be published again..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ListCheckpointsAsyncObsolete">
            <summary>
              Looks up a localized string similar to The ListCheckpointsAsync method has been superseded by GetCheckpointAsync and should no longer be called..
            </summary>
        </member>
        <member name="T:Azure.Core.Argument">
             <summary>
               Provides a consistent means for verifying arguments and other invariants for a given
               member.
             </summary>
            
             <remarks>
               This class extends the <see cref="T:Azure.Core.Argument" /> type, referenced as a partial
               class via shared source; the base partial class definition may be found in the "SharedSource"
               folder of this project.
             </remarks>
            
            <summary>
            Argument validation.
            </summary>
            <remarks>
              <para>This class should be shared via source using Azure.Core.props and contain only common argument validation.
                It is declared partial so that you can use the same familiar class name but extend it with project-specific validation.
                To extend the functionality of this class, just declare your own partial <see cref="T:Azure.Core.Argument" /> class with project-specific methods.
              </para>
              <para>
                Be sure to document exceptions thrown by these methods on your public methods.
              </para>
            </remarks>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotEmptyOrWhiteSpace(System.String,System.String)">
             <summary>
               Ensures that an argument's value is a string comprised of only whitespace, though
               <c>null</c> is considered a valid value.  An <see cref="T:System.ArgumentException" /> is thrown
               if that invariant is not met.
             </summary>
            
             <param name="argumentValue">The value of the argument to verify.</param>
             <param name="argumentName">The name of the argument being considered.</param>
            
             <exception cref="T:System.ArgumentException">The argument is empty or contains only white-space.</exception>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertNotTooLong(System.String,System.Int32,System.String)">
             <summary>
               Ensures that a string argument's length is below a maximum allowed threshold,
               throwing an <see cref="T:System.ArgumentOutOfRangeException" /> if that invariant is not met.
             </summary>
            
             <param name="argumentValue">The value of the argument to verify.</param>
             <param name="maximumLength">The maximum allowable length for the <paramref name="argumentValue" />; its length must be less than or equal to this value.</param>
             <param name="argumentName">The name of the argument being considered.</param>
            
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="argumentValue" /> exceeds <paramref name="maximumLength" /> characters.</exception>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNegative(System.TimeSpan,System.String)">
             <summary>
               Ensures that an argument's value is not a negative value, throwing an
               <see cref="T:System.ArgumentOutOfRangeException" /> if that invariant is not met.
             </summary>
            
             <param name="argumentValue">The value of the argument to verify.</param>
             <param name="argumentName">The name of the argument being considered.</param>
            
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="argumentValue" /> is a negative <see cref="T:System.TimeSpan" /> value.</exception>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertAtLeast(System.Int64,System.Int64,System.String)">
             <summary>
               Ensures that an argument's value is at least as large as a given lower bound, throwing
               <see cref="T:System.ArgumentException" /> if that invariant is not met.
             </summary>
            
             <param name="argumentValue">The value of the argument to verify.</param>
             <param name="minimumValue">The minimum to use for comparison; <paramref name="argumentValue" /> must be greater than or equal to this value.</param>
             <param name="argumentName">The name of the argument being considered.</param>
            
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="argumentValue" /> is less than <paramref name="minimumValue" />.</exception>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertAtLeast(System.Int32,System.Int32,System.String)">
             <summary>
               Ensures that an argument's value is at least as large as a given lower bound, throwing
               <see cref="T:System.ArgumentException" /> if that invariant is not met.
             </summary>
            
             <param name="argumentValue">The value of the argument to verify.</param>
             <param name="minimumValue">The minimum to use for comparison; <paramref name="argumentValue" /> must be greater than or equal to this value.</param>
             <param name="argumentName">The name of the argument being considered.</param>
            
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="argumentValue" /> is less than <paramref name="minimumValue" />.</exception>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertNotDisposed(System.Boolean,System.String)">
             <summary>
               Ensures that an instance has not been disposed, throwing an
               <see cref="T:System.ObjectDisposedException" /> if that invariant is not met.
             </summary>
            
             <param name="wasDisposed"><c>true</c> if the target instance has been disposed; otherwise, <c>false</c>.</param>
             <param name="targetName">The name of the target instance that is being verified.</param>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertNotClosed(System.Boolean,System.String)">
             <summary>
               Ensures that an instance has not been closed, throwing an
               <see cref="T:Azure.Messaging.EventHubs.EventHubsException" /> if that invariant is not met.
             </summary>
            
             <param name="wasClosed"><c>true</c> if the target instance has been closed; otherwise, <c>false</c>.</param>
             <param name="targetName">The name of the target instance that is being verified.</param>
            
             <exception cref="T:Azure.Messaging.EventHubs.EventHubsException"><paramref name="wasClosed" /> is <c>true</c>.</exception>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertWellFormedEventHubsNamespace(System.String,System.String)">
             <summary>
               Ensures that an argument's value is a well-formed Event Hubs fully qualified namespace value,
               throwing a <see cref="T:System.ArgumentException" /> if that invariant is not met.
             </summary>
            
             <param name="argumentValue">The argument value.</param>
             <param name="argumentName">Name of the argument.</param>
            
            
             <exception cref="T:System.ArgumentException"><paramref name="argumentValue" /> is not a well-formed Event Hubs fully qualified namespace.</exception>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty collection.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty collection.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null, an empty string, or consists only of white-space characters.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string or consists only of white-space characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotDefault``1(``0@,System.String)">
            <summary>
            Throws if <paramref name="value" /> is the default value for type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of structure to validate which implements <see cref="T:System.IEquatable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is the default value for type <typeparamref name="T" />.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertInRange``1(``0,``0,``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is less than the <paramref name="minimum" /> or greater than the <paramref name="maximum" />.
            </summary>
            <typeparam name="T">The type of to validate which implements <see cref="T:System.IComparable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="minimum">The minimum value to compare.</param>
            <param name="maximum">The maximum value to compare.</param>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="T:Azure.Core.Pipeline.ActivityExtensions">
            <summary>
            HACK HACK HACK. Some runtime environments like Azure.Functions downgrade System.Diagnostic.DiagnosticSource package version causing method not found exceptions in customer apps
            This type is a temporary workaround to avoid the issue.
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1">
            <summary>
            Both <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1" /> and <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerator`1" /> are defined as public structs so that foreach can use duck typing
            to call <see cref="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.GetEnumerator" /> and avoid heap memory allocation.
            Please don't delete this method and don't make these types private.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Azure.Core.HashCodeBuilder">
            <summary>
            Copied from https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/HashCode.cs.
            </summary>
        </member>
        <member name="T:Azure.Core.ArrayBufferWriter`1">
            <summary>
            Represents a heap-based, array-backed output sink into which <typeparam name="T" /> data can be written.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1" />, in which data can be written to,
            with the default initial capacity.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1" />, in which data can be written to,
            with an initial capacity specified.
            </summary>
            <param name="initialCapacity">The minimum capacity with which to initialize the underlying buffer.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="initialCapacity" /> is not positive (i.e. less than or equal to 0).
            </exception>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenMemory">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlyMemory`1" />.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenSpan">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlySpan`1" />.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenCount">
            <summary>
            Returns the amount of data written to the underlying buffer so far.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.Capacity">
            <summary>
            Returns the total amount of space within the underlying buffer.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.FreeCapacity">
            <summary>
            Returns the amount of space available that can still be written into without forcing the underlying buffer to grow.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Clear">
            <summary>
            Clears the data written to the underlying buffer.
            </summary>
            <remarks>
            You must clear the <see cref="T:Azure.Core.ArrayBufferWriter`1" /> before trying to re-use it.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Advance(System.Int32)">
            <summary>
            Notifies <see cref="T:System.Buffers.IBufferWriter`1" /> that <paramref name="count" /> amount of data was written to the output <see cref="T:System.Span`1" />/<see cref="T:System.Memory`1" />.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="count" /> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when attempting to advance past the end of the underlying buffer.
            </exception>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetMemory(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Memory`1" /> to write to that is at least the requested length (specified by <paramref name="sizeHint" />).
            If no <paramref name="sizeHint" /> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint" /> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Memory`1" />.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetSpan(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Span`1" /> to write to that is at least the requested length (specified by <paramref name="sizeHint" />).
            If no <paramref name="sizeHint" /> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint" /> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Span`1" />.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="T:Microsoft.Extensions.Azure.EventHubClientBuilderExtensions">
            <summary>
               The set of extensions to add the Event Hub client types to the clients builder
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.EventHubClientBuilderExtensions.AddEventHubProducerClient``1(``0,System.String)">
             <summary>
               Registers a <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> instance with the provided <paramref name="connectionString" />
             </summary>
            
        </member>
        <member name="M:Microsoft.Extensions.Azure.EventHubClientBuilderExtensions.AddEventHubProducerClient``1(``0,System.String,System.String)">
             <summary>
               Registers a <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> instance with the provided <paramref name="connectionString" /> and <paramref name="eventHubName" />
             </summary>
            
        </member>
        <member name="M:Microsoft.Extensions.Azure.EventHubClientBuilderExtensions.AddEventHubProducerClientWithNamespace``1(``0,System.String,System.String)">
             <summary>
               Registers a <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> instance with the provided <paramref name="fullyQualifiedNamespace" /> and <paramref name="eventHubName" />
             </summary>
            
        </member>
        <member name="M:Microsoft.Extensions.Azure.EventHubClientBuilderExtensions.AddEventHubProducerClient``2(``0,``1)">
             <summary>
               Registers a <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> instance with connection options loaded from the provided <paramref name="configuration" /> instance.
             </summary>
            
        </member>
        <member name="M:Microsoft.Extensions.Azure.EventHubClientBuilderExtensions.AddEventHubConsumerClient``1(``0,System.String,System.String)">
             <summary>
               Registers a <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClientOptions" /> instance with the provided <paramref name="connectionString" />
             </summary>
            
        </member>
        <member name="M:Microsoft.Extensions.Azure.EventHubClientBuilderExtensions.AddEventHubConsumerClient``1(``0,System.String,System.String,System.String)">
             <summary>
               Registers a <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" /> instance with the provided <paramref name="connectionString" /> and <paramref name="eventHubName" />
             </summary>
            
        </member>
        <member name="M:Microsoft.Extensions.Azure.EventHubClientBuilderExtensions.AddEventHubConsumerClientWithNamespace``1(``0,System.String,System.String,System.String)">
             <summary>
               Registers a <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" /> instance with the provided <paramref name="fullyQualifiedNamespace" /> and <paramref name="eventHubName" />
             </summary>
            
        </member>
        <member name="M:Microsoft.Extensions.Azure.EventHubClientBuilderExtensions.AddEventHubConsumerClient``2(``0,``1)">
             <summary>
               Registers a <see cref="T:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient" /> instance with connection options loaded from the provided <paramref name="configuration" /> instance.
             </summary>
            
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.Pipeline.TaskExtensions.Enumerator`1.System#Collections#IEnumerator#Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary><returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
    </members>
</doc>
